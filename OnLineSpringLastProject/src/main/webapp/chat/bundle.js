!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";e.exports=n(3)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";var r=a(n(0)),o=a(n(4)),i=a(n(8));function a(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(i.default,{music:[{singer:"iKON",movie:"vecSVX1QYbQ",rank:"1",title:"사랑을 했다 (LOVE SCENARIO)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/019/709/81019709_1516862241098_1_140x140.JPG"},{singer:"Red Velvet (레드벨벳)",movie:"J_CFBjAyPWE",rank:"2",title:"Bad Boy",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/027/210/81027210_1517290322253_1_140x140.JPG"},{singer:"장덕철",movie:"v6_GwXU1lkg",rank:"3",title:"그날처럼",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/007/399/81007399_1511854441859_1_140x140.JPG"},{singer:"MOMOLAND (모모랜드)",movie:"JQGRg8XBnB4",rank:"4",title:"뿜뿜",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/017/733/81017733_1514963221459_1_140x140.JPG"},{singer:"정승환",movie:"8DtJe6ZFyE0",rank:"5",title:"눈사람",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/029/121/81029121_1517900755525_1_140x140.JPG"},{singer:"청하",movie:"900X9fDFLc4",rank:"6",title:"Roller Coaster",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/022/313/81022313_1516159148701_1_140x140.JPG"},{singer:"선미",movie:"F4qfN5UeFvQ",rank:"7",title:"주인공",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/024/406/81024406_1516261128225_1_140x140.JPG"},{singer:"Camila Cabello",movie:"BQ0mxQXmLsk",rank:"8",title:"Havana (Feat. Young Thug)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/975/396/80975396_1515736227928_1_140x140.JPG"},{singer:"멜로망스 (MeloMance)",movie:"qYYJqWsBb1U",rank:"9",title:"선물",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/964/912/80964912_1499671793637_1_140x140.JPG"},{singer:"볼빨간사춘기",movie:"fag8nirMXgE",rank:"10",title:"#첫사랑",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/020/527/81020527_1515567844136_1_140x140.JPG"},{singer:"문문 (MoonMoon)",movie:"FvOBwRWaGZg",rank:"11",title:"비행운",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/891/933/80891933_1478684039222_1_140x140.JPG"},{singer:"펀치 (Punch)",movie:"WNU0JCOsliw",rank:"12",title:"오늘밤도",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/030/946/81030946_1517895836357_1_140x140.JPG"},{singer:"DEAN",movie:"wKyMIrBClYw",rank:"13",title:"instagram",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/015/028/81015028_1514272554668_1_140x140.JPG"},{singer:"다비치",movie:"_jzMDsYHktI",rank:"14",title:"너 없는 시간들",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/026/197/81026197_1516858012006_1_140x140.JPG"},{singer:"에일리 (Ailee)",movie:"YbbP3aUXif0",rank:"15",title:"다시 쓰고 싶어",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/032/667/81032667_1518157805529_1_140x140.JPG"},{singer:"TWICE (트와이스)",movie:"rRzxEiBLQCA",rank:"16",title:"Heart Shaker",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/009/024/81009024_1512973485015_1_140x140.JPG"},{singer:"펀치 (Punch)",movie:"yQt3kLczJp4",rank:"17",title:"밤이 되니까",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/991/767/80991767_1506666565645_1_140x140.JPG"},{singer:"Fitz & The Tantrums",movie:"Y2V6yjjPbX0",rank:"18",title:"HandClap",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/803/449/80803449_1458788251030_1_140x140.JPG"},{singer:"수지 (SUZY)",movie:"eQ3gXtX3U7I",rank:"19",title:"다른사람을 사랑하고 있어",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/024/958/81024958_1517214826318_1_140x140.JPG"},{singer:"윤종신",movie:"jy_UiIQn_d0",rank:"20",title:"좋니",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/959/572/80959572_1498096340350_1_140x140.JPG"},{singer:"수지 (SUZY)",movie:"lpzJNwur6Zk",rank:"21",title:"HOLIDAY (Feat. DPR LIVE)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/024/958/81024958_1517214826318_1_140x140.JPG"},{singer:"김동률",movie:"kMRLzSQorK0",rank:"22",title:"답장",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/021/191/81021191_1515653924081_1_140x140.JPG"},{singer:"Red Velvet (레드벨벳)",movie:"6uJf2IT2Zh8",rank:"23",title:"피카부 (Peek-A-Boo)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/003/854/81003854_1510903454899_1_140x140.JPG"},{singer:"TWICE (트와이스)",movie:"V2hlQkVJZhE",rank:"24",title:"LIKEY",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/995/333/80995333_1509345645050_1_140x140.JPG"},{singer:"박원",movie:"CbNmRJCkwQs",rank:"25",title:"All Of My Life",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/970/929/80970929_1501141349151_1_140x140.JPG"},{singer:"방탄소년단",movie:"MBdVXkSdhwU",rank:"26",title:"DNA",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/988/228/80988228_1505722039920_1_140x140.JPG"},{singer:"길구봉구",movie:"kgspMLLZosE",rank:"27",title:"이 별",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/987/812/80987812_1505720691739_1_140x140.JPG"},{singer:"EXO",movie:"leu-cTvMWTA",rank:"28",title:"Universe",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/014/942/81014942_1514269809677_1_140x140.JPG"},{singer:"민서 & 윤종신",movie:"X29h0TrJfSM",rank:"29",title:"좋아",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/002/774/81002774_1510722333800_1_140x140.JPG"},{singer:"오마이걸 (OH MY GIRL)",movie:"QIN5_tJRiyY",rank:"30",title:"비밀정원",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/020/130/81020130_1515483498408_1_140x140.JPG"},{singer:"다이나믹 듀오 (Dynamic Duo)",movie:"LQfMqHSklYI",rank:"31",title:"봉제선 (Feat. 수란)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/031/296/81031296_1517984247856_1_140x140.JPG"},{singer:"나얼",movie:"0wlXaHmmOVc",rank:"32",title:"기억의 빈자리",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/007/536/81007536_1511932813251_1_140x140.JPG"},{singer:"비투비 (BTOB)",movie:"4bykFvnRzno",rank:"33",title:"그리워하다",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/993/764/80993764_1508139830937_1_140x140.JPG"},{singer:"Ed Sheeran",movie:"JGwWNGJdvx8",rank:"34",title:"Shape Of You",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/911/494/80911494_1484644569534_1_140x140.JPG"},{singer:"세븐틴 (Seventeen)",movie:"ShEU4Ab0zxU",rank:"35",title:"고맙다",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/030/836/81030836_1517816422092_1_140x140.JPG"},{singer:"아이유 (IU)",movie:"BzYnNdJhZQw",rank:"36",title:"밤편지",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/933/154/80933154_1490341401069_1_140x140.JPG"},{singer:"우원재",movie:"RsHq6Q-7NsU",rank:"37",title:"시차 (We Are) (Feat. 로꼬 & GRAY)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/983/419/80983419_1504509397625_1_140x140.JPG"},{singer:"멜로망스 (MeloMance)",movie:"TCVQUBayskg",rank:"38",title:"짙어져",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/993/182/80993182_1507880649500_1_140x140.JPG"},{singer:"Shawn Mendes",movie:"dT2owtxkU8k",rank:"39",title:"There's Nothing Holdin' Me Back",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/941/542/80941542_1492739775489_1_140x140.JPG"},{singer:"볼빨간사춘기",movie:"hZmoMyFXDoI",rank:"40",title:"썸 탈꺼야",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/991/315/80991315_1506584021425_1_140x140.JPG"},{singer:"어반 자카파 (Urban Zakapa)",movie:"O92yHB0MDZ8",rank:"41",title:"그때의 나, 그때의 우리",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/081/001/046/81001046_1510124290726_1_140x140.JPG"},{singer:"종현 (JONGHYUN)",movie:"NpTpEsE9G8c",rank:"42",title:"Lonely (Feat. 태연)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/941/882/80941882_1493017191755_1_140x140.JPG"},{singer:"박원",movie:"/watch?v=nkkE0zNiFe0 ",rank:"43",title:"노력",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/893/630/80893630_1479290423741_1_140x140.JPG"},{singer:"선미",movie:"ur0hCdne2-s",rank:"44",title:"가시나",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/979/339/80979339_1503365015435_1_140x140.JPG"},{singer:"The Chainsmokers & Coldplay",movie:"FM7MFYoylVs",rank:"45",title:"Something Just Like This",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/913/561/80913561_1491533162795_1_140x140.JPG"},{singer:"헤이즈 (Heize)",movie:"afxLaQiLu-o",rank:"46",title:"비도 오고 그래서 (Feat. 신용재)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/960/357/80960357_1498458172138_1_140x140.JPG"},{singer:"에픽하이 (EPIK HIGH)",movie:"Z3INNjAEqHk",rank:"47",title:"연애소설 (Feat. 아이유)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/991/334/80991334_1508741715086_1_140x140.JPG"},{singer:"에일리 (Ailee)",movie:"6rS7OUGXUik",rank:"48",title:"첫눈처럼 너에게 가겠다",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/911/488/80911488_1483696444510_1_140x140.JPG"},{singer:"아이유 (IU)",movie:"d9IxdwEFk1c",rank:"49",title:"팔레트 (Feat. G-DRAGON)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/941/594/80941594_1492760375708_1_140x140.JPG"},{singer:"Red Velvet (레드벨벳)",movie:"WyiIGEHQP8o",rank:"50",title:"빨간 맛 (Red Flavor)",poster:"//image.genie.co.kr/Y/IMAGE/IMG_ALBUM/080/964/658/80964658_1499421855077_1_140x140.JPG"}]}),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(1),i=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var l=60109,u=60110,s=60112;t.Suspense=60113;var c=60115,f=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),a=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),l=d("react.provider"),u=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),c=d("react.memo"),f=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==(void 0===e?"undefined":r(e))&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,o(w,v.prototype),w.isPureReactComponent=!0;var k={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:k.current}}function _(e){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&e.$$typeof===i}var C=/\/+/g;function T(e,t){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function M(e,t,n,o,l){var u=void 0===e?"undefined":r(e);"undefined"!==u&&"boolean"!==u||(e=null);var s=!1;if(null===e)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case i:case a:s=!0}}if(s)return l=l(s=e),e=""===o?"."+T(s,0):o,Array.isArray(l)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),M(l,t,n,"",(function(e){return e}))):null!=l&&(_(l)&&(l=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,n+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(C,"$&/")+"/")+e)),t.push(l)),1;if(s=0,o=""===o?".":o+":",Array.isArray(e))for(var c=0;c<e.length;c++){var f=o+T(u=e[c],c);s+=M(u,t,n,f,l)}else if("function"==typeof(f=function(e){return null===e||"object"!==(void 0===e?"undefined":r(e))?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=f.call(e),c=0;!(u=e.next()).done;)s+=M(u=u.value,t,n,f=o+T(u,c++),l);else if("object"===u)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function N(e,t,n){if(null==e)return e;var r=[],o=0;return M(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var L={current:null};function A(){var e=L.current;if(null===e)throw Error(h(321));return e}var I={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error(h(143));return e}},t.Component=v,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var r=o({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!E.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];r.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:r,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return A().useCallback(e,t)},t.useContext=function(e,t){return A().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return A().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return A().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return A().useLayoutEffect(e,t)},t.useMemo=function(e,t){return A().useMemo(e,t)},t.useReducer=function(e,t,n){return A().useReducer(e,t,n)},t.useRef=function(e){return A().useRef(e)},t.useState=function(e){return A().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(5)},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(0),i=n(1),a=n(6);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(l(227));var u=new Set,s={};function c(e,t){f(e,t),f(e+"Capture",t)}function f(e,t){for(s[e]=t,e=0;e<t.length;e++)u.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,m={},g={};function v(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(void 0===t?"undefined":r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function y(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var w=/[\-:]([a-z])/g;function k(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=b.hasOwnProperty(t)?b[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(v(t,n,o,r)&&(n=null),r||null===o?function(e){return!!h.call(g,e)||!h.call(m,e)&&(p.test(e)?g[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(w,k);b[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(w,k);b[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(w,k);b[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,_=60106,C=60107,T=60108,M=60114,N=60109,P=60110,L=60112,A=60113,I=60120,D=60115,O=60116,j=60121,R=60128,z=60129,U=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;S=B("react.element"),_=B("react.portal"),C=B("react.fragment"),T=B("react.strict_mode"),M=B("react.profiler"),N=B("react.provider"),P=B("react.context"),L=B("react.forward_ref"),A=B("react.suspense"),I=B("react.suspense_list"),D=B("react.memo"),O=B("react.lazy"),j=B("react.block"),B("react.scope"),R=B("react.opaque.id"),z=B("react.debug_trace_mode"),U=B("react.offscreen"),F=B("react.legacy_hidden")}var G,H="function"==typeof Symbol&&Symbol.iterator;function q(e){return null===e||"object"!==(void 0===e?"undefined":r(e))?null:"function"==typeof(e=H&&e[H]||e["@@iterator"])?e:null}function W(e){if(void 0===G)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);G=t&&t[1]||""}return"\n"+G+e}var $=!1;function V(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(e){if(e&&o&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),a=o.stack.split("\n"),l=i.length-1,u=a.length-1;1<=l&&0<=u&&i[l]!==a[u];)u--;for(;1<=l&&0<=u;l--,u--)if(i[l]!==a[u]){if(1!==l||1!==u)do{if(l--,0>--u||i[l]!==a[u])return"\n"+i[l].replace(" at new "," at ")}while(1<=l&&0<=u);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function Y(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=V(e.type,!1);case 11:return e=V(e.type.render,!1);case 22:return e=V(e.type._render,!1);case 1:return e=V(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case _:return"Portal";case M:return"Profiler";case T:return"StrictMode";case A:return"Suspense";case I:return"SuspenseList"}if("object"===(void 0===e?"undefined":r(e)))switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case N:return(e._context.displayName||"Context")+".Provider";case L:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case D:return Q(e.type);case j:return Q(e._render);case O:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function J(e){switch(void 0===e?"undefined":r(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ee(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function te(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ne(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=J(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function re(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function oe(e,t){re(e,t);var n=J(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,J(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ie(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&ee(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function le(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ue(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+J(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ce(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:J(n)}}function fe(e,t){var n=J(t.value),r=J(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function de(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var pe="http://www.w3.org/1999/xhtml",he="http://www.w3.org/2000/svg";function me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ge(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ve,ye=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==he||"innerHTML"in e)e.innerHTML=t;else{for((ve=ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var we={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ke=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||we.hasOwnProperty(e)&&we[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(we).forEach((function(e){ke.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),we[t]=we[e]}))}));var Se=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function _e(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!==r(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!==r(t.style))throw Error(l(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Me=null,Ne=null,Pe=null;function Le(e){if(e=eo(e)){if("function"!=typeof Me)throw Error(l(280));var t=e.stateNode;t&&(t=no(t),Me(e.stateNode,e.type,t))}}function Ae(e){Ne?Pe?Pe.push(e):Pe=[e]:Ne=e}function Ie(){if(Ne){var e=Ne,t=Pe;if(Pe=Ne=null,Le(e),t)for(e=0;e<t.length;e++)Le(t[e])}}function De(e,t){return e(t)}function Oe(e,t,n,r,o){return e(t,n,r,o)}function je(){}var Re=De,ze=!1,Ue=!1;function Fe(){null===Ne&&null===Pe||(je(),Ie())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var o=no(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,void 0===n?"undefined":r(n)));return n}var Ge=!1;if(d)try{var He={};Object.defineProperty(He,"passive",{get:function(){Ge=!0}}),window.addEventListener("test",He,He),window.removeEventListener("test",He,He)}catch(e){Ge=!1}function qe(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,$e=null,Ve=!1,Ye=null,Qe={onError:function(e){We=!0,$e=e}};function Je(e,t,n,r,o,i,a,l,u){We=!1,$e=null,qe.apply(Qe,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ze(e){if(Xe(e)!==e)throw Error(l(188))}function et(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ze(o),e;if(i===r)return Ze(o),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}if(!a)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function tt(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var nt,rt,ot,it,at=!1,lt=[],ut=null,st=null,ct=null,ft=new Map,dt=new Map,pt=[],ht="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function mt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function gt(e,t){switch(e){case"focusin":case"focusout":ut=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":ft.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=mt(t,n,r,o,i),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=Zr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void it(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){ot(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=en(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=eo(n))&&rt(t),e.blockedOn=n,!1;t.shift()}return!0}function wt(e,t,n){bt(e)&&n.delete(t)}function kt(){for(at=!1;0<lt.length;){var e=lt[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&nt(e);break}for(var t=e.targetContainers;0<t.length;){var n=en(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&lt.shift()}null!==ut&&bt(ut)&&(ut=null),null!==st&&bt(st)&&(st=null),null!==ct&&bt(ct)&&(ct=null),ft.forEach(wt),dt.forEach(wt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,kt)))}function Et(e){function t(t){return xt(t,e)}if(0<lt.length){xt(lt[0],e);for(var n=1;n<lt.length;n++){var r=lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ut&&xt(ut,e),null!==st&&xt(st,e),null!==ct&&xt(ct,e),ft.forEach(t),dt.forEach(t),n=0;n<pt.length;n++)(r=pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<pt.length&&null===(n=pt[0]).blockedOn;)yt(n),null===n.blockedOn&&pt.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var _t={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Ct={},Tt={};function Mt(e){if(Ct[e])return Ct[e];if(!_t[e])return e;var t,n=_t[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tt)return Ct[e]=n[t];return e}d&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete _t.animationend.animation,delete _t.animationiteration.animation,delete _t.animationstart.animation),"TransitionEvent"in window||delete _t.transitionend.transition);var Nt=Mt("animationend"),Pt=Mt("animationiteration"),Lt=Mt("animationstart"),At=Mt("transitionend"),It=new Map,Dt=new Map,Ot=["abort","abort",Nt,"animationEnd",Pt,"animationIteration",Lt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",At,"transitionEnd","waiting","waiting"];function jt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Dt.set(r,t),It.set(r,o),c(o,[r])}}(0,a.unstable_now)();var Rt=8;function zt(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!==(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!==(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!==(t=4186112&e)?(Rt=6,t):0!==(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!==(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function Ut(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=Rt=15;else if(0!==(i=134217727&n)){var u=i&~a;0!==u?(r=zt(u),o=Rt):0!==(l&=i)&&(r=zt(l),o=Rt)}else 0!==(i=n&~a)?(r=zt(i),o=Rt):0!==l&&(r=zt(l),o=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(zt(t),o<=Rt)return t;Rt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Ft(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Gt(24&~t))?Bt(10,t):e;case 10:return 0===(e=Gt(192&~t))?Bt(8,t):e;case 8:return 0===(e=Gt(3584&~t))&&(0===(e=Gt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Gt(805306368&~t))&&(t=268435456),t}throw Error(l(358,e))}function Gt(e){return e&-e}function Ht(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function qt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Vt|0)|0},$t=Math.log,Vt=Math.LN2;var Yt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Jt=!0;function Xt(e,t,n,r){ze||je();var o=Zt,i=ze;ze=!0;try{Oe(o,e,t,n,r)}finally{(ze=i)||Fe()}}function Kt(e,t,n,r){Qt(Yt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var o;if(Jt)if((o=0==(4&t))&&0<lt.length&&-1<ht.indexOf(e))e=mt(null,e,t,n,r),lt.push(e);else{var i=en(e,t,n,r);if(null===i)o&&gt(e,r);else{if(o){if(-1<ht.indexOf(e))return e=mt(i,e,t,n,r),void lt.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return ut=vt(ut,e,t,n,r,o),!0;case"dragenter":return st=vt(st,e,t,n,r,o),!0;case"mouseover":return ct=vt(ct,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ft.set(i,vt(ft.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,dt.set(i,vt(dt.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;gt(e,r)}Ar(e,t,r,null,n)}}}function en(e,t,n,r){var o=Te(r);if(null!==(o=Zr(o))){var i=Xe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ke(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var tn=null,nn=null,rn=null;function on(){if(rn)return rn;var e,t,n=nn,r=n.length,o="value"in tn?tn.value:tn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return rn=o.slice(e,1<t?1-t:void 0)}function an(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ln(){return!0}function un(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ln:un,this.isPropagationStopped=un,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ln)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ln)},persist:function(){},isPersistent:ln}),t}var cn,fn,dn,pn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},hn=sn(pn),mn=i({},pn,{view:0,detail:0}),gn=sn(mn),vn=i({},mn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==dn&&(dn&&"mousemove"===e.type?(cn=e.screenX-dn.screenX,fn=e.screenY-dn.screenY):fn=cn=0,dn=e),cn)},movementY:function(e){return"movementY"in e?e.movementY:fn}}),yn=sn(vn),bn=sn(i({},vn,{dataTransfer:0})),wn=sn(i({},mn,{relatedTarget:0})),kn=sn(i({},pn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=sn(i({},pn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),En=sn(i({},pn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_n={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Mn(){return Tn}var Nn=sn(i({},mn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=an(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?_n[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Mn,charCode:function(e){return"keypress"===e.type?an(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?an(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=sn(i({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=sn(i({},mn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Mn})),An=sn(i({},pn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=sn(i({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Dn=[9,13,27,32],On=d&&"CompositionEvent"in window,jn=null;d&&"documentMode"in document&&(jn=document.documentMode);var Rn=d&&"TextEvent"in window&&!jn,zn=d&&(!On||jn&&8<jn&&11>=jn),Un=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"===(void 0===(e=e.detail)?"undefined":r(e))&&"data"in e?e.data:null}var Hn=!1;var qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function $n(e,t,n,r){Ae(r),0<(t=Dr(t,"onChange")).length&&(n=new hn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Yn=null;function Qn(e){Cr(e,0)}function Jn(e){if(Z(to(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(d){var Zn;if(d){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}Zn=er}else Zn=!1;Kn=Zn&&(!document.documentMode||9<document.documentMode)}function nr(){Vn&&(Vn.detachEvent("onpropertychange",rr),Yn=Vn=null)}function rr(e){if("value"===e.propertyName&&Jn(Yn)){var t=[];if($n(t,Yn,e,Te(e)),e=Qn,ze)e(t);else{ze=!0;try{De(e,t)}finally{ze=!1,Fe()}}}}function or(e,t,n){"focusin"===e?(nr(),Yn=n,(Vn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Yn)}function ar(e,t){if("click"===e)return Jn(t)}function lr(e,t){if("input"===e||"change"===e)return Jn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function cr(e,t){if(ur(e,t))return!0;if("object"!==(void 0===e?"undefined":r(e))||null===e||"object"!==(void 0===t?"undefined":r(t))||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!sr.call(t,n[o])||!ur(e[n[o]],t[n[o]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dr(e,t){var n,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function pr(){for(var e=window,t=ee();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ee((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==ee(r)||("selectionStart"in(r=gr)&&hr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&cr(yr,r)||(yr=r,0<(r=Dr(vr,"onSelect")).length&&(t=new hn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(Ot,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<kr.length;xr++)Dt.set(kr[xr],0);f("onMouseEnter",["mouseout","mouseover"]),f("onMouseLeave",["mouseout","mouseover"]),f("onPointerEnter",["pointerout","pointerover"]),f("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function _r(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,a,u,s){if(Je.apply(this,arguments),We){if(!We)throw Error(l(198));var c=$e;We=!1,$e=null,Ve||(Ve=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;_r(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;_r(o,l,s),i=u}}}if(Ve)throw e=Ye,Ve=!1,Ye=null,e}function Tr(e,t){var n=ro(t),r=e+"__bubble";n.has(r)||(Lr(t,e,2,!1),n.add(r))}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Mr]||(e[Mr]=!0,u.forEach((function(t){Sr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=ro(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Lr(i,e,o,t),a.add(l))}function Lr(e,t,n,r){var o=Dt.get(t);switch(void 0===o?2:o){case 0:o=Xt;break;case 1:o=Kt;break;default:o=Zt}n=o.bind(null,t,n,e),o=void 0,!Ge||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Zr(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ue)return e(t,n);Ue=!0;try{Re(e,t,n)}finally{Ue=!1,Fe()}}((function(){var r=i,o=Te(n),a=[];e:{var l=It.get(e);if(void 0!==l){var u=hn,s=e;switch(e){case"keypress":if(0===an(n))break e;case"keydown":case"keyup":u=Nn;break;case"focusin":s="focus",u=wn;break;case"focusout":s="blur",u=wn;break;case"beforeblur":case"afterblur":u=wn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ln;break;case Nt:case Pt:case Lt:u=kn;break;case At:u=An;break;case"scroll":u=gn;break;case"wheel":u=In;break;case"copy":case"cut":case"paste":u=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=Be(h,d))&&c.push(Ir(h,m,p)))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Zr(s)&&!s[Xr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Zr(s):null)&&(s!==(f=Xe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==s?l:to(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Zr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Or(p))h++;for(p=0,m=d;m;m=Or(m))p++;for(;0<h-p;)c=Or(c),h--;for(;0<p-h;)d=Or(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Or(c),d=Or(d)}c=null}else c=null;null!==u&&jr(a,l,u,c,!1),null!==s&&null!==f&&jr(a,f,s,c,!0)}if("select"===(u=(l=r?to(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Xn;else if(Wn(l))if(Kn)g=lr;else{g=ir;var v=or}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?$n(a,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ae(l,"number",l.value)),v=r?to(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var y;if(On)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(y=on()):(nn="value"in(tn=o)?tn.value:tn.textContent,Hn=!0)),0<(v=Dr(r,b)).length&&(b=new En(b,e,null,n,o),a.push({event:b,listeners:v}),y?b.data=y:null!==(y=Gn(n))&&(b.data=y))),(y=Rn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Un);case"textInput":return(e=t.data)===Un&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!On&&Bn(e,t)?(e=on(),rn=nn=tn=null,Hn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Dr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y))}Cr(a,t)}))}function Ir(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Be(e,n))&&r.unshift(Ir(e,i,o)),null!=(i=Be(e,t))&&r.push(Ir(e,i,o))),e=e.return}return r}function Or(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Be(n,i))&&a.unshift(Ir(n,u,l)):o||null!=(u=Be(n,i))&&a.push(Ir(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Rr(){}var zr=null,Ur=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Gr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function qr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Vr=0;var Yr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Yr,Jr="__reactProps$"+Yr,Xr="__reactContainer$"+Yr,Kr="__reactEvents$"+Yr;function Zr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[Qr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function eo(e){return!(e=e[Qr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function no(e){return e[Jr]||null}function ro(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var oo=[],io=-1;function ao(e){return{current:e}}function lo(e){0>io||(e.current=oo[io],oo[io]=null,io--)}function uo(e,t){io++,oo[io]=e.current,e.current=t}var so={},co=ao(so),fo=ao(!1),po=so;function ho(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function mo(e){return null!=(e=e.childContextTypes)}function go(){lo(fo),lo(co)}function vo(e,t,n){if(co.current!==so)throw Error(l(168));uo(co,t),uo(fo,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(l(108,Q(t)||"Unknown",o));return i({},n,r)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,po=co.current,uo(co,e),uo(fo,fo.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=yo(e,t,po),r.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(co),uo(co,e)):lo(fo),uo(fo,n)}var ko=null,xo=null,Eo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,Co=a.unstable_shouldYield,To=a.unstable_requestPaint,Mo=a.unstable_now,No=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,Lo=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,Io=a.unstable_LowPriority,Do=a.unstable_IdlePriority,Oo={},jo=void 0!==To?To:function(){},Ro=null,zo=null,Uo=!1,Fo=Mo(),Bo=1e4>Fo?Mo:function(){return Mo()-Fo};function Go(){switch(No()){case Po:return 99;case Lo:return 98;case Ao:return 97;case Io:return 96;case Do:return 95;default:throw Error(l(332))}}function Ho(e){switch(e){case 99:return Po;case 98:return Lo;case 97:return Ao;case 96:return Io;case 95:return Do;default:throw Error(l(332))}}function qo(e,t){return e=Ho(e),Eo(e,t)}function Wo(e,t,n){return e=Ho(e),So(e,t,n)}function $o(){if(null!==zo){var e=zo;zo=null,_o(e)}Vo()}function Vo(){if(!Uo&&null!==Ro){Uo=!0;var e=0;try{var t=Ro;qo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ro=null}catch(t){throw null!==Ro&&(Ro=Ro.slice(e+1)),So(Po,$o),t}finally{Uo=!1}}}var Yo=E.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Jo=ao(null),Xo=null,Ko=null,Zo=null;function ei(){Zo=Ko=Xo=null}function ti(e){var t=Jo.current;lo(Jo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ri(e,t){Xo=e,Zo=Ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Da=!0),e.firstContext=null)}function oi(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ko){if(null===Xo)throw Error(l(308));Ko=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Ko=Ko.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fi(e,t,n,r){var o=e.updateQueue;ii=!1;var a=o.firstBaseUpdate,l=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=o.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=i({},d,u);break e;case 2:ii=!0}}null!==a.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=o.shared.pending))break;a=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(s=d),o.baseState=s,o.firstBaseUpdate=c,o.lastBaseUpdate=f,jl|=l,e.lanes=l,e.memoizedState=d}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(l(191,o));o.call(r)}}}var pi=(new o.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mi={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=lu(),o=uu(e),i=ui(r,o);i.payload=t,null!=n&&(i.callback=n),si(e,i),su(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=lu(),o=uu(e),i=ui(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),si(e,i),su(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=lu(),r=uu(e),o=ui(n,r);o.tag=2,null!=t&&(o.callback=t),si(e,o),su(e,r,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!cr(n,r)||!cr(o,i))}function vi(e,t,n){var o=!1,i=so,a=t.contextType;return"object"===(void 0===a?"undefined":r(a))&&null!==a?a=oi(a):(i=mo(t)?po:co.current,a=(o=null!=(o=t.contextTypes))?ho(e,i):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mi,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mi.enqueueReplaceState(t,t.state,null)}function bi(e,t,n,o){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=pi,ai(e);var a=t.contextType;"object"===(void 0===a?"undefined":r(a))&&null!==a?i.context=oi(a):(a=mo(t)?po:co.current,i.context=ho(e,a)),fi(e,n,i,o),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(hi(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&mi.enqueueReplaceState(i,i.state,null),fi(e,n,i,o),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var wi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==(void 0===e?"undefined":r(e))){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var o=n.stateNode}if(!o)throw Error(l(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs;t===pi&&(t=o.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function xi(e,t){if("textarea"!==e.type)throw Error(l(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Gu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$u(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"===(void 0===t?"undefined":r(t))&&null!==t){switch(t.$$typeof){case S:return(n=Gu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case _:return(t=$u(t,e.mode,n)).return=e,t}if(wi(t)||q(t))return(t=Hu(t,e.mode,n,null)).return=e,t;xi(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,o);if("object"===(void 0===n?"undefined":r(n))&&null!==n){switch(n.$$typeof){case S:return n.key===i?n.type===C?d(e,t,n.props.children,o,i):c(e,t,n,o):null;case _:return n.key===i?f(e,t,n,o):null}if(wi(n)||q(n))return null!==i?null:d(e,t,n,o,null);xi(e,n)}return null}function m(e,t,n,o,i){if("string"==typeof o||"number"==typeof o)return s(t,e=e.get(n)||null,""+o,i);if("object"===(void 0===o?"undefined":r(o))&&null!==o){switch(o.$$typeof){case S:return e=e.get(null===o.key?n:o.key)||null,o.type===C?d(t,e,o.props.children,i,o.key):c(t,e,o,i);case _:return f(t,e=e.get(null===o.key?n:o.key)||null,o,i)}if(wi(o)||q(o))return d(t,e=e.get(n)||null,o,i,null);xi(t,o)}return null}function g(r,i,l,u){for(var s=null,c=null,f=i,d=i=0,g=null;null!==f&&d<l.length;d++){f.index>d?(g=f,f=null):g=f.sibling;var v=h(r,f,l[d],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(r,f),i=a(v,i,d),null===c?s=v:c.sibling=v,c=v,f=g}if(d===l.length)return n(r,f),s;if(null===f){for(;d<l.length;d++)null!==(f=p(r,l[d],u))&&(i=a(f,i,d),null===c?s=f:c.sibling=f,c=f);return s}for(f=o(r,f);d<l.length;d++)null!==(g=m(f,r,d,l[d],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?d:g.key),i=a(g,i,d),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(r,e)})),s}function v(r,i,u,s){var c=q(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,d=i,g=i=0,v=null,y=u.next();null!==d&&!y.done;g++,y=u.next()){d.index>g?(v=d,d=null):v=d.sibling;var b=h(r,d,y.value,s);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(r,d),i=a(b,i,g),null===f?c=b:f.sibling=b,f=b,d=v}if(y.done)return n(r,d),c;if(null===d){for(;!y.done;g++,y=u.next())null!==(y=p(r,y.value,s))&&(i=a(y,i,g),null===f?c=y:f.sibling=y,f=y);return c}for(d=o(r,d);!y.done;g++,y=u.next())null!==(y=m(d,r,g,y.value,s))&&(e&&null!==y.alternate&&d.delete(null===y.key?g:y.key),i=a(y,i,g),null===f?c=y:f.sibling=y,f=y);return e&&d.forEach((function(e){return t(r,e)})),c}return function(e,o,a,s){var c="object"===(void 0===a?"undefined":r(a))&&null!==a&&a.type===C&&null===a.key;c&&(a=a.props.children);var f="object"===(void 0===a?"undefined":r(a))&&null!==a;if(f)switch(a.$$typeof){case S:e:{for(f=a.key,c=o;null!==c;){if(c.key===f){switch(c.tag){case 7:if(a.type===C){n(e,c.sibling),(o=i(c,a.props.children)).return=e,e=o;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(o=i(c,a.props)).ref=ki(e,c,a),o.return=e,e=o;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===C?((o=Hu(a.props.children,e.mode,s,a.key)).return=e,e=o):((s=Gu(a.type,a.key,a.props,null,e.mode,s)).ref=ki(e,o,a),s.return=e,e=s)}return u(e);case _:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),(o=i(o,a.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=$u(a,e.mode,s)).return=e,e=o}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),(o=i(o,a)).return=e,e=o):(n(e,o),(o=Wu(a,e.mode,s)).return=e,e=o),u(e);if(wi(a))return g(e,o,a,s);if(q(a))return v(e,o,a,s);if(f&&xi(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(l(152,Q(e.type)||"Component"))}return n(e,o)}}var Si=Ei(!0),_i=Ei(!1),Ci={},Ti=ao(Ci),Mi=ao(Ci),Ni=ao(Ci);function Pi(e){if(e===Ci)throw Error(l(174));return e}function Li(e,t){switch(uo(Ni,t),uo(Mi,e),uo(Ti,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ge(null,"");break;default:t=ge(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ti),uo(Ti,t)}function Ai(){lo(Ti),lo(Mi),lo(Ni)}function Ii(e){Pi(Ni.current);var t=Pi(Ti.current),n=ge(t,e.type);t!==n&&(uo(Mi,e),uo(Ti,n))}function Di(e){Mi.current===e&&(lo(Ti),lo(Mi))}var Oi=ao(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ri=null,zi=null,Ui=!1;function Fi(e,t){var n=Uu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Gi(e){if(Ui){var t=zi;if(t){var n=t;if(!Bi(e,t)){if(!(t=Wr(n.nextSibling))||!Bi(e,t))return e.flags=-1025&e.flags|2,Ui=!1,void(Ri=e);Fi(Ri,n)}Ri=e,zi=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Ui=!1,Ri=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ri=e}function qi(e){if(e!==Ri)return!1;if(!Ui)return Hi(e),Ui=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=zi;t;)Fi(e,t),t=Wr(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zi=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zi=null}}else zi=Ri?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){zi=Ri=null,Ui=!1}var $i=[];function Vi(){for(var e=0;e<$i.length;e++)$i[e]._workInProgressVersionPrimary=null;$i.length=0}var Yi=E.ReactCurrentDispatcher,Qi=E.ReactCurrentBatchConfig,Ji=0,Xi=null,Ki=null,Zi=null,ea=!1,ta=!1;function na(){throw Error(l(321))}function ra(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function oa(e,t,n,r,o,i){if(Ji=i,Xi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Yi.current=null===e||null===e.memoizedState?Pa:La,e=n(r,o),ta){i=0;do{if(ta=!1,!(25>i))throw Error(l(301));i+=1,Zi=Ki=null,t.updateQueue=null,Yi.current=Aa,e=n(r,o)}while(ta)}if(Yi.current=Na,t=null!==Ki&&null!==Ki.next,Ji=0,Zi=Ki=Xi=null,ea=!1,t)throw Error(l(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zi?Xi.memoizedState=Zi=e:Zi=Zi.next=e,Zi}function aa(){if(null===Ki){var e=Xi.alternate;e=null!==e?e.memoizedState:null}else e=Ki.next;var t=null===Zi?Xi.memoizedState:Zi.next;if(null!==t)Zi=t,Ki=e;else{if(null===e)throw Error(l(310));e={memoizedState:(Ki=e).memoizedState,baseState:Ki.baseState,baseQueue:Ki.baseQueue,queue:Ki.queue,next:null},null===Zi?Xi.memoizedState=Zi=e:Zi=Zi.next=e}return Zi}function la(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=aa(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=Ki,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=a=i=null,s=o;do{var c=s.lane;if((Ji&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(a=u=f,i=r):u=u.next=f,Xi.lanes|=c,jl|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=a,ur(r,t.memoizedState)||(Da=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function sa(e){var t=aa(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var a=o=o.next;do{i=e(i,a.action),a=a.next}while(a!==o);ur(i,t.memoizedState)||(Da=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ji&e)===e)&&(t._workInProgressVersionPrimary=r,$i.push(t))),e)return n(t._source);throw $i.push(t),Error(l(350))}function fa(e,t,n,r){var o=Ml;if(null===o)throw Error(l(349));var i=t._getVersion,a=i(t._source),u=Yi.current,s=u.useState((function(){return ca(o,t,n)})),c=s[1],f=s[0];s=Zi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var g=Xi;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ur(a,e)){e=n(t._source),ur(f,e)||(c(e),e=uu(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,l=e;0<l;){var u=31-Wt(l),s=1<<u;r[u]|=e,l&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=uu(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:f}).dispatch=c=Ma.bind(null,Xi,e),s.queue=e,s.baseQueue=null,f=ca(o,t,n),s.memoizedState=s.baseState=f),f}function da(e,t,n){return fa(aa(),e,t,n)}function pa(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Ma.bind(null,Xi,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xi.updateQueue)?(t={lastEffect:null},Xi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ma(e){return e={current:e},ia().memoizedState=e}function ga(){return aa().memoizedState}function va(e,t,n,r){var o=ia();Xi.flags|=e,o.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function ya(e,t,n,r){var o=aa();r=void 0===r?null:r;var i=void 0;if(null!==Ki){var a=Ki.memoizedState;if(i=a.destroy,null!==r&&ra(r,a.deps))return void ha(t,n,i,r)}Xi.flags|=e,o.memoizedState=ha(1|t,n,i,r)}function ba(e,t){return va(516,4,e,t)}function wa(e,t){return ya(516,4,e,t)}function ka(e,t){return ya(4,2,e,t)}function xa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,xa.bind(null,t,e),n)}function Sa(){}function _a(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=Go();qo(98>n?98:n,(function(){e(!0)})),qo(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Ma(e,t,n){var r=lu(),o=uu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Xi||null!==a&&a===Xi)ta=ea=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,ur(u,l))return}catch(e){}su(e,o,r)}}var Na={readContext:oi,useCallback:na,useContext:na,useEffect:na,useImperativeHandle:na,useLayoutEffect:na,useMemo:na,useReducer:na,useRef:na,useState:na,useDebugValue:na,useDeferredValue:na,useTransition:na,useMutableSource:na,useOpaqueIdentifier:na,unstable_isNewReconciler:!1},Pa={readContext:oi,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:oi,useEffect:ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return va(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ma.bind(null,Xi,e),[r.memoizedState,e]},useRef:ma,useState:pa,useDebugValue:Sa,useDeferredValue:function(e){var t=pa(e),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=pa(!1),t=e[0];return ma(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fa(r,e,t,n)},useOpaqueIdentifier:function(){if(Ui){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Vr++).toString(36))),Error(l(355))})),n=pa(t)[1];return 0==(2&Xi.mode)&&(Xi.flags|=516,ha(5,(function(){n("r:"+(Vr++).toString(36))}),void 0,null)),t}return pa(t="r:"+(Vr++).toString(36)),t},unstable_isNewReconciler:!1},La={readContext:oi,useCallback:_a,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ca,useReducer:ua,useRef:ga,useState:function(){return ua(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(la),n=t[0],r=t[1];return wa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(la)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},Aa={readContext:oi,useCallback:_a,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ca,useReducer:sa,useRef:ga,useState:function(){return sa(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=sa(la),n=t[0],r=t[1];return wa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=sa(la)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return sa(la)[0]},unstable_isNewReconciler:!1},Ia=E.ReactCurrentOwner,Da=!1;function Oa(e,t,n,r){t.child=null===e?_i(t,null,n,r):Si(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=oa(e,t,n,r,i,o),null===e||Da?(t.flags|=1,Oa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ra(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Fu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Gu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:cr)(o,r)&&e.ref===t.ref)?nl(e,t,i):(t.flags|=1,(e=Bu(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,o,i){if(null!==e&&cr(e.memoizedProps,r)&&e.ref===t.ref){if(Da=!1,0==(i&o))return t.lanes=e.lanes,nl(e,t,i);0!=(16384&e.flags)&&(Da=!0)}return Ba(e,t,n,r,i)}function Ua(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(t,e),null;t.memoizedState={baseLanes:0},vu(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,vu(t,r);return Oa(e,t,o,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ba(e,t,n,r,o){var i=mo(n)?po:co.current;return i=ho(t,i),ri(t,o),n=oa(e,t,n,r,i,o),null===e||Da?(t.flags|=1,Oa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ga(e,t,n,o,i){if(mo(n)){var a=!0;bo(t)}else a=!1;if(ri(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vi(t,n,o),bi(t,n,o,i),o=!0;else if(null===e){var l=t.stateNode,u=t.memoizedProps;l.props=u;var s=l.context,c=n.contextType;"object"===(void 0===c?"undefined":r(c))&&null!==c?c=oi(c):c=ho(t,c=mo(n)?po:co.current);var f=n.getDerivedStateFromProps,d="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==o||s!==c)&&yi(t,l,o,c),ii=!1;var p=t.memoizedState;l.state=p,fi(t,o,l,i),s=t.memoizedState,u!==o||p!==s||fo.current||ii?("function"==typeof f&&(hi(t,n,f,o),s=t.memoizedState),(u=ii||gi(t,n,u,o,p,s,c))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4)):("function"==typeof l.componentDidMount&&(t.flags|=4),t.memoizedProps=o,t.memoizedState=s),l.props=o,l.state=s,l.context=c,o=u):("function"==typeof l.componentDidMount&&(t.flags|=4),o=!1)}else{l=t.stateNode,li(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Qo(t.type,u),l.props=c,d=t.pendingProps,p=l.context,"object"===(void 0===(s=n.contextType)?"undefined":r(s))&&null!==s?s=oi(s):s=ho(t,s=mo(n)?po:co.current);var h=n.getDerivedStateFromProps;(f="function"==typeof h||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==d||p!==s)&&yi(t,l,o,s),ii=!1,p=t.memoizedState,l.state=p,fi(t,o,l,i);var m=t.memoizedState;u!==d||p!==m||fo.current||ii?("function"==typeof h&&(hi(t,n,h,o),m=t.memoizedState),(c=ii||gi(t,n,c,o,p,m,s))?(f||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(o,m,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(o,m,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=o,t.memoizedState=m),l.props=o,l.state=m,l.context=s,o=c):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),o=!1)}return Ha(e,t,n,o,a,i)}function Ha(e,t,n,r,o,i){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&wo(t,n,!1),nl(e,t,i);r=t.stateNode,Ia.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):Oa(e,t,l,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function qa(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),Li(e,t.containerInfo)}var Wa,$a,Va,Ya={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Oi.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),uo(Oi,1&i),null===e?(void 0!==o.fallback&&Gi(t),e=o.children,i=o.fallback,a?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,t.lanes=33554432,e):((n=qu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Ka(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ya,o):(n=Xa(e,t,o.children,n),t.memoizedState=null,n))}function Ja(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=qu(t,o,0,null),n=Hu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xa(e,t,n,r){var o=e.child;return e=o.sibling,n=Bu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Ka(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bu(a,l),null!==e?r=Bu(e,r):(r=Hu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Za(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ni(e.return,t)}function el(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Oa(e,t,r.children,n),0!=(2&(r=Oi.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Za(e,n);else if(19===e.tag)Za(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Oi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,i,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ui)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mo(t.type)&&go(),null;case 3:return Ai(),lo(fo),lo(co),Vi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(qi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Di(t);var o=Pi(Ni.current);if(n=t.type,null!==e&&null!=t.stateNode)$a(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(l(166));return null}if(e=Pi(Ti.current),qi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[Qr]=t,r[Jr]=a,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Tr(Er[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ne(r,a),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Tr("invalid",r);break;case"textarea":ce(r,a),Tr("invalid",r)}for(var u in _e(n,a),e=null,a)a.hasOwnProperty(u)&&(o=a[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):s.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Tr("scroll",r));switch(n){case"input":K(r),ie(r,a,!0);break;case"textarea":K(r),de(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Rr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===pe&&(e=me(n)),e===pe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Qr]=t,e[Jr]=r,Wa(e,t),t.stateNode=e,u=Ce(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),o=r;break;case"iframe":case"object":case"embed":Tr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Er.length;o++)Tr(Er[o],e);o=r;break;case"source":Tr("error",e),o=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),o=r;break;case"details":Tr("toggle",e),o=r;break;case"input":ne(e,r),o=te(e,r),Tr("invalid",e);break;case"option":o=le(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":ce(e,r),o=se(e,r),Tr("invalid",e);break;default:o=r}_e(n,o);var c=o;for(a in c)if(c.hasOwnProperty(a)){var f=c[a];"style"===a?Ee(e,f):"dangerouslySetInnerHTML"===a?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===a?"string"==typeof f?("textarea"!==n||""!==f)&&be(e,f):"number"==typeof f&&be(e,""+f):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=f&&"onScroll"===a&&Tr("scroll",e):null!=f&&x(e,a,f,u))}switch(n){case"input":K(e),ie(e,r,!1);break;case"textarea":K(e),de(e);break;case"option":null!=r.value&&e.setAttribute("value",""+J(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ue(e,!!r.multiple,a,!1):null!=r.defaultValue&&ue(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Rr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Va(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));n=Pi(Ni.current),Pi(Ti.current),qi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return lo(Oi),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&qi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Oi.current)?0===Il&&(Il=3):(0!==Il&&3!==Il||(Il=4),null===Ml||0==(134217727&jl)&&0==(134217727&Rl)||pu(Ml,Pl))),(r||n)&&(t.flags|=4),null);case 4:return Ai(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ti(t),null;case 17:return mo(t.type)&&go(),null;case 19:if(lo(Oi),null===(r=t.memoizedState))return null;if(a=0!=(64&t.flags),null===(u=r.rendering))if(a)rl(r,!1);else{if(0!==Il||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=ji(e))){for(t.flags|=64,rl(r,!1),null!==(a=u.updateQueue)&&(t.updateQueue=a,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Oi,1&Oi.current|2),t.child}e=e.sibling}null!==r.tail&&Bo()>Bl&&(t.flags|=64,a=!0,rl(r,!1),t.lanes=33554432)}else{if(!a)if(null!==(e=ji(u))){if(t.flags|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ui)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Bo()-r.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=64,a=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Bo(),n.sibling=null,t=Oi.current,uo(Oi,a?1&t|2:1&t),n):null;case 23:case 24:return yu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(l(156,t.tag))}function il(e){switch(e.tag){case 1:mo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ai(),lo(fo),lo(co),Vi(),0!=(64&(t=e.flags)))throw Error(l(285));return e.flags=-4097&t|64,e;case 5:return Di(e),null;case 13:return lo(Oi),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(Oi),null;case 4:return Ai(),null;case 10:return ti(e),null;case 23:case 24:return yu(),null;default:return null}}function al(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,o){var a=e.memoizedProps;if(a!==o){e=t.stateNode,Pi(Ti.current);var l,u=null;switch(n){case"input":a=te(e,a),o=te(e,o),u=[];break;case"option":a=le(e,a),o=le(e,o),u=[];break;case"select":a=i({},a,{value:void 0}),o=i({},o,{value:void 0}),u=[];break;case"textarea":a=se(e,a),o=se(e,o),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof o.onClick&&(e.onclick=Rr)}for(d in _e(n,o),n=null,a)if(!o.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var c=a[d];for(l in c)c.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?u||(u=[]):(u=u||[]).push(d,null));for(d in o){var f=o[d];if(c=null!=a?a[d]:void 0,o.hasOwnProperty(d)&&f!==c&&(null!=f||null!=c))if("style"===d)if(c){for(l in c)!c.hasOwnProperty(l)||f&&f.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in f)f.hasOwnProperty(l)&&c[l]!==f[l]&&(n||(n={}),n[l]=f[l])}else n||(u||(u=[]),u.push(d,n)),n=f;else"dangerouslySetInnerHTML"===d?(f=f?f.__html:void 0,c=c?c.__html:void 0,null!=f&&c!==f&&(u=u||[]).push(d,f)):"children"===d?"string"!=typeof f&&"number"!=typeof f||(u=u||[]).push(d,""+f):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=f&&"onScroll"===d&&Tr("scroll",e),u||c===f||(u=[])):"object"===(void 0===f?"undefined":r(f))&&null!==f&&f.$$typeof===R?f.toString():(u=u||[]).push(d,f))}n&&(u=u||[]).push("style",n);var d=u;(t.updateQueue=d)&&(t.flags|=4)}},Va=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,$l=r),ll(0,t)},n}function cl(e,t,n){(n=ui(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ou(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&qr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(l(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Au(n,e),Lu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(l(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gl(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Au(t,n);else{r=t;try{o()}catch(e){Ou(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ou(t,e)}break;case 5:dl(t);break;case 4:wl(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(l(161))}16&n.flags&&(be(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=Rr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function wl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(l(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var a=e,u=o,s=u;;)if(gl(a,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(a=n,u=o.stateNode,8===a.nodeType?a.parentNode.removeChild(u):a.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&re(n,r),Ce(e,o),t=Ce(e,r),o=0;o<i.length;o+=2){var a=i[o],u=i[o+1];"style"===a?Ee(n,u):"dangerouslySetInnerHTML"===a?ye(n,u):"children"===a?be(n,u):x(n,a,u,t)}switch(e){case"input":oe(n,r);break;case"textarea":fe(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ue(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ue(n,!!r.multiple,r.defaultValue,!0):ue(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=Bo(),ml(t.child,!0)),void xl(t);case 19:return void xl(t);case 17:return;case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(l(163))}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Ru.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function El(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Sl=Math.ceil,_l=E.ReactCurrentDispatcher,Cl=E.ReactCurrentOwner,Tl=0,Ml=null,Nl=null,Pl=0,Ll=0,Al=ao(0),Il=0,Dl=null,Ol=0,jl=0,Rl=0,zl=0,Ul=null,Fl=0,Bl=1/0;function Gl(){Bl=Bo()+500}var Hl,ql=null,Wl=!1,$l=null,Vl=null,Yl=!1,Ql=null,Jl=90,Xl=[],Kl=[],Zl=null,eu=0,tu=null,nu=-1,ru=0,ou=0,iu=null,au=!1;function lu(){return 0!=(48&Tl)?Bo():-1!==nu?nu:nu=Bo()}function uu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Go()?1:2;if(0===ru&&(ru=Ol),0!==Yo.transition){0!==ou&&(ou=null!==Ul?Ul.pendingLanes:0),e=ru;var t=4186112&~ou;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Go(),0!=(4&Tl)&&98===e?e=Bt(12,ru):e=Bt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ru),e}function su(e,t,n){if(50<eu)throw eu=0,tu=null,Error(l(185));if(null===(e=cu(e,t)))return null;qt(e,t,n),e===Ml&&(Rl|=t,4===Il&&pu(e,Pl));var r=Go();1===t?0!=(8&Tl)&&0==(48&Tl)?hu(e):(fu(e,n),0===Tl&&(Gl(),$o())):(0==(4&Tl)||98!==r&&99!==r||(null===Zl?Zl=new Set([e]):Zl.add(e)),fu(e,n)),Ul=e}function cu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,a=e.pendingLanes;0<a;){var u=31-Wt(a),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,zt(s);var f=Rt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);a&=~s}if(r=Ut(e,e===Ml?Pl:0),t=Rt,0===r)null!==n&&(n!==Oo&&_o(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Oo&&_o(n)}15===t?(n=hu.bind(null,e),null===Ro?(Ro=[n],zo=So(Po,Vo)):Ro.push(n),n=Oo):14===t?n=Wo(99,hu.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(l(358,e))}}(t),du.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function du(e){if(nu=-1,ou=ru=0,0!=(48&Tl))throw Error(l(327));var t=e.callbackNode;if(Pu()&&e.callbackNode!==t)return null;var n=Ut(e,e===Ml?Pl:0);if(0===n)return null;var r=n,o=Tl;Tl|=16;var i=ku();for(Ml===e&&Pl===r||(Gl(),bu(e,r));;)try{Su();break}catch(t){wu(e,t)}if(ei(),_l.current=i,Tl=o,null!==Nl?r=0:(Ml=null,Pl=0,r=Il),0!=(Ol&Rl))bu(e,0);else if(0!==r){if(2===r&&(Tl|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(n=Ft(e))&&(r=xu(e,n))),1===r)throw t=Dl,bu(e,0),pu(e,n),fu(e,Bo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(l(345));case 2:Tu(e);break;case 3:if(pu(e,n),(62914560&n)===n&&10<(r=Fl+500-Bo())){if(0!==Ut(e,0))break;if(((o=e.suspendedLanes)&n)!==n){lu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Gr(Tu.bind(null,e),r);break}Tu(e);break;case 4:if(pu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var a=31-Wt(n);i=1<<a,(a=r[a])>o&&(o=a),n&=~i}if(n=o,10<(n=(120>(n=Bo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Gr(Tu.bind(null,e),n);break}Tu(e);break;case 5:Tu(e);break;default:throw Error(l(329))}}return fu(e,Bo()),e.callbackNode===t?du.bind(null,e):null}function pu(e,t){for(t&=~zl,t&=~Rl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function hu(e){if(0!=(48&Tl))throw Error(l(327));if(Pu(),e===Ml&&0!=(e.expiredLanes&Pl)){var t=Pl,n=xu(e,t);0!=(Ol&Rl)&&(n=xu(e,t=Ut(e,t)))}else n=xu(e,t=Ut(e,0));if(0!==e.tag&&2===n&&(Tl|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(t=Ft(e))&&(n=xu(e,t))),1===n)throw n=Dl,bu(e,0),pu(e,t),fu(e,Bo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tu(e),fu(e,Bo()),null}function mu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Gl(),$o())}}function gu(e,t){var n=Tl;Tl&=-2,Tl|=8;try{return e(t)}finally{0===(Tl=n)&&(Gl(),$o())}}function vu(e,t){uo(Al,Ll),Ll|=t,Ol|=t}function yu(){Ll=Al.current,lo(Al)}function bu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ai(),lo(fo),lo(co),Vi();break;case 5:Di(r);break;case 4:Ai();break;case 13:case 19:lo(Oi);break;case 10:ti(r);break;case 23:case 24:yu()}n=n.return}Ml=e,Nl=Bu(e.current,null),Pl=Ll=Ol=t,Il=0,Dl=null,zl=Rl=jl=0}function wu(e,t){for(;;){var n=Nl;try{if(ei(),Yi.current=Na,ea){for(var o=Xi.memoizedState;null!==o;){var i=o.queue;null!==i&&(i.pending=null),o=o.next}ea=!1}if(Ji=0,Zi=Ki=Xi=null,ta=!1,Cl.current=null,null===n||null===n.return){Il=1,Dl=t,Nl=null;break}e:{var a=e,l=n.return,u=n,s=t;if(t=Pl,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==s&&"object"===(void 0===s?"undefined":r(s))&&"function"==typeof s.then){var c=s;if(0==(2&u.mode)){var f=u.alternate;f?(u.updateQueue=f.updateQueue,u.memoizedState=f.memoizedState,u.lanes=f.lanes):(u.updateQueue=null,u.memoizedState=null)}var d=0!=(1&Oi.current),p=l;do{var h;if(h=13===p.tag){var m=p.memoizedState;if(null!==m)h=null!==m.dehydrated;else{var g=p.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var v=p.updateQueue;if(null===v){var y=new Set;y.add(c),p.updateQueue=y}else v.add(c);if(0==(2&p.mode)){if(p.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var b=ui(-1,1);b.tag=2,si(u,b)}u.lanes|=1;break e}s=void 0,u=t;var w=a.pingCache;if(null===w?(w=a.pingCache=new ul,s=new Set,w.set(c,s)):void 0===(s=w.get(c))&&(s=new Set,w.set(c,s)),!s.has(u)){s.add(u);var k=ju.bind(null,a,c,u);c.then(k,k)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);s=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Il&&(Il=2),s=al(s,u),p=l;do{switch(p.tag){case 3:a=s,p.flags|=4096,t&=-t,p.lanes|=t,ci(p,sl(0,a,t));break e;case 1:a=s;var x=p.type,E=p.stateNode;if(0==(64&p.flags)&&("function"==typeof x.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Vl||!Vl.has(E)))){p.flags|=4096,t&=-t,p.lanes|=t,ci(p,cl(p,a,t));break e}}p=p.return}while(null!==p)}Cu(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function ku(){var e=_l.current;return _l.current=Na,null===e?Na:e}function xu(e,t){var n=Tl;Tl|=16;var r=ku();for(Ml===e&&Pl===t||bu(e,t);;)try{Eu();break}catch(t){wu(e,t)}if(ei(),Tl=n,_l.current=r,null!==Nl)throw Error(l(261));return Ml=null,Pl=0,Il}function Eu(){for(;null!==Nl;)_u(Nl)}function Su(){for(;null!==Nl&&!Co();)_u(Nl)}function _u(e){var t=Hl(e.alternate,e,Ll);e.memoizedProps=e.pendingProps,null===t?Cu(e):Nl=t,Cl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Ll)))return void(Nl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ll)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=il(t)))return n.flags&=2047,void(Nl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Il&&(Il=5)}function Tu(e){var t=Go();return qo(99,Mu.bind(null,e,t)),null}function Mu(e,t){do{Pu()}while(null!==Ql);if(0!=(48&Tl))throw Error(l(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var a=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-Wt(i),c=1<<s;o[s]=0,a[s]=-1,u[s]=-1,i&=~c}if(null!==Zl&&0==(24&r)&&Zl.has(e)&&Zl.delete(e),e===Ml&&(Nl=Ml=null,Pl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Tl,Tl|=32,Cl.current=null,zr=Jt,hr(a=pr())){if("selectionStart"in a)u={start:a.selectionStart,end:a.selectionEnd};else e:if(u=(u=a.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,g=a,v=null;t:for(;;){for(var y;g!==u||0!==i&&3!==g.nodeType||(d=f+i),g!==s||0!==c&&3!==g.nodeType||(p=f+c),3===g.nodeType&&(f+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===a)break t;if(v===u&&++h===i&&(d=f),v===s&&++m===c&&(p=f),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Ur={focusedElem:a,selectionRange:u},Jt=!1,iu=null,au=!1,ql=r;do{try{Nu()}catch(e){if(null===ql)throw Error(l(330));Ou(ql,e),ql=ql.nextEffect}}while(null!==ql);iu=null,ql=r;do{try{for(a=e;null!==ql;){var b=ql.flags;if(16&b&&be(ql.stateNode,""),128&b){var w=ql.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl(ql),ql.flags&=-3;break;case 6:bl(ql),ql.flags&=-3,kl(ql.alternate,ql);break;case 1024:ql.flags&=-1025;break;case 1028:ql.flags&=-1025,kl(ql.alternate,ql);break;case 4:kl(ql.alternate,ql);break;case 8:wl(a,u=ql);var x=u.alternate;vl(u),null!==x&&vl(x)}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(l(330));Ou(ql,e),ql=ql.nextEffect}}while(null!==ql);if(k=Ur,w=pr(),b=k.focusedElem,a=k.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==a&&hr(b)&&(w=a.start,void 0===(k=a.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,x=Math.min(a.start,u),a=void 0===a.end?x:Math.min(a.end,u),!k.extend&&x>a&&(u=a,a=x,x=u),u=dr(b,x),i=dr(b,a),u&&i&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==i.node||k.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),x>a?(k.addRange(w),k.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Jt=!!zr,Ur=zr=null,e.current=n,ql=r;do{try{for(b=e;null!==ql;){var E=ql.flags;if(36&E&&hl(b,ql.alternate,ql),128&E){w=void 0;var S=ql.ref;if(null!==S){var _=ql.stateNode;switch(ql.tag){case 5:w=_;break;default:w=_}"function"==typeof S?S(w):S.current=w}}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(l(330));Ou(ql,e),ql=ql.nextEffect}}while(null!==ql);ql=null,jo(),Tl=o}else e.current=n;if(Yl)Yl=!1,Ql=e,Jl=t;else for(ql=r;null!==ql;)t=ql.nextEffect,ql.nextEffect=null,8&ql.flags&&((E=ql).sibling=null,E.stateNode=null),ql=t;if(0===(r=e.pendingLanes)&&(Vl=null),1===r?e===tu?eu++:(eu=0,tu=e):eu=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(fu(e,Bo()),Wl)throw Wl=!1,e=$l,$l=null,e;return 0!=(8&Tl)||$o(),null}function Nu(){for(;null!==ql;){var e=ql.alternate;au||null===iu||(0!=(8&ql.flags)?tt(ql,iu)&&(au=!0):13===ql.tag&&El(e,ql)&&tt(ql,iu)&&(au=!0));var t=ql.flags;0!=(256&t)&&pl(e,ql),0==(512&t)||Yl||(Yl=!0,Wo(97,(function(){return Pu(),null}))),ql=ql.nextEffect}}function Pu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,qo(e,Iu)}return!1}function Lu(e,t){Xl.push(t,e),Yl||(Yl=!0,Wo(97,(function(){return Pu(),null})))}function Au(e,t){Kl.push(t,e),Yl||(Yl=!0,Wo(97,(function(){return Pu(),null})))}function Iu(){if(null===Ql)return!1;var e=Ql;if(Ql=null,0!=(48&Tl))throw Error(l(331));var t=Tl;Tl|=32;var n=Kl;Kl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],a=o.destroy;if(o.destroy=void 0,"function"==typeof a)try{a()}catch(e){if(null===i)throw Error(l(330));Ou(i,e)}}for(n=Xl,Xl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(l(330));Ou(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Tl=t,$o(),!0}function Du(e,t,n){si(e,t=sl(0,t=al(n,t),1)),t=lu(),null!==(e=cu(e,1))&&(qt(e,1,t),fu(e,t))}function Ou(e,t){if(3===e.tag)Du(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Du(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){var o=cl(n,e=al(t,e),1);if(si(n,o),o=lu(),null!==(n=cu(n,1)))qt(n,1,o),fu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function ju(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=lu(),e.pingedLanes|=e.suspendedLanes&n,Ml===e&&(Pl&n)===n&&(4===Il||3===Il&&(62914560&Pl)===Pl&&500>Bo()-Fl?bu(e,0):zl|=n),fu(e,t)}function Ru(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Go()?1:2:(0===ru&&(ru=Ol),0===(t=Gt(62914560&~ru))&&(t=4194304))),n=lu(),null!==(e=cu(e,t))&&(qt(e,t,n),fu(e,n))}function zu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Uu(e,t,n,r){return new zu(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Uu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Gu(e,t,n,o,i,a){var u=2;if(o=e,"function"==typeof e)Fu(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case C:return Hu(n.children,i,a,t);case z:u=8,i|=16;break;case T:u=8,i|=1;break;case M:return(e=Uu(12,n,t,8|i)).elementType=M,e.type=M,e.lanes=a,e;case A:return(e=Uu(13,n,t,i)).type=A,e.elementType=A,e.lanes=a,e;case I:return(e=Uu(19,n,t,i)).elementType=I,e.lanes=a,e;case U:return qu(n,i,a,t);case F:return(e=Uu(24,n,t,i)).elementType=F,e.lanes=a,e;default:if("object"===(void 0===e?"undefined":r(e))&&null!==e)switch(e.$$typeof){case N:u=10;break e;case P:u=9;break e;case L:u=11;break e;case D:u=14;break e;case O:u=16,o=null;break e;case j:u=22;break e}throw Error(l(130,null==e?e:void 0===e?"undefined":r(e),""))}return(t=Uu(u,n,t,i)).elementType=e,t.type=o,t.lanes=a,t}function Hu(e,t,n,r){return(e=Uu(7,e,r,t)).lanes=n,e}function qu(e,t,n,r){return(e=Uu(23,e,r,t)).elementType=U,e.lanes=n,e}function Wu(e,t,n){return(e=Uu(6,e,null,t)).lanes=n,e}function $u(e,t,n){return(t=Uu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ht(0),this.expirationTimes=Ht(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ht(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:_,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qu(e,t,n,r){var o=t.current,i=lu(),a=uu(o);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(l(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(mo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(l(171))}if(1===n.tag){var s=n.type;if(mo(s)){n=yo(n,s,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),su(o,a,i),a}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Xu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Xu(e,t),(e=e.alternate)&&Xu(e,t)}function Zu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Vu(e,t,null!=n&&!0===n.hydrate),t=Uu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ai(t),e[Xr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function es(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ts(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ju(a);l.call(e)}}Qu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ju(a);u.call(e)}}gu((function(){Qu(t,a,e,o)}))}return Ju(a)}function ns(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!es(t))throw Error(l(200));return Yu(e,t,null,n)}Hl=function(e,t,n){var o=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Da=!0;else{if(0==(n&o)){switch(Da=!1,t.tag){case 3:qa(t),Wi();break;case 5:Ii(t);break;case 1:mo(t.type)&&bo(t);break;case 4:Li(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value;var i=t.type._context;uo(Jo,i._currentValue),i._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(uo(Oi,1&Oi.current),null!==(t=nl(e,t,n))?t.sibling:null);uo(Oi,1&Oi.current);break;case 19:if(o=0!=(n&t.childLanes),0!=(64&e.flags)){if(o)return tl(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),uo(Oi,Oi.current),o)break;return null;case 23:case 24:return t.lanes=0,Ua(e,t,n)}return nl(e,t,n)}Da=0!=(16384&e.flags)}else Da=!1;switch(t.lanes=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=ho(t,co.current),ri(t,n),i=oa(null,t,o,e,i,n),t.flags|=1,"object"===(void 0===i?"undefined":r(i))&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mo(o)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ai(t);var u=o.getDerivedStateFromProps;"function"==typeof u&&hi(t,o,u,e),i.updater=mi,t.stateNode=i,i._reactInternals=t,bi(t,o,e,n),t=Ha(null,t,o,!0,a,n)}else t.tag=0,Oa(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(a=i._init)(i._payload),t.type=i,a=t.tag=function(e){if("function"==typeof e)return Fu(e)?1:0;if(null!=e){if((e=e.$$typeof)===L)return 11;if(e===D)return 14}return 2}(i),e=Qo(i,e),a){case 0:t=Ba(null,t,i,e,n);break e;case 1:t=Ga(null,t,i,e,n);break e;case 11:t=ja(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Qo(i.type,e),o,n);break e}throw Error(l(306,i,""))}return t;case 0:return o=t.type,i=t.pendingProps,Ba(e,t,o,i=t.elementType===o?i:Qo(o,i),n);case 1:return o=t.type,i=t.pendingProps,Ga(e,t,o,i=t.elementType===o?i:Qo(o,i),n);case 3:if(qa(t),o=t.updateQueue,null===e||null===o)throw Error(l(282));if(o=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,li(e,t),fi(t,o,null,n),(o=t.memoizedState.element)===i)Wi(),t=nl(e,t,n);else{if((a=(i=t.stateNode).hydrate)&&(zi=Wr(t.stateNode.containerInfo.firstChild),Ri=t,a=Ui=!0),a){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(a=e[i])._workInProgressVersionPrimary=e[i+1],$i.push(a);for(n=_i(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Oa(e,t,o,n),Wi();t=t.child}return t;case 5:return Ii(t),null===e&&Gi(t),o=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,u=i.children,Br(o,i)?u=null:null!==a&&Br(o,a)&&(t.flags|=16),Fa(e,t),Oa(e,t,u,n),t.child;case 6:return null===e&&Gi(t),null;case 13:return Qa(e,t,n);case 4:return Li(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Si(t,null,o,n):Oa(e,t,o,n),t.child;case 11:return o=t.type,i=t.pendingProps,ja(e,t,o,i=t.elementType===o?i:Qo(o,i),n);case 7:return Oa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oa(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,i=t.pendingProps,u=t.memoizedProps,a=i.value;var s=t.type._context;if(uo(Jo,s._currentValue),s._currentValue=a,null!==u)if(s=u.value,0===(a=ur(s,a)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(s,a):1073741823))){if(u.children===i.children&&!fo.current){t=nl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.dependencies;if(null!==c){u=s.child;for(var f=c.firstContext;null!==f;){if(f.context===o&&0!=(f.observedBits&a)){1===s.tag&&((f=ui(-1,n&-n)).tag=2,si(s,f)),s.lanes|=n,null!==(f=s.alternate)&&(f.lanes|=n),ni(s.return,n),c.lanes|=n;break}f=f.next}}else u=10===s.tag&&s.type===t.type?null:s.child;if(null!==u)u.return=s;else for(u=s;null!==u;){if(u===t){u=null;break}if(null!==(s=u.sibling)){s.return=u.return,u=s;break}u=u.return}s=u}Oa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,o=(a=t.pendingProps).children,ri(t,n),o=o(i=oi(i,a.unstable_observedBits)),t.flags|=1,Oa(e,t,o,n),t.child;case 14:return a=Qo(i=t.type,t.pendingProps),Ra(e,t,i,a=Qo(i.type,a),o,n);case 15:return za(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,i=t.pendingProps,i=t.elementType===o?i:Qo(o,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mo(o)?(e=!0,bo(t)):e=!1,ri(t,n),vi(t,o,i),bi(t,o,i,n),Ha(null,t,o,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Ua(e,t,n)}throw Error(l(156,t.tag))},Zu.prototype.render=function(e){Qu(e,this._internalRoot,null,null)},Zu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qu(null,e,null,(function(){t[Xr]=null}))},nt=function(e){13===e.tag&&(su(e,4,lu()),Ku(e,4))},rt=function(e){13===e.tag&&(su(e,67108864,lu()),Ku(e,67108864))},ot=function(e){if(13===e.tag){var t=lu(),n=uu(e);su(e,n,t),Ku(e,n)}},it=function(e,t){return t()},Me=function(e,t,n){switch(t){case"input":if(oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=no(r);if(!o)throw Error(l(90));Z(r),oe(r,o)}}}break;case"textarea":fe(e,n);break;case"select":null!=(t=n.value)&&ue(e,!!n.multiple,t,!1)}},De=mu,Oe=function(e,t,n,r,o){var i=Tl;Tl|=4;try{return qo(98,e.bind(null,t,n,r,o))}finally{0===(Tl=i)&&(Gl(),$o())}},je=function(){0==(49&Tl)&&(function(){if(null!==Zl){var e=Zl;Zl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fu(e,Bo())}))}$o()}(),Pu())},Re=function(e,t){var n=Tl;Tl|=2;try{return e(t)}finally{0===(Tl=n)&&(Gl(),$o())}};var rs={Events:[eo,to,no,Ae,Ie,Pu,{current:!1}]},os={findFiberByHostInstance:Zr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},is={bundleType:os.bundleType,version:os.version,rendererPackageName:os.rendererPackageName,rendererConfig:os.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=et(e))?null:e.stateNode},findFiberByHostInstance:os.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{ko=as.inject(is),xo=as}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=rs,t.createPortal=ns,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw Error(l(268,Object.keys(e)))}return e=null===(e=et(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Tl;if(0!=(48&n))return e(t);Tl|=1;try{if(e)return qo(99,e.bind(null,t))}finally{Tl=n,$o()}},t.hydrate=function(e,t,n){if(!es(t))throw Error(l(200));return ts(null,e,t,!0,n)},t.render=function(e,t,n){if(!es(t))throw Error(l(200));return ts(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!es(e))throw Error(l(40));return!!e._reactRootContainer&&(gu((function(){ts(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return ns(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!es(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return ts(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(7)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};if("object"===("undefined"==typeof performance?"undefined":l(performance))&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var s=Date,c=s.now();t.unstable_now=function(){return s.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var f=null,d=null,p=function e(){if(null!==f)try{var n=t.unstable_now();f(!0,n),f=null}catch(t){throw setTimeout(e,0),t}};r=function(e){null!==f?setTimeout(r,0,e):(f=e,setTimeout(p,0))},o=function(e,t){d=setTimeout(e,t)},i=function(){clearTimeout(d)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,y=null,b=-1,w=5,k=0;t.unstable_shouldYield=function(){return t.unstable_now()>=k},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):w=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,E=x.port2;x.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();k=e+w;try{y(!0,e)?E.postMessage(null):(v=!1,y=null)}catch(e){throw E.postMessage(null),e}}else v=!1},r=function(e){y=e,v||(v=!0,E.postMessage(null))},o=function(e,n){b=h((function(){e(t.unstable_now())}),n)},i=function(){m(b),b=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<T(o,t)))break e;e[r]=t,e[n]=o,n=r}}function _(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>T(a,n))void 0!==u&&0>T(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>T(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],N=[],P=1,L=null,A=3,I=!1,D=!1,O=!1;function j(e){for(var t=_(N);null!==t;){if(null===t.callback)C(N);else{if(!(t.startTime<=e))break;C(N),t.sortIndex=t.expirationTime,S(M,t)}t=_(N)}}function R(e){if(O=!1,j(e),!D)if(null!==_(M))D=!0,r(z);else{var t=_(N);null!==t&&o(R,t.startTime-e)}}function z(e,n){D=!1,O&&(O=!1,i()),I=!0;var r=A;try{for(j(n),L=_(M);null!==L&&(!(L.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=L.callback;if("function"==typeof a){L.callback=null,A=L.priorityLevel;var l=a(L.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?L.callback=l:L===_(M)&&C(M),j(n)}else C(M);L=_(M)}if(null!==L)var u=!0;else{var s=_(N);null!==s&&o(R,s.startTime-n),u=!1}return u}finally{L=null,A=r,I=!1}}var U=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||I||(D=!0,r(z))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return _(M)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();switch("object"===(void 0===a?"undefined":l(a))&&null!==a?a="number"==typeof(a=a.delay)&&0<a?u+a:u:a=u,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:P++,callback:n,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>u?(e.sortIndex=a,S(N,e),null===_(M)&&e===_(N)&&(O?i():O=!0,o(R,a-u))):(e.sortIndex=s,S(M,e),D||I||(D=!0,r(z))),e},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=l(n(9));function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var f=function(e){function t(e){u(this,t);var n=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={vo:{},isShow:0},n}return c(t,e),r(t,[{key:"musicDetail",value:function(e){this.setState({isShow:1,vo:e})}},{key:"componentDidMount",value:function(){(0,a.default)("#keyword").keyup((function(){var e=(0,a.default)("#keyword").val();(0,a.default)("#user-table > tbody > tr").hide();var t=(0,a.default)('#user-table>tbody>tr>td:nth-child(5n+3):contains("'+e+'")');(0,a.default)(t).parent().show()}))}},{key:"render",value:function(){var e=this,t=this.props.music.map((function(t){return i.default.createElement("tr",null,i.default.createElement("td",null,t.rank),i.default.createElement("td",null,i.default.createElement("img",{src:t.poster,width:"35",height:"35"})),i.default.createElement("td",{onClick:e.musicDetail.bind(e,t)},t.title),i.default.createElement("td",null,t.singer),i.default.createElement("td",null,t.album))}));return i.default.createElement("div",{className:"row"},i.default.createElement("div",{className:"col-sm-8"},i.default.createElement("h1",{className:"text-center"},"뮤직 Top50"),i.default.createElement("input",{type:"text",size:"20",id:"keyword"}),i.default.createElement("div",{style:{height:"10px"}}),i.default.createElement("table",{className:"table",id:"user-table"},i.default.createElement("thead",null,i.default.createElement("tr",{className:"danger"},i.default.createElement("th",null,"번호"),i.default.createElement("th",null),i.default.createElement("th",null,"노래명"),i.default.createElement("th",null,"가수명"),i.default.createElement("th",null,"앨범"))),i.default.createElement("tbody",null,t))),i.default.createElement("div",{className:"col-sm-4"},1==this.state.isShow?i.default.createElement(d,{m:this.state.vo}):null))}}]),t}(o.Component),d=function(e){function t(e){return u(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return c(t,e),r(t,[{key:"render",value:function(){return i.default.createElement("table",{class:"table"},i.default.createElement("tr",null,i.default.createElement("td",{colSpan:"2"},i.default.createElement("iframe",{src:"http://youtube.com/embed/"+this.props.m.movie,width:"400",height:"500"}))),i.default.createElement("tr",null,i.default.createElement("td",{className:"text-right"},"제목"),i.default.createElement("td",null,this.props.m.title)),i.default.createElement("tr",null,i.default.createElement("td",{className:"text-right"},"가수명"),i.default.createElement("td",null,this.props.m.singer)))}}]),t}(o.Component);t.default=f},function(e,t,n){"use strict";(function(e){var n,r,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
r="undefined"!=typeof window?window:void 0,o=function(r,o){var a=[],l=Object.getPrototypeOf,u=a.slice,s=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},c=a.push,f=a.indexOf,d={},p=d.toString,h=d.hasOwnProperty,m=h.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w=r.document,k={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,o,i=(n=n||w).createElement("script");if(i.text=e,t)for(r in k)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function E(e){return null==e?e+"":"object"===(void 0===e?"undefined":i(e))||"function"==typeof e?d[p.call(e)]||"object":void 0===e?"undefined":i(e)}var S=function e(t,n){return new e.fn.init(t,n)};function _(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}S.fn=S.prototype={jquery:"3.5.1",constructor:S,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:a.sort,splice:a.splice},S.extend=S.fn.extend=function(){var e,t,n,r,o,a,l=arguments[0]||{},u=1,s=arguments.length,c=!1;for("boolean"==typeof l&&(c=l,l=arguments[u]||{},u++),"object"===(void 0===l?"undefined":i(l))||y(l)||(l={}),u===s&&(l=this,u--);u<s;u++)if(null!=(e=arguments[u]))for(t in e)r=e[t],"__proto__"!==t&&l!==r&&(c&&r&&(S.isPlainObject(r)||(o=Array.isArray(r)))?(n=l[t],a=o&&!Array.isArray(n)?[]:o||S.isPlainObject(n)?n:{},o=!1,l[t]=S.extend(c,a,r)):void 0!==r&&(l[t]=r));return l},S.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=l(e))&&("function"!=typeof(n=h.call(t,"constructor")&&t.constructor)||m.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(_(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(_(Object(e))?S.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(_(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return s(a)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=a[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=
/*!
  * Sizzle CSS Selector Engine v2.3.5
  * https://sizzlejs.com/
  *
  * Copyright JS Foundation and other contributors
  * Released under the MIT license
  * https://js.foundation/
  *
  * Date: 2020-03-14
  */
function(e){var t,n,r,o,i,a,l,u,s,c,f,d,p,h,m,g,v,y,b,w="sizzle"+1*new Date,k=e.document,x=0,E=0,S=ue(),_=ue(),C=ue(),T=ue(),M=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,P=[],L=P.pop,A=P.push,I=P.push,D=P.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",z="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",U="\\["+R+"*("+z+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+R+"*\\]",F=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",B=new RegExp(R+"+","g"),G=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),H=new RegExp("^"+R+"*,"+R+"*"),q=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),W=new RegExp(R+"|>"),$=new RegExp(F),V=new RegExp("^"+z+"$"),Y={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},ae=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(P=D.call(k.childNodes),k.childNodes),P[k.childNodes.length].nodeType}catch(e){I={apply:P.length?function(e,t){A.apply(e,D.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function le(e,t,r,o){var i,l,s,c,f,h,v,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return r;if(!o&&(d(t),t=t||p,m)){if(11!==k&&(f=Z.exec(e)))if(i=f[1]){if(9===k){if(!(s=t.getElementById(i)))return r;if(s.id===i)return r.push(s),r}else if(y&&(s=y.getElementById(i))&&b(t,s)&&s.id===i)return r.push(s),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!T[e+" "]&&(!g||!g.test(e))&&(1!==k||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===k&&(W.test(e)||q.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,oe):t.setAttribute("id",c=w)),l=(h=a(e)).length;l--;)h[l]=(c?"#"+c:":scope")+" "+be(h[l]);v=h.join(",")}try{return I.apply(r,y.querySelectorAll(v)),r}catch(t){T(e,!0)}finally{c===w&&t.removeAttribute("id")}}}return u(e.replace(G,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[w]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return se((function(t){return t=+t,se((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=le.support={},i=le.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},d=le.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:k;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!i(p),k!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=ce((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(p.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=K.test(p.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+w+"-]").length||g.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",F)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(h.compareDocumentPosition),b=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},M=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==k&&b(k,e)?-1:t==p||t.ownerDocument==k&&b(k,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],l=[t];if(!o||!i)return e==p?-1:t==p?1:o?-1:i?1:c?O(c,e)-O(c,t):0;if(o===i)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?de(a[r],l[r]):a[r]==k?-1:l[r]==k?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!T[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){T(t,!0)}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return(e.ownerDocument||e)!=p&&d(e),b(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},le.escape=function(e){return(e+"").replace(re,oe)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(M),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return c=null,e},o=le.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=le.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=le.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(B," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,d,p,h,m=i!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!u&&!l,b=!1;if(g){if(i){for(;m;){for(d=t;d=d[m];)if(l?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(p=(s=(c=(f=(d=g)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===x&&s[1])&&s[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[x,p,b];break}}else if(y&&(b=p=(s=(c=(f=(d=t)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===x&&s[1]),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((l?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((c=(f=d[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[x,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return o[w]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=O(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:se((function(e){var t=[],n=[],r=l(e.replace(G,"$1"));return r[w]?se((function(e,t,n,o){for(var i,a=r(e,null,o,[]),l=e.length;l--;)(i=a[l])&&(e[l]=!(t[l]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:se((function(e){return function(t){return le(e,t).length>0}})),contains:se((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:se((function(e){return V.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function we(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,l=E++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var s,c,f,d=[x,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===x&&s[1]===l)return d[2]=s[2];if(c[i]=d,d[2]=e(t,n,u))return!0}return!1}}function ke(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(i=e[l])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(l)));return a}function Ee(e,t,n,r,o,i){return r&&!r[w]&&(r=Ee(r)),o&&!o[w]&&(o=Ee(o,i)),se((function(i,a,l,u){var s,c,f,d=[],p=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)le(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!i&&t?m:xe(m,d,e,l,u),v=n?o||(i?e:h||r)?[]:a:g;if(n&&n(g,v,l,u),r)for(s=xe(v,p),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[p[c]]=!(g[p[c]]=f));if(i){if(o||e){if(o){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(g[c]=f);o(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=o?O(i,f):d[c])>-1&&(i[s]=!(a[s]=f))}}else v=xe(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):I.apply(a,v)}))}function Se(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=we((function(e){return e===t}),l,!0),f=we((function(e){return O(t,e)>-1}),l,!0),d=[function(e,n,r){var o=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])d=[we(ke(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return Ee(u>1&&ke(d),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(G,"$1"),n,u<o&&Se(e.slice(u,o)),o<i&&Se(e=e.slice(o)),o<i&&be(e))}d.push(n)}return ke(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=le.tokenize=function(e,t){var n,o,i,a,l,u,s,c=_[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(o=H.exec(l))||(o&&(l=l.slice(o[0].length)||l),u.push(i=[])),n=!1,(o=q.exec(l))&&(n=o.shift(),i.push({value:n,type:o[0].replace(G," ")}),l=l.slice(n.length)),r.filter)!(o=Y[a].exec(l))||s[a]&&!(o=s[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):_(e,u).slice(0)},l=le.compile=function(e,t){var n,o=[],i=[],l=C[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Se(t[n]))[w]?o.push(l):i.push(l);(l=C(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,l,u,c){var f,h,g,v=0,y="0",b=i&&[],w=[],k=s,E=i||o&&r.find.TAG("*",c),S=x+=null==k?1:Math.random()||.1,_=E.length;for(c&&(s=a==p||a||c);y!==_&&null!=(f=E[y]);y++){if(o&&f){for(h=0,a||f.ownerDocument==p||(d(f),l=!m);g=e[h++];)if(g(f,a||p,l)){u.push(f);break}c&&(x=S)}n&&((f=!g&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,w,a,l);if(i){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=L.call(u));w=xe(w)}I.apply(u,w),c&&!i&&w.length>0&&v+t.length>1&&le.uniqueSort(u)}return c&&(x=S,s=k),b};return n?se(i):i}(i,o))).selector=e}return l},u=le.select=function(e,t,n,o){var i,u,s,c,f,d="function"==typeof e&&e,p=!o&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=Y.needsContext.test(e)?0:u.length;i--&&(s=u[i],!r.relative[c=s.type]);)if((f=r.find[c])&&(o=f(s.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return I.apply(n,o),n;break}}return(d||l(e,p))(o,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(M).join("")===w,n.detectDuplicates=!!f,d(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||fe(j,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),le}(r);S.find=C,(S.expr=C.selectors)[":"]=S.expr.pseudos,S.uniqueSort=S.unique=C.uniqueSort,S.text=C.getText,S.isXMLDoc=C.isXML,S.contains=C.contains,S.escapeSelector=C.escape;var T=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(n))break;r.push(e)}return r},M=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=S.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return y(t)?S.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?S.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?S.grep(e,(function(e){return f.call(t,e)>-1!==n})):S.filter(t,e,n)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,(function(e){return 1===e.nodeType})))},S.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(S(e).filter((function(){for(t=0;t<r;t++)if(S.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,o[t],n);return r>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&N.test(e)?S(e):e||[],!1).length}});var I,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||I,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),L.test(r[1])&&S.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=w.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,I=S(w);var O=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&S(e);if(!N.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?S.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(S(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return M((e.parentNode||{}).firstChild,e)},children:function(e){return M(e.firstChild)},contents:function(e){return null!=e.contentDocument&&l(e.contentDocument)?e.contentDocument:(P(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},(function(e,t){S.fn[e]=function(n,r){var o=S.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=S.filter(r,o)),this.length>1&&(j[e]||S.uniqueSort(o),O.test(e)&&o.reverse()),this.pushStack(o)}}));var z=/[^\x20\t\r\n\f]+/g;function U(e){return e}function F(e){throw e}function B(e,t,n,r){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return S.each(e.match(z)||[],(function(e,n){t[n]=!0})),t}(e):S.extend({},e);var t,n,r,o,i=[],a=[],l=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},s={add:function(){return i&&(n&&!t&&(l=i.length-1,a.push(n)),function t(n){S.each(n,(function(n,r){y(r)?e.unique&&s.has(r)||i.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return S.each(arguments,(function(e,t){for(var n;(n=S.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--})),this},has:function(e){return e?S.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return S.Deferred((function(n){S.each(t,(function(t,r){var o=y(e[r[4]])&&e[r[4]];a[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var a=0;function l(e,t,n,o){return function(){var u=this,s=arguments,c=function(){var r,c;if(!(e<a)){if((r=n.apply(u,s))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"===(void 0===r?"undefined":i(r))||"function"==typeof r)&&r.then,y(c)?o?c.call(r,l(a,t,U,o),l(a,t,F,o)):(a++,c.call(r,l(a,t,U,o),l(a,t,F,o),l(a,t,U,t.notifyWith))):(n!==U&&(u=void 0,s=[r]),(o||t.resolveWith)(u,s))}},f=o?c:function(){try{c()}catch(r){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(r,f.stackTrace),e+1>=a&&(n!==F&&(u=void 0,s=[r]),t.rejectWith(u,s))}};e?f():(S.Deferred.getStackHook&&(f.stackTrace=S.Deferred.getStackHook()),r.setTimeout(f))}}return S.Deferred((function(r){t[0][3].add(l(0,r,y(o)?o:U,r.notifyWith)),t[1][3].add(l(0,r,y(e)?e:U)),t[2][3].add(l(0,r,y(n)?n:F))})).promise()},promise:function(e){return null!=e?S.extend(e,o):o}},a={};return S.each(t,(function(e,r){var i=r[2],l=r[5];o[r[1]]=i.add,l&&i.add((function(){n=l}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),i.add(r[3].fire),a[r[0]]=function(){return a[r[0]+"With"](this===a?void 0:this,arguments),this},a[r[0]+"With"]=i.fireWith})),o.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),o=u.call(arguments),i=S.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?u.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(B(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)B(o[n],a(n),i.reject);return i.promise()}});var G=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&G.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){r.setTimeout((function(){throw e}))};var H=S.Deferred();function q(){w.removeEventListener("DOMContentLoaded",q),r.removeEventListener("load",q),S.ready()}S.fn.ready=function(e){return H.then(e).catch((function(e){S.readyException(e)})),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||H.resolveWith(w,[S]))}}),S.ready.then=H.then,"complete"===w.readyState||"loading"!==w.readyState&&!w.documentElement.doScroll?r.setTimeout(S.ready):(w.addEventListener("DOMContentLoaded",q),r.addEventListener("load",q));var W=function e(t,n,r,o,i,a,l){var u=0,s=t.length,c=null==r;if("object"===E(r))for(u in i=!0,r)e(t,n,u,r[u],!0,a,l);else if(void 0!==o&&(i=!0,y(o)||(l=!0),c&&(l?(n.call(t,o),n=null):(c=n,n=function(e,t,n){return c.call(S(e),n)})),n))for(;u<s;u++)n(t[u],r,l?o:o.call(t[u],u,n(t[u],r)));return i?t:c?n.call(t):s?n(t[0],r):a},$=/^-ms-/,V=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function Q(e){return e.replace($,"ms-").replace(V,Y)}var J=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=S.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},J(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Q(t)]=n;else for(r in t)o[Q(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Q):(t=Q(t))in r?[t]:t.match(z)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var K=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return Z.hasData(e)||K.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,r,o,a=this[0],l=a&&a.attributes;if(void 0===e){if(this.length&&(o=Z.get(a),1===a.nodeType&&!K.get(a,"hasDataAttrs"))){for(n=l.length;n--;)l[n]&&0===(r=l[n].name).indexOf("data-")&&(r=Q(r.slice(5)),ne(a,r,o[r]));K.set(a,"hasDataAttrs",!0)}return o}return"object"===(void 0===e?"undefined":i(e))?this.each((function(){Z.set(this,e)})):W(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=Z.get(a,e))||void 0!==(n=ne(a,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){var n=S.queue(e,t=t||"fx"),r=n.length,o=n.shift(),i=S._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){S.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:S.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each((function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){S.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=S.Deferred(),i=this,a=this.length,l=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=K.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=w.documentElement,le=function(e){return S.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(le=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&le(e)&&"none"===S.css(e,"display")};function ce(e,t,n,r){var o,i,a=20,l=r?function(){return r.cur()}:function(){return S.css(e,t,"")},u=l(),s=n&&n[3]||(S.cssNumber[t]?"":"px"),c=e.nodeType&&(S.cssNumber[t]||"px"!==s&&+u)&&oe.exec(S.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)S.style(e,t,c+s),(1-i)*(1-(i=l()/u||.5))<=0&&(a=0),c/=i;S.style(e,t,(c*=2)+s),n=n||[]}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}var fe={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,o=fe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=S.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),fe[r]=o,o)}function pe(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=K.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=de(r))):"none"!==n&&(o[i]="none",K.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}S.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){se(this)?S(this).show():S(this).hide()}))}});var he,me,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=w.createDocumentFragment().appendChild(w.createElement("div")),(me=w.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),v.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",v.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?S.merge([e],n):n}function ke(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,v.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var xe=/<|&#?\w+;/;function Ee(e,t,n,r,o){for(var i,a,l,u,s,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===E(i))S.merge(d,i.nodeType?[i]:i);else if(xe.test(i)){for(a=a||f.appendChild(t.createElement("div")),l=(ve.exec(i)||["",""])[1].toLowerCase(),u=be[l]||be._default,a.innerHTML=u[1]+S.htmlPrefilter(i)+u[2],c=u[0];c--;)a=a.lastChild;S.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&S.inArray(i,r)>-1)o&&o.push(i);else if(s=le(i),a=we(f.appendChild(i),"script"),s&&ke(a),n)for(c=0;i=a[c++];)ye.test(i.type||"")&&n.push(i);return f}var Se=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Me(){return!1}function Ne(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==("focus"===t)}function Pe(e,t,n,r,o,a){var l,u;if("object"===(void 0===t?"undefined":i(t))){for(u in"string"!=typeof n&&(r=r||n,n=void 0),t)Pe(e,u,n,r,t[u],a);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Me;else if(!o)return e;return 1===a&&(l=o,(o=function(e){return S().off(e),l.apply(this,arguments)}).guid=l.guid||(l.guid=S.guid++)),e.each((function(){S.event.add(this,t,o,r,n)}))}function Le(e,t,n){n?(K.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=K.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=u.call(arguments),K.set(this,t,i),r=n(this,t),this[t](),i!==(o=K.get(this,t))||r?K.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(K.set(this,t,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&S.event.add(e,t,Te)}S.event={global:{},add:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,g=K.get(e);if(J(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&S.find.matchesSelector(ae,o),n.guid||(n.guid=S.guid++),(u=g.events)||(u=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(z)||[""]).length;s--;)p=m=(l=Ce.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p&&(f=S.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=S.event.special[p]||{},c=S.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,c):d.push(c),S.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,g=K.hasData(e)&&K.get(e);if(g&&(u=g.events)){for(s=(t=(t||"").match(z)||[""]).length;s--;)if(p=m=(l=Ce.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p){for(f=S.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)c=d[i],!o&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||S.removeEvent(e,p,g.handle),delete u[p])}else for(p in u)S.event.remove(e,p+t[s],n,r,!0);S.isEmptyObject(u)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,l=new Array(arguments.length),u=S.event.fix(e),s=(K.get(this,"events")||Object.create(null))[u.type]||[],c=S.event.special[u.type]||{};for(l[0]=u,t=1;t<arguments.length;t++)l[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=S.event.handlers.call(this,u,s),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((S.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?S(o,this).index(s)>-1:S.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&l.push({elem:s,handlers:i})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&P(t,"input")&&Le(t,"click",Te),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&P(t,"input")&&Le(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&P(t,"input")&&K.get(t,"click")||P(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},(S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Me,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0}).prototype={constructor:S.Event,isDefaultPrevented:Me,isPropagationStopped:Me,isImmediatePropagationStopped:Me,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(e,t){S.event.special[e]={setup:function(){return Le(this,e,Ne),!1},trigger:function(){return Le(this,e),!0},delegateType:t}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||S.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),S.fn.extend({on:function(e,t,n,r){return Pe(this,e,t,n,r)},one:function(e,t,n,r){return Pe(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===(void 0===e?"undefined":i(e))){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Me),this.each((function(){S.event.remove(this,e,n,t)}))}});var Ae=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ze(e,t){var n,r,o,i,a,l;if(1===t.nodeType){if(K.hasData(e)&&(l=K.get(e).events))for(o in K.remove(t,"handle events"),l)for(n=0,r=l[o].length;n<r;n++)S.event.add(t,o,l[o][n]);Z.hasData(e)&&(i=Z.access(e),a=S.extend({},i),Z.set(t,a))}}function Ue(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,r){t=s(t);var o,i,a,l,u,c,f=0,d=e.length,p=d-1,h=t[0],m=y(h);if(m||d>1&&"string"==typeof h&&!v.checkClone&&Ie.test(h))return e.each((function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),Fe(i,t,n,r)}));if(d&&(i=(o=Ee(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(l=(a=S.map(we(o,"script"),je)).length;f<d;f++)u=o,f!==p&&(u=S.clone(u,!0,!0),l&&S.merge(a,we(u,"script"))),n.call(e[f],u,f);if(l)for(c=a[a.length-1].ownerDocument,S.map(a,Re),f=0;f<l;f++)u=a[f],ye.test(u.type||"")&&!K.access(u,"globalEval")&&S.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):x(u.textContent.replace(De,""),u,c))}return e}function Be(e,t,n){for(var r,o=t?S.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||S.cleanData(we(r)),r.parentNode&&(n&&le(r)&&ke(we(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,l=e.cloneNode(!0),u=le(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=we(l),r=0,o=(i=we(e)).length;r<o;r++)Ue(i[r],a[r]);if(t)if(n)for(i=i||we(e),a=a||we(l),r=0,o=i.length;r<o;r++)ze(i[r],a[r]);else ze(e,l);return(a=we(l,"script")).length>0&&ke(a,!u&&we(e,"script")),l},cleanData:function(e){for(var t,n,r,o=S.event.special,i=0;void 0!==(n=e[i]);i++)if(J(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)o[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return W(this,(function(e){return void 0===e?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return S.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!be[(ve.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){S.fn[e]=function(e){for(var n,r=[],o=S(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),S(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Ge=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},qe=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},We=new RegExp(ie.join("|"),"i");function $e(e,t,n){var r,o,i,a,l=e.style;return(n=n||He(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||le(e)||(a=S.style(e,t)),!v.pixelBoxStyles()&&Ge.test(a)&&We.test(t)&&(r=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(s).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),o=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),ae.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,a,l,u,s=w.createElement("div"),c=w.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==l&&(e=w.createElement("table"),t=w.createElement("tr"),n=w.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),l=parseInt(o.height)>3,ae.removeChild(e)),l}}))}();var Ye=["Webkit","Moz","ms"],Qe=w.createElement("div").style,Je={};function Xe(e){var t=S.cssProps[e]||Je[e];return t||(e in Qe?e:Je[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Qe)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,Ze=/^--/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"};function nt(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function rt(e,t,n,r,o,i){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=S.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=S.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=S.css(e,"border"+ie[a]+"Width",!0,o))):(u+=S.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=S.css(e,"border"+ie[a]+"Width",!0,o):l+=S.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-l-.5))||0),u}function ot(e,t,n){var r=He(e),o=(!v.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),i=o,a=$e(e,t,r),l="offset"+t[0].toUpperCase()+t.slice(1);if(Ge.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&P(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===S.css(e,"boxSizing",!1,r),(i=l in e)&&(a=e[l])),(a=parseFloat(a)||0)+rt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function it(e,t,n,r,o){return new it.prototype.init(e,t,n,r,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,l,u=Q(t),s=Ze.test(t),c=e.style;if(s||(t=Xe(u)),l=S.cssHooks[t]||S.cssHooks[u],void 0===n)return l&&"get"in l&&void 0!==(o=l.get(e,!1,r))?o:c[t];"string"===(a=void 0===n?"undefined":i(n))&&(o=oe.exec(n))&&o[1]&&(n=ce(e,t,o),a="number"),null!=n&&n==n&&("number"!==a||s||(n+=o&&o[3]||(S.cssNumber[u]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),l&&"set"in l&&void 0===(n=l.set(e,n,r))||(s?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,l=Q(t);return Ze.test(t)||(t=Xe(l)),(a=S.cssHooks[t]||S.cssHooks[l])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=$e(e,t,r)),"normal"===o&&t in tt&&(o=tt[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),S.each(["height","width"],(function(e,t){S.cssHooks[t]={get:function(e,n,r){if(n)return!Ke.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,t,r):qe(e,et,(function(){return ot(e,t,r)}))},set:function(e,n,r){var o,i=He(e),a=!v.scrollboxSize()&&"absolute"===i.position,l=(a||r)&&"border-box"===S.css(e,"boxSizing",!1,i),u=r?rt(e,t,r,l,i):0;return l&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-rt(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),nt(0,n,u)}}})),S.cssHooks.marginLeft=Ve(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(e,t){S.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(S.cssHooks[e+t].set=nt)})),S.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=He(e),o=t.length;a<o;a++)i[t[a]]=S.css(e,t[a],!1,r);return i}return void 0!==n?S.style(e,t,n):S.css(e,t)}),e,t,arguments.length>1)}}),S.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(S.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Xe(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},(S.fx=it.prototype.init).step={};var at,lt,ut=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function ct(){lt&&(!1===w.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ct):r.setTimeout(ct,S.fx.interval),S.fx.tick())}function ft(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function pt(e,t,n){for(var r,o=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function ht(e,t,n){var r,o,i=0,a=ht.prefilters.length,l=S.Deferred().always((function(){delete u.elem})),u=function(){if(o)return!1;for(var t=at||ft(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),i=0,a=s.tweens.length;i<a;i++)s.tweens[i].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var r=S.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Q(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=ht.prefilters[i].call(s,e,c,s.opts))return y(r.stop)&&(S._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return S.map(c,pt,s),y(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),S.fx.timer(S.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}S.Animation=S.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(z);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,l,u,s,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&se(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],ut.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||S.style(e,r)}if((u=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=g&&g.display)&&(s=K.get(e,"display")),"none"===(c=S.css(e,"display"))&&(s?c=s:(pe([e],!0),s=e.style.display||s,c=S.css(e,"display"),pe([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===S.css(e,"float")&&(u||(d.done((function(){h.display=s})),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,p)u||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:s}),i&&(g.hidden=!m),m&&pe([e],!0),d.done((function(){for(r in m||pe([e]),K.remove(e,"fxshow"),p)S.style(e,r,p[r])}))),u=pt(m?g[r]:0,r,d),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"===(void 0===e?"undefined":i(e))?S.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=S.isEmptyObject(e),i=S.speed(t,n,r),a=function(){var t=ht(this,S.extend({},e),i);(o||K.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=S.timers,a=K.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&st.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||S.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=S.timers,a=r?r.length:0;for(n.finish=!0,S.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(e,t){var n=S.fn[t];S.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}})),S.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){S.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),at=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){lt||(lt=!0,ct())},S.fx.stop=function(){lt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}}))},function(){var e=w.createElement("input"),t=w.createElement("select").appendChild(w.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=w.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var mt,gt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return W(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){S.removeAttr(this,e)}))}}),S.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?S.prop(e,t,n):(1===i&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(z);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||S.find.attr;gt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=gt[a],gt[a]=o,o=null!=n(e,t,r)?a:null,gt[a]=i),o}}));var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function bt(e){return(e.match(z)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(z)||[]}S.fn.extend({prop:function(e,t){return W(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[S.propFix[e]||e]}))}}),S.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each((function(t){S(this).addClass(e.call(this,t,wt(this)))}));if((t=kt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+bt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(l=bt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each((function(t){S(this).removeClass(e.call(this,t,wt(this)))}));if(!arguments.length)return this.attr("class","");if((t=kt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+bt(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(l=bt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=void 0===e?"undefined":i(e),r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){S(this).toggleClass(e.call(this,n,wt(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=S(this),a=kt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=wt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+bt(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;S.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=y(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,S(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=S.map(o,(function(e){return null==e?"":e+""}))),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(xt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:bt(S.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=S(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,i=S.makeArray(t),a=o.length;a--;)((r=o[a]).selected=S.inArray(S.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in r;var Et=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,o){var a,l,u,s,c,f,d,p,m=[n||w],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(l=p=u=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!Et.test(g+S.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[S.expando]?e:new S.Event(g,"object"===(void 0===e?"undefined":i(e))&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),d=S.event.special[g]||{},o||!d.trigger||!1!==d.trigger.apply(n,t))){if(!o&&!d.noBubble&&!b(n)){for(s=d.delegateType||g,Et.test(s+g)||(l=l.parentNode);l;l=l.parentNode)m.push(l),u=l;u===(n.ownerDocument||w)&&m.push(u.defaultView||u.parentWindow||r)}for(a=0;(l=m[a++])&&!e.isPropagationStopped();)p=l,e.type=a>1?s:d.bindType||g,(f=(K.get(l,"events")||Object.create(null))[e.type]&&K.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&J(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),t)||!J(n)||c&&y(n[g])&&!b(n)&&((u=n[c])&&(n[c]=null),S.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,St),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,St),S.event.triggered=void 0,u&&(n[c]=u)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each((function(){S.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){S.event.simulate(t,e.target,S.event.fix(e))};S.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=K.access(r,t);o||r.addEventListener(e,n,!0),K.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=K.access(r,t)-1;o?K.access(r,t,o):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var _t=r.location,Ct={guid:Date.now()},Tt=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var Mt=/\[\]$/,Nt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function At(e,t,n,r){var o;if(Array.isArray(t))S.each(t,(function(t,o){n||Mt.test(e)?r(e,o):At(e+"["+("object"===(void 0===o?"undefined":i(o))&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(o in t)At(e+"["+o+"]",t[o],n,r)}S.param=function(e,t){var n,r=[],o=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,(function(){o(this.name,this.value)}));else for(n in e)At(n,e[n],t,o);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Lt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}})):{name:t.name,value:n.replace(Nt,"\r\n")}})).get()}});var It=/%20/g,Dt=/#.*$/,Ot=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,zt=/^\/\//,Ut={},Ft={},Bt="*/".concat("*"),Gt=w.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(z)||[];if(y(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var o={},i=e===Ft;function a(l){var u;return o[l]=!0,S.each(e[l]||[],(function(e,l){var s=l(t,n,r);return"string"!=typeof s||i||o[s]?i?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)})),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Wt(e,t){var n,r,o=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Gt.href=_t.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,S.ajaxSettings),t):Wt(S.ajaxSettings,e)},ajaxPrefilter:Ht(Ut),ajaxTransport:Ht(Ft),ajax:function(e,t){"object"===(void 0===e?"undefined":i(e))&&(t=e,e=void 0);var n,o,a,l,u,s,c,f,d,p,h=S.ajaxSetup({},t=t||{}),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?S(m):S.event,v=S.Deferred(),y=S.Callbacks("once memory"),b=h.statusCode||{},k={},x={},E="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=jt.exec(a);)l[t[1].toLowerCase()+" "]=(l[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=l[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,k[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),C(0,t),this}};if(v.promise(_),h.url=((e||h.url||_t.href)+"").replace(zt,_t.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(z)||[""],null==h.crossDomain){s=w.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=Gt.protocol+"//"+Gt.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=S.param(h.data,h.traditional)),qt(Ut,h,t,_),c)return _;for(d in(f=S.event&&h.global)&&0==S.active++&&S.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Rt.test(h.type),o=h.url.replace(Dt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(It,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Tt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ot,"$1"),p=(Tt.test(o)?"&":"?")+"_="+Ct.guid+++p),h.url=o+p),h.ifModified&&(S.lastModified[o]&&_.setRequestHeader("If-Modified-Since",S.lastModified[o]),S.etag[o]&&_.setRequestHeader("If-None-Match",S.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Bt+"; q=0.01":""):h.accepts["*"]),h.headers)_.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,_,h)||c))return _.abort();if(E="abort",y.add(h.complete),_.done(h.success),_.fail(h.error),n=qt(Ft,h,t,_)){if(_.readyState=1,f&&g.trigger("ajaxSend",[_,h]),c)return _;h.async&&h.timeout>0&&(u=r.setTimeout((function(){_.abort("timeout")}),h.timeout));try{c=!1,n.send(k,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,i,l){var s,d,p,w,k,x=t;c||(c=!0,u&&r.clearTimeout(u),n=void 0,a=l||"",_.readyState=e>0?4:0,s=e>=200&&e<300||304===e,i&&(w=function(e,t,n){for(var r,o,i,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(h,_,i)),!s&&S.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),w=function(e,t,n,r){var o,i,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=s[u+" "+i]||s["* "+i]))for(o in s)if((l=o.split(" "))[1]===i&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(h,w,_,s),s?(h.ifModified&&((k=_.getResponseHeader("Last-Modified"))&&(S.lastModified[o]=k),(k=_.getResponseHeader("etag"))&&(S.etag[o]=k)),204===e||"HEAD"===h.type?x="nocontent":304===e?x="notmodified":(x=w.state,d=w.data,s=!(p=w.error))):(p=x,!e&&x||(x="error",e<0&&(e=0))),_.status=e,_.statusText=(t||x)+"",s?v.resolveWith(m,[d,x,_]):v.rejectWith(m,[_,x,p]),_.statusCode(b),b=void 0,f&&g.trigger(s?"ajaxSuccess":"ajaxError",[_,h,s?d:p]),y.fireWith(m,[_,x]),f&&(g.trigger("ajaxComplete",[_,h]),--S.active||S.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],(function(e,t){S[t]=function(e,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:o,data:n,success:r},S.isPlainObject(e)&&e))}})),S.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){S(this).wrapInner(e.call(this,t))})):this.each((function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){S(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Vt=S.ajaxSettings.xhr();v.cors=!!Vt&&"withCredentials"in Vt,v.ajax=Vt=!!Vt,S.ajaxTransport((function(e){var t,n;if(v.cors||Vt&&!e.crossDomain)return{send:function(o,i){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=n=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i($t[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),n=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=n:l.onreadystatechange=function(){4===l.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),S.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),S.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=S("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),w.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Yt,Qt=[],Jt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||S.expando+"_"+Ct.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",(function(e,t,n){var o,i,a,l=!1!==e.jsonp&&(Jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Jt,"$1"+o):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||S.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=r[o],r[o]=function(){a=arguments},n.always((function(){void 0===i?S(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(o)),a&&y(i)&&i(a[0]),a=i=void 0})),"script"})),v.createHTMLDocument=((Yt=w.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument("")).createElement("base")).href=w.location.href,t.head.appendChild(r)):t=w),i=!n&&[],(o=L.exec(e))?[t.createElement(o[1])]:(o=Ee([e],t,i),i&&i.length&&S(i).remove(),S.merge([],o.childNodes)));var r,o,i},S.fn.load=function(e,t,n){var r,o,a,l=this,u=e.indexOf(" ");return u>-1&&(r=bt(e.slice(u)),e=e.slice(0,u)),y(t)?(n=t,t=void 0):t&&"object"===(void 0===t?"undefined":i(t))&&(o="POST"),l.length>0&&S.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){a=arguments,l.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)})).always(n&&function(e,t){l.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,(function(t){return e===t.elem})).length},S.offset={setOffset:function(e,t,n){var r,o,i,a,l,u,s=S.css(e,"position"),c=S(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),i=S.css(e,"top"),u=S.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+u).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),y(t)&&(t=t.call(e,n,S.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+o),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),c.css(f))}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){S.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),o.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-S.css(r,"marginTop",!0),left:t.left-o.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ae}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;S.fn[e]=function(r){return W(this,(function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),S.each(["top","left"],(function(e,t){S.cssHooks[t]=Ve(v.pixelPosition,(function(e,n){if(n)return n=$e(e,t),Ge.test(n)?S(e).position()[t]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){S.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===i?"margin":"border");return W(this,(function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?S.css(t,n,l):S.style(t,n,o,l)}),t,a?o:void 0,a)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){S.fn[t]=function(e){return this.on(t,e)}})),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=u.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=P,S.isFunction=y,S.isWindow=b,S.camelCase=Q,S.type=E,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Xt,"")},void 0===(n=function(){return S}.apply(t,[]))||(e.exports=n);var Kt=r.jQuery,Zt=r.$;return S.noConflict=function(e){return r.$===S&&(r.$=Zt),e&&r.jQuery===S&&(r.jQuery=Kt),S},void 0===o&&(r.jQuery=r.$=S),S},"object"===i(e)&&"object"===i(e.exports)?e.exports=r.document?o(r,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return o(e)}:o(r)}).call(this,n(10)(e))},function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImFyZ3VtZW50cyIsImxlbmd0aCIsIlJlYWN0RE9NIiwicmVuZGVyIiwibXVzaWMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiUHJvZmlsZXIiLCJxIiwiU3VzcGVuc2UiLCJ1IiwidiIsImZvciIsInciLCJ4IiwiaXRlcmF0b3IiLCJ6IiwiYSIsImIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwidGhpcyIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRCIsIkUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJFcnJvciIsImZvcmNlVXBkYXRlIiwiRiIsImNvbnN0cnVjdG9yIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHIiwiY3VycmVudCIsIkgiLCJJIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiZSIsImsiLCJoIiwiZyIsImNoaWxkcmVuIiwiZiIsIkFycmF5IiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwiX293bmVyIiwiTCIsIk0iLCJOIiwicmVwbGFjZSIsImVzY2FwZSIsInRvU3RyaW5nIiwiTyIsImlzQXJyYXkiLCJLIiwicHVzaCIsInkiLCJuZXh0IiwiZG9uZSIsIlAiLCJRIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ0aGVuIiwiZGVmYXVsdCIsIlIiLCJTIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJhcHBseSIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX3BheWxvYWQiLCJfaW5pdCIsIm1lbW8iLCJjb21wYXJlIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwicHJvY2VzcyIsImNvbnNvbGUiLCJlcnJvciIsImFhIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsIndpbmRvdyIsImhhIiwiaWEiLCJqYSIsImthIiwibmEiLCJhY2NlcHRzQm9vbGVhbnMiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwibWEiLCJpc05hTiIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwib2EiLCJwYSIsInRvVXBwZXJDYXNlIiwicWEiLCJ0ZXN0IiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiZGlzcGxheU5hbWUiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJkYiIsImZiIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJkYXRhIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIlpkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJjb25jYXQiLCJaZSIsIlliIiwiaW5zdGFuY2UiLCJsaXN0ZW5lciIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJzZXRUaW1lb3V0IiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJjaGlsZENvbnRleHRUeXBlcyIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiS2ciLCJfcmVhY3RJbnRlcm5hbHMiLCJIZyIsIklnIiwiSmciLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIk1nIiwiY29udGV4dFR5cGUiLCJzdGF0ZSIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJpbmRleCIsIlRnIiwiVWciLCJlbGVtZW50VHlwZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJtZXNzYWdlIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsImVsZW1lbnQiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJkaXNwbGF5IiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJwZXJmb3JtYW5jZSIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiQXBwIiwidm8iLCJpc1Nob3ciLCJrZXl1cCIsImhpZGUiLCJ0ZW1wIiwicGFyZW50Iiwic2hvdyIsImh0bWwiLCJyYW5rIiwic3JjIiwicG9zdGVyIiwibXVzaWNEZXRhaWwiLCJ0aXRsZSIsInNpbmdlciIsImFsYnVtIiwiY2xhc3NOYW1lIiwiTXVzaWNEZXRhaWwiLCJjbGFzcyIsImNvbFNwYW4iLCJtb3ZpZSIsImdsb2JhbCIsImZhY3RvcnkiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImRvYyIsInNjcmlwdCIsImdldEF0dHJpYnV0ZSIsImhlYWQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwianF1ZXJ5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiZWxlbSIsImZpcnN0IiwiZXEiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJfaSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJub25IZXgiLCJoaWdoIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwiZXhlYyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXNhRXJyb3IiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0bXAiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImFkb3duIiwiYnVwIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwiaGFzRm9jdXMiLCJ0YWJJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJfbWF0Y2hJbmRleGVzIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsIkNhbGxiYWNrcyIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInZhbHVlcyIsInRvZ2dsZSIsImRpdiIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvcHRpb24iLCJ3cmFwTWFwIiwidGhlYWQiLCJ0ciIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJpc1NpbXVsYXRlZCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJ0aW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50Iiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLCtCQy9FbkRoQyxFQUFPRCxRQUFVa0MsRUFBUSxJOzs7OztFQ0szQixJQUFJQyxFQUF3QnZCLE9BQU91QixzQkFDL0JKLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGVBQ2xDSyxFQUFtQnhCLE9BQU9rQixVQUFVTyxxQkFFeEMsU0FBU0MsRUFBU0MsR0FDakIsR0FBSUEsUUFDSCxNQUFNLElBQUlDLFVBQVUseURBR3JCLE9BQU81QixPQUFPMkIsR0ErQ2Z0QyxFQUFPRCxRQTVDUCxXQUNDLElBQ0MsSUFBS1ksT0FBTzZCLE9BQ1gsT0FBTyxFQU1SLElBQUlDLEVBQVEsSUFBSUMsT0FBTyxPQUV2QixHQURBRCxFQUFNLEdBQUssS0FDa0MsTUFBekM5QixPQUFPZ0Msb0JBQW9CRixHQUFPLEdBQ3JDLE9BQU8sRUFLUixJQURBLElBQUlHLEVBQVEsR0FDSDNDLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUN2QjJDLEVBQU0sSUFBTUYsT0FBT0csYUFBYTVDLElBQU1BLEVBS3ZDLEdBQXdCLGVBSFhVLE9BQU9nQyxvQkFBb0JDLEdBQU9FLEtBQUksU0FBVXBCLEdBQzVELE9BQU9rQixFQUFNbEIsTUFFSHFCLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSUMsRUFBUSxHQUlaLE1BSEEsdUJBQXVCQyxNQUFNLElBQUlDLFNBQVEsU0FBVUMsR0FDbERILEVBQU1HLEdBQVVBLEtBR2YseUJBREV4QyxPQUFPeUMsS0FBS3pDLE9BQU82QixPQUFPLEdBQUlRLElBQVFELEtBQUssSUFNOUMsTUFBT00sR0FFUixPQUFPLEdBSVFDLEdBQW9CM0MsT0FBTzZCLE9BQVMsU0FBVWUsRUFBUUMsR0FLdEUsSUFKQSxJQUFJQyxFQUVBQyxFQURBQyxFQUFLdEIsRUFBU2tCLEdBR1R2QixFQUFJLEVBQUdBLEVBQUk0QixVQUFVQyxPQUFRN0IsSUFBSyxDQUcxQyxJQUFLLElBQUlSLEtBRlRpQyxFQUFPOUMsT0FBT2lELFVBQVU1QixJQUduQkYsRUFBZTFCLEtBQUtxRCxFQUFNakMsS0FDN0JtQyxFQUFHbkMsR0FBT2lDLEVBQUtqQyxJQUlqQixHQUFJVSxFQUF1QixDQUMxQndCLEVBQVV4QixFQUFzQnVCLEdBQ2hDLElBQUssSUFBSXhELEVBQUksRUFBR0EsRUFBSXlELEVBQVFHLE9BQVE1RCxJQUMvQmtDLEVBQWlCL0IsS0FBS3FELEVBQU1DLEVBQVF6RCxNQUN2QzBELEVBQUdELEVBQVF6RCxJQUFNd0QsRUFBS0MsRUFBUXpELE1BTWxDLE9BQU8wRCxJLDZCQ3ZGUixJLElBQUEsTSxJQUNBLE0sSUFFQSxNLG1EQU1BRyxVQUFTQyxPQUNELHdCQUFDLFVBQUQsQ0FBS0MsTUFMRCxDQUFDLENBQUMsT0FBUyxPQUFPLE1BQVEsY0FBYyxLQUFPLElBQUksTUFBUSx5QkFBeUIsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLG9CQUFvQixNQUFRLGNBQWMsS0FBTyxJQUFJLE1BQVEsVUFBVSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsTUFBTSxNQUFRLGNBQWMsS0FBTyxJQUFJLE1BQVEsT0FBTyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsa0JBQWtCLE1BQVEsY0FBYyxLQUFPLElBQUksTUFBUSxLQUFLLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxNQUFNLE1BQVEsY0FBYyxLQUFPLElBQUksTUFBUSxNQUFNLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxLQUFLLE1BQVEsY0FBYyxLQUFPLElBQUksTUFBUSxpQkFBaUIsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLEtBQUssTUFBUSxjQUFjLEtBQU8sSUFBSSxNQUFRLE1BQU0sT0FBUywwRkFBbUcsQ0FBQyxPQUFTLGlCQUFpQixNQUFRLGNBQWMsS0FBTyxJQUFJLE1BQVEsNEJBQTRCLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxtQkFBbUIsTUFBUSxjQUFjLEtBQU8sSUFBSSxNQUFRLEtBQUssT0FBUywwRkFBbUcsQ0FBQyxPQUFTLFNBQVMsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLE9BQU8sT0FBUywwRkFBbUcsQ0FBQyxPQUFTLGdCQUFnQixNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsTUFBTSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsYUFBYSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsT0FBTyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsT0FBTyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsWUFBWSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsTUFBTSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsV0FBVyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsY0FBYyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsV0FBVyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsZUFBZSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsZUFBZSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsYUFBYSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsU0FBUyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsc0JBQXNCLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxXQUFXLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxZQUFZLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxnQkFBZ0IsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLE1BQU0sTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLEtBQUssT0FBUywwRkFBbUcsQ0FBQyxPQUFTLFlBQVksTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLDJCQUEyQixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsTUFBTSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsS0FBSyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsb0JBQW9CLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxtQkFBbUIsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLGVBQWUsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLFFBQVEsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLEtBQUssTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLGlCQUFpQixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsUUFBUSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsTUFBTSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsT0FBTyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsTUFBTSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsTUFBTSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsV0FBVyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsV0FBVyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsS0FBSyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsb0JBQW9CLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxPQUFPLE9BQVMsMEZBQW1HLENBQUMsT0FBUyx3QkFBd0IsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLGlCQUFpQixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsS0FBSyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsVUFBVSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsYUFBYSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsUUFBUSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsYUFBYSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsZUFBZSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsa0JBQWtCLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxNQUFNLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxXQUFXLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxNQUFNLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxNQUFNLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxnQ0FBZ0MsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLG1CQUFtQixNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsTUFBTSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsZUFBZSxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsa0NBQWtDLE9BQVMsMEZBQW1HLENBQUMsT0FBUyxTQUFTLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxRQUFRLE9BQVMsMEZBQW1HLENBQUMsT0FBUyx3QkFBd0IsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLGdCQUFnQixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsZ0JBQWdCLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxvQkFBb0IsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLEtBQUssTUFBUSx3QkFBeUIsS0FBTyxLQUFLLE1BQVEsS0FBSyxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsS0FBSyxNQUFRLGNBQWMsS0FBTyxLQUFLLE1BQVEsTUFBTSxPQUFTLDBGQUFtRyxDQUFDLE9BQVMsOEJBQThCLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSwyQkFBMkIsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLGNBQWMsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLHdCQUF3QixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsbUJBQW1CLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxtQkFBbUIsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLGNBQWMsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLGVBQWUsT0FBUywwRkFBbUcsQ0FBQyxPQUFTLFdBQVcsTUFBUSxjQUFjLEtBQU8sS0FBSyxNQUFRLHVCQUF1QixPQUFTLDBGQUFtRyxDQUFDLE9BQVMsb0JBQW9CLE1BQVEsY0FBYyxLQUFPLEtBQUssTUFBUSxvQkFBb0IsT0FBUyw2RkFNNStSQyxTQUFTQyxlQUFlLFU7Ozs7Ozs7O21OQ0pYaEUsRUFBRStCLEVBQVEsR0FBaUJQLEVBQUUsTUFBTUssRUFBRSxNQUFNaEMsRUFBUW9FLFNBQVMsTUFBTXBFLEVBQVFxRSxXQUFXLE1BQU1yRSxFQUFRc0UsU0FBUyxNQUFNLElBQUlDLEVBQUUsTUFBTXZELEVBQUUsTUFBTUksRUFBRSxNQUFNcEIsRUFBUXdFLFNBQVMsTUFBTSxJQUFJQyxFQUFFLE1BQU1DLEVBQUUsTUFDcE0sR0FBRyxtQkFBb0J6RCxRQUFRQSxPQUFPMEQsSUFBSSxDQUFDLElBQUlDLEVBQUUzRCxPQUFPMEQsSUFBSWhELEVBQUVpRCxFQUFFLGlCQUFpQjVDLEVBQUU0QyxFQUFFLGdCQUFnQjVFLEVBQVFvRSxTQUFTUSxFQUFFLGtCQUFrQjVFLEVBQVFxRSxXQUFXTyxFQUFFLHFCQUFxQjVFLEVBQVFzRSxTQUFTTSxFQUFFLGtCQUFrQkwsRUFBRUssRUFBRSxrQkFBa0I1RCxFQUFFNEQsRUFBRSxpQkFBaUJ4RCxFQUFFd0QsRUFBRSxxQkFBcUI1RSxFQUFRd0UsU0FBU0ksRUFBRSxrQkFBa0JILEVBQUVHLEVBQUUsY0FBY0YsRUFBRUUsRUFBRSxjQUFjLElBQUlDLEVBQUUsbUJBQW9CNUQsUUFBUUEsT0FBTzZELFNBQ3RSLFNBQVNDLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRXpFLEVBQUUsRUFBRUEsRUFBRXNELFVBQVVDLE9BQU92RCxJQUFJMEUsR0FBRyxXQUFXQyxtQkFBbUJyQixVQUFVdEQsSUFBSSxNQUFNLHlCQUF5QnlFLEVBQUUsV0FBV0MsRUFBRSxpSEFDcFUsSUFBSUUsRUFBRSxDQUFDQyxVQUFVLFdBQVcsT0FBTSxHQUFJQyxtQkFBbUIsYUFBYUMsb0JBQW9CLGFBQWFDLGdCQUFnQixjQUFjQyxFQUFFLEdBQUcsU0FBU0MsRUFBRVQsRUFBRUMsRUFBRTFFLEdBQUdtRixLQUFLQyxNQUFNWCxFQUFFVSxLQUFLRSxRQUFRWCxFQUFFUyxLQUFLRyxLQUFLTCxFQUFFRSxLQUFLSSxRQUFRdkYsR0FBRzRFLEVBQ3BOLFNBQVNZLEtBQTZCLFNBQVNDLEVBQUVoQixFQUFFQyxFQUFFMUUsR0FBR21GLEtBQUtDLE1BQU1YLEVBQUVVLEtBQUtFLFFBQVFYLEVBQUVTLEtBQUtHLEtBQUtMLEVBQUVFLEtBQUtJLFFBQVF2RixHQUFHNEUsRUFEc0dNLEVBQUUzRCxVQUFVbUUsaUJBQWlCLEdBQUdSLEVBQUUzRCxVQUFVb0UsU0FBUyxTQUFTbEIsRUFBRUMsR0FBRyxHQUFHLHFCQUFrQkQsRUFBbEIsY0FBa0JBLEtBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTW1CLE1BQU1wQixFQUFFLEtBQUtXLEtBQUtJLFFBQVFQLGdCQUFnQkcsS0FBS1YsRUFBRUMsRUFBRSxhQUFhUSxFQUFFM0QsVUFBVXNFLFlBQVksU0FBU3BCLEdBQUdVLEtBQUtJLFFBQVFULG1CQUFtQkssS0FBS1YsRUFBRSxnQkFDbmRlLEVBQUVqRSxVQUFVMkQsRUFBRTNELFVBQXNGLElBQUl1RSxFQUFFTCxFQUFFbEUsVUFBVSxJQUFJaUUsRUFBRU0sRUFBRUMsWUFBWU4sRUFBRTdGLEVBQUVrRyxFQUFFWixFQUFFM0QsV0FBV3VFLEVBQUVFLHNCQUFxQixFQUFHLElBQUlDLEVBQUUsQ0FBQ0MsUUFBUSxNQUFNQyxFQUFFOUYsT0FBT2tCLFVBQVVDLGVBQWU0RSxFQUFFLENBQUNsRixLQUFJLEVBQUdtRixLQUFJLEVBQUdDLFFBQU8sRUFBR0MsVUFBUyxHQUNoUyxTQUFTQyxFQUFFL0IsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSXlHLEVBQUV4RyxFQUFFLEdBQUd5RyxFQUFFLEtBQUtDLEVBQUUsS0FBSyxHQUFHLE1BQU1qQyxFQUFFLElBQUkrQixVQUFLLElBQVMvQixFQUFFMkIsTUFBTU0sRUFBRWpDLEVBQUUyQixVQUFLLElBQVMzQixFQUFFeEQsTUFBTXdGLEVBQUUsR0FBR2hDLEVBQUV4RCxLQUFLd0QsRUFBRXlCLEVBQUVyRyxLQUFLNEUsRUFBRStCLEtBQUtMLEVBQUU1RSxlQUFlaUYsS0FBS3hHLEVBQUV3RyxHQUFHL0IsRUFBRStCLElBQUksSUFBSUcsRUFBRXRELFVBQVVDLE9BQU8sRUFBRSxHQUFHLElBQUlxRCxFQUFFM0csRUFBRTRHLFNBQVM3RyxPQUFPLEdBQUcsRUFBRTRHLEVBQUUsQ0FBQyxJQUFJLElBQUlFLEVBQUVDLE1BQU1ILEdBQUc3RyxFQUFFLEVBQUVBLEVBQUU2RyxFQUFFN0csSUFBSStHLEVBQUUvRyxHQUFHdUQsVUFBVXZELEVBQUUsR0FBR0UsRUFBRTRHLFNBQVNDLEVBQUUsR0FBR3JDLEdBQUdBLEVBQUV1QyxhQUFhLElBQUlQLEtBQUtHLEVBQUVuQyxFQUFFdUMsa0JBQWUsSUFBUy9HLEVBQUV3RyxLQUFLeEcsRUFBRXdHLEdBQUdHLEVBQUVILElBQUksTUFBTSxDQUFDUSxTQUFTN0YsRUFBRThGLEtBQUt6QyxFQUFFdkQsSUFBSXdGLEVBQUVMLElBQUlNLEVBQUV2QixNQUFNbkYsRUFBRWtILE9BQU9sQixFQUFFQyxTQUN4VSxTQUFTa0IsRUFBRTNDLEdBQUcsTUFBTSxxQkFBa0JBLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEdBQUdBLEVBQUV3QyxXQUFXN0YsRUFBcUcsSUFBSWlHLEVBQUUsT0FBTyxTQUFTQyxFQUFFN0MsRUFBRUMsR0FBRyxNQUFNLHFCQUFrQkQsRUFBbEIsY0FBa0JBLEtBQUcsT0FBT0EsR0FBRyxNQUFNQSxFQUFFdkQsSUFBN0ssU0FBZ0J1RCxHQUFHLElBQUlDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSUQsRUFBRThDLFFBQVEsU0FBUSxTQUFTOUMsR0FBRyxPQUFPQyxFQUFFRCxNQUFtRitDLENBQU8sR0FBRy9DLEVBQUV2RCxLQUFLd0QsRUFBRStDLFNBQVMsSUFDNVcsU0FBU0MsRUFBRWpELEVBQUVDLEVBQUUxRSxFQUFFeUcsRUFBRXhHLEdBQUcsSUFBSXlHLE9BQUEsSUFBU2pDLEVBQVQsY0FBU0EsR0FBSyxjQUFjaUMsR0FBRyxZQUFZQSxJQUFFakMsRUFBRSxNQUFLLElBQUlrQyxHQUFFLEVBQUcsR0FBRyxPQUFPbEMsRUFBRWtDLEdBQUUsT0FBUSxPQUFPRCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVNDLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPbEMsRUFBRXdDLFVBQVUsS0FBSzdGLEVBQUUsS0FBS0ssRUFBRWtGLEdBQUUsR0FBSSxHQUFHQSxFQUFFLE9BQVcxRyxFQUFFQSxFQUFOMEcsRUFBRWxDLEdBQVNBLEVBQUUsS0FBS2dDLEVBQUUsSUFBSWEsRUFBRVgsRUFBRSxHQUFHRixFQUFFTSxNQUFNWSxRQUFRMUgsSUFBSUQsRUFBRSxHQUFHLE1BQU15RSxJQUFJekUsRUFBRXlFLEVBQUU4QyxRQUFRRixFQUFFLE9BQU8sS0FBS0ssRUFBRXpILEVBQUV5RSxFQUFFMUUsRUFBRSxJQUFHLFNBQVN5RSxHQUFHLE9BQU9BLE1BQUssTUFBTXhFLElBQUltSCxFQUFFbkgsS0FBS0EsRUFEL1csU0FBV3dFLEVBQUVDLEdBQUcsTUFBTSxDQUFDdUMsU0FBUzdGLEVBQUU4RixLQUFLekMsRUFBRXlDLEtBQUtoRyxJQUFJd0QsRUFBRTJCLElBQUk1QixFQUFFNEIsSUFBSWpCLE1BQU1YLEVBQUVXLE1BQU0rQixPQUFPMUMsRUFBRTBDLFFBQzRSUyxDQUFFM0gsRUFBRUQsSUFBSUMsRUFBRWlCLEtBQUt5RixHQUFHQSxFQUFFekYsTUFBTWpCLEVBQUVpQixJQUFJLElBQUksR0FBR2pCLEVBQUVpQixLQUFLcUcsUUFBUUYsRUFBRSxPQUFPLEtBQUs1QyxJQUFJQyxFQUFFbUQsS0FBSzVILElBQUksRUFBeUIsR0FBdkIwRyxFQUFFLEVBQUVGLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLElBQU9NLE1BQU1ZLFFBQVFsRCxHQUFHLElBQUksSUFBSW1DLEVBQ3pmLEVBQUVBLEVBQUVuQyxFQUFFbEIsT0FBT3FELElBQUksQ0FBUSxJQUFJRSxFQUFFTCxFQUFFYSxFQUFmWixFQUFFakMsRUFBRW1DLEdBQWVBLEdBQUdELEdBQUdlLEVBQUVoQixFQUFFaEMsRUFBRTFFLEVBQUU4RyxFQUFFN0csUUFBUSxHQUFVLG1CQUFQNkcsRUFOaEUsU0FBV3JDLEdBQUcsT0FBRyxPQUFPQSxHQUFHLHFCQUFrQkEsRUFBbEIsY0FBa0JBLElBQVMsS0FBc0MsbUJBQWpDQSxFQUFFSCxHQUFHRyxFQUFFSCxJQUFJRyxFQUFFLGVBQTBDQSxFQUFFLEtBTWxEcUQsQ0FBRXJELElBQXlCLElBQUlBLEVBQUVxQyxFQUFFaEgsS0FBSzJFLEdBQUdtQyxFQUFFLElBQUlGLEVBQUVqQyxFQUFFc0QsUUFBUUMsTUFBNkJyQixHQUFHZSxFQUExQmhCLEVBQUVBLEVBQUU5RixNQUEwQjhELEVBQUUxRSxFQUF0QjhHLEVBQUVMLEVBQUVhLEVBQUVaLEVBQUVFLEtBQWtCM0csUUFBUSxHQUFHLFdBQVd5RyxFQUFFLE1BQU1oQyxFQUFFLEdBQUdELEVBQUVtQixNQUFNcEIsRUFBRSxHQUFHLG9CQUFvQkUsRUFBRSxxQkFBcUJyRSxPQUFPeUMsS0FBSzJCLEdBQUdoQyxLQUFLLE1BQU0sSUFBSWlDLElBQUksT0FBT2lDLEVBQUUsU0FBU3NCLEVBQUV4RCxFQUFFQyxFQUFFMUUsR0FBRyxHQUFHLE1BQU15RSxFQUFFLE9BQU9BLEVBQUUsSUFBSWdDLEVBQUUsR0FBR3hHLEVBQUUsRUFBbUQsT0FBakR5SCxFQUFFakQsRUFBRWdDLEVBQUUsR0FBRyxJQUFHLFNBQVNoQyxHQUFHLE9BQU9DLEVBQUU1RSxLQUFLRSxFQUFFeUUsRUFBRXhFLFFBQWN3RyxFQUMxWixTQUFTeUIsRUFBRXpELEdBQUcsSUFBSSxJQUFJQSxFQUFFMEQsUUFBUSxDQUFDLElBQUl6RCxFQUFFRCxFQUFFMkQsUUFBUTFELEVBQUVBLElBQUlELEVBQUUwRCxRQUFRLEVBQUUxRCxFQUFFMkQsUUFBUTFELEVBQUVBLEVBQUUyRCxNQUFLLFNBQVMzRCxHQUFHLElBQUlELEVBQUUwRCxVQUFVekQsRUFBRUEsRUFBRTRELFFBQVE3RCxFQUFFMEQsUUFBUSxFQUFFMUQsRUFBRTJELFFBQVExRCxNQUFJLFNBQVNBLEdBQUcsSUFBSUQsRUFBRTBELFVBQVUxRCxFQUFFMEQsUUFBUSxFQUFFMUQsRUFBRTJELFFBQVExRCxNQUFLLEdBQUcsSUFBSUQsRUFBRTBELFFBQVEsT0FBTzFELEVBQUUyRCxRQUFRLE1BQU0zRCxFQUFFMkQsUUFBUyxJQUFJRyxFQUFFLENBQUNyQyxRQUFRLE1BQU0sU0FBU3NDLElBQUksSUFBSS9ELEVBQUU4RCxFQUFFckMsUUFBUSxHQUFHLE9BQU96QixFQUFFLE1BQU1tQixNQUFNcEIsRUFBRSxNQUFNLE9BQU9DLEVBQUUsSUFBSWdFLEVBQUUsQ0FBQ0MsdUJBQXVCSCxFQUFFSSx3QkFBd0IsQ0FBQ0MsV0FBVyxHQUFHQyxrQkFBa0I1QyxFQUFFNkMscUJBQXFCLENBQUM1QyxTQUFRLEdBQUloRSxPQUFPdEMsR0FDamVILEVBQVFzSixTQUFTLENBQUN2RyxJQUFJeUYsRUFBRXJGLFFBQVEsU0FBUzZCLEVBQUVDLEVBQUUxRSxHQUFHaUksRUFBRXhELEdBQUUsV0FBV0MsRUFBRXNFLE1BQU03RCxLQUFLN0IsYUFBWXRELElBQUlpSixNQUFNLFNBQVN4RSxHQUFHLElBQUlDLEVBQUUsRUFBdUIsT0FBckJ1RCxFQUFFeEQsR0FBRSxXQUFXQyxPQUFhQSxHQUFHd0UsUUFBUSxTQUFTekUsR0FBRyxPQUFPd0QsRUFBRXhELEdBQUUsU0FBU0EsR0FBRyxPQUFPQSxNQUFLLElBQUkwRSxLQUFLLFNBQVMxRSxHQUFHLElBQUkyQyxFQUFFM0MsR0FBRyxNQUFNbUIsTUFBTXBCLEVBQUUsTUFBTSxPQUFPQyxJQUFJaEYsRUFBUTJKLFVBQVVsRSxFQUFFekYsRUFBUTRKLGNBQWM1RCxFQUFFaEcsRUFBUTZKLG1EQUFtRGIsRUFDaFhoSixFQUFROEosYUFBYSxTQUFTOUUsRUFBRUMsRUFBRTFFLEdBQUcsR0FBRyxNQUFPeUUsRUFBYyxNQUFNbUIsTUFBTXBCLEVBQUUsSUFBSUMsSUFBSSxJQUFJZ0MsRUFBRTdHLEVBQUUsR0FBRzZFLEVBQUVXLE9BQU9uRixFQUFFd0UsRUFBRXZELElBQUl3RixFQUFFakMsRUFBRTRCLElBQUlNLEVBQUVsQyxFQUFFMEMsT0FBTyxHQUFHLE1BQU16QyxFQUFFLENBQW9FLFFBQW5FLElBQVNBLEVBQUUyQixNQUFNSyxFQUFFaEMsRUFBRTJCLElBQUlNLEVBQUVWLEVBQUVDLGNBQVMsSUFBU3hCLEVBQUV4RCxNQUFNakIsRUFBRSxHQUFHeUUsRUFBRXhELEtBQVF1RCxFQUFFeUMsTUFBTXpDLEVBQUV5QyxLQUFLRixhQUFhLElBQUlKLEVBQUVuQyxFQUFFeUMsS0FBS0YsYUFBYSxJQUFJRixLQUFLcEMsRUFBRXlCLEVBQUVyRyxLQUFLNEUsRUFBRW9DLEtBQUtWLEVBQUU1RSxlQUFlc0YsS0FBS0wsRUFBRUssUUFBRyxJQUFTcEMsRUFBRW9DLFNBQUksSUFBU0YsRUFBRUEsRUFBRUUsR0FBR3BDLEVBQUVvQyxJQUFJLElBQUlBLEVBQUV4RCxVQUFVQyxPQUFPLEVBQUUsR0FBRyxJQUFJdUQsRUFBRUwsRUFBRUksU0FBUzdHLE9BQU8sR0FBRyxFQUFFOEcsRUFBRSxDQUFDRixFQUFFRyxNQUFNRCxHQUFHLElBQUksSUFBSS9HLEVBQUUsRUFBRUEsRUFBRStHLEVBQUUvRyxJQUFJNkcsRUFBRTdHLEdBQUd1RCxVQUFVdkQsRUFBRSxHQUFHMEcsRUFBRUksU0FBU0QsRUFBRSxNQUFNLENBQUNLLFNBQVM3RixFQUFFOEYsS0FBS3pDLEVBQUV5QyxLQUN4ZmhHLElBQUlqQixFQUFFb0csSUFBSUssRUFBRXRCLE1BQU1xQixFQUFFVSxPQUFPUixJQUFJbEgsRUFBUStKLGNBQWMsU0FBUy9FLEVBQUVDLEdBQThLLFlBQTNLLElBQVNBLElBQUlBLEVBQUUsT0FBTUQsRUFBRSxDQUFDd0MsU0FBU3hHLEVBQUVnSixzQkFBc0IvRSxFQUFFZ0YsY0FBY2pGLEVBQUVrRixlQUFlbEYsRUFBRW1GLGFBQWEsRUFBRUMsU0FBUyxLQUFLQyxTQUFTLE9BQVFELFNBQVMsQ0FBQzVDLFNBQVNqRCxFQUFFK0YsU0FBU3RGLEdBQVVBLEVBQUVxRixTQUFTckYsR0FBR2hGLEVBQVF1SyxjQUFjeEQsRUFBRS9HLEVBQVF3SyxjQUFjLFNBQVN4RixHQUFHLElBQUlDLEVBQUU4QixFQUFFckYsS0FBSyxLQUFLc0QsR0FBWSxPQUFUQyxFQUFFd0MsS0FBS3pDLEVBQVNDLEdBQUdqRixFQUFReUssVUFBVSxXQUFXLE1BQU0sQ0FBQ2hFLFFBQVEsT0FBT3pHLEVBQVEwSyxXQUFXLFNBQVMxRixHQUFHLE1BQU0sQ0FBQ3dDLFNBQVNwRyxFQUFFNEMsT0FBT2dCLElBQUloRixFQUFRMkssZUFBZWhELEVBQzNlM0gsRUFBUTRLLEtBQUssU0FBUzVGLEdBQUcsTUFBTSxDQUFDd0MsU0FBUzlDLEVBQUVtRyxTQUFTLENBQUNuQyxTQUFTLEVBQUVDLFFBQVEzRCxHQUFHOEYsTUFBTXJDLElBQUl6SSxFQUFRK0ssS0FBSyxTQUFTL0YsRUFBRUMsR0FBRyxNQUFNLENBQUN1QyxTQUFTL0MsRUFBRWdELEtBQUt6QyxFQUFFZ0csYUFBUSxJQUFTL0YsRUFBRSxLQUFLQSxJQUFJakYsRUFBUWlMLFlBQVksU0FBU2pHLEVBQUVDLEdBQUcsT0FBTzhELElBQUlrQyxZQUFZakcsRUFBRUMsSUFBSWpGLEVBQVFrTCxXQUFXLFNBQVNsRyxFQUFFQyxHQUFHLE9BQU84RCxJQUFJbUMsV0FBV2xHLEVBQUVDLElBQUlqRixFQUFRbUwsY0FBYyxhQUFhbkwsRUFBUW9MLFVBQVUsU0FBU3BHLEVBQUVDLEdBQUcsT0FBTzhELElBQUlxQyxVQUFVcEcsRUFBRUMsSUFBSWpGLEVBQVFxTCxvQkFBb0IsU0FBU3JHLEVBQUVDLEVBQUUxRSxHQUFHLE9BQU93SSxJQUFJc0Msb0JBQW9CckcsRUFBRUMsRUFBRTFFLElBQzljUCxFQUFRc0wsZ0JBQWdCLFNBQVN0RyxFQUFFQyxHQUFHLE9BQU84RCxJQUFJdUMsZ0JBQWdCdEcsRUFBRUMsSUFBSWpGLEVBQVF1TCxRQUFRLFNBQVN2RyxFQUFFQyxHQUFHLE9BQU84RCxJQUFJd0MsUUFBUXZHLEVBQUVDLElBQUlqRixFQUFRd0wsV0FBVyxTQUFTeEcsRUFBRUMsRUFBRTFFLEdBQUcsT0FBT3dJLElBQUl5QyxXQUFXeEcsRUFBRUMsRUFBRTFFLElBQUlQLEVBQVF5TCxPQUFPLFNBQVN6RyxHQUFHLE9BQU8rRCxJQUFJMEMsT0FBT3pHLElBQUloRixFQUFRMEwsU0FBUyxTQUFTMUcsR0FBRyxPQUFPK0QsSUFBSTJDLFNBQVMxRyxJQUFJaEYsRUFBUTJMLFFBQVEsVSw4QkNwQnJULFNBQVNDLElBRVAsR0FDNEMsb0JBQW5DQyxnQ0FDNEMsbUJBQTVDQSwrQkFBK0JELFNBRnhDLENBTUlFLEVBVUosSUFFRUQsK0JBQStCRCxTQUFTQSxHQUN4QyxNQUFPdEksR0FHUHlJLFFBQVFDLE1BQU0xSSxLQU9oQnNJLEdBQ0EzTCxFQUFPRCxRQUFVa0MsRUFBUSxJOzs7Ozs7OzttTkN2QlYrSixFQUFHL0osRUFBUSxHQUFTNUIsRUFBRTRCLEVBQVEsR0FBaUJsQixFQUFFa0IsRUFBUSxHQUFhLFNBQVNtRyxFQUFFckQsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFekUsRUFBRSxFQUFFQSxFQUFFc0QsVUFBVUMsT0FBT3ZELElBQUkwRSxHQUFHLFdBQVdDLG1CQUFtQnJCLFVBQVV0RCxJQUFJLE1BQU0seUJBQXlCeUUsRUFBRSxXQUFXQyxFQUFFLGlIQUFpSCxJQUFJZ0gsRUFBRyxNQUFNOUYsTUFBTWtDLEVBQUUsTUFBTSxJQUFJNkQsRUFBRyxJQUFJQyxJQUFJQyxFQUFHLEdBQUcsU0FBU0MsRUFBR3JILEVBQUVDLEdBQUdxSCxFQUFHdEgsRUFBRUMsR0FBR3FILEVBQUd0SCxFQUFFLFVBQVVDLEdBQzNlLFNBQVNxSCxFQUFHdEgsRUFBRUMsR0FBVyxJQUFSbUgsRUFBR3BILEdBQUdDLEVBQU1ELEVBQUUsRUFBRUEsRUFBRUMsRUFBRW5CLE9BQU9rQixJQUFJa0gsRUFBR0ssSUFBSXRILEVBQUVELElBQ3pELElBQUl3SCxJQUFLLG9CQUFxQkMsYUFBUSxJQUFxQkEsT0FBT3ZJLGVBQVUsSUFBcUJ1SSxPQUFPdkksU0FBU3FHLGVBQWVtQyxFQUFHLDhWQUE4VkMsRUFBRy9MLE9BQU9rQixVQUFVQyxlQUNyZjZLLEVBQUcsR0FBR0MsRUFBRyxHQUNULFNBQVNDLEVBQUc5SCxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxHQUFHLE1BQU95RSxHQURnRyxTQUFZRCxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxHQUFHLE9BQU9ELEdBQUcsSUFBSUEsRUFBRWtILEtBQUssT0FBTSxFQUFHLGdCQUFjeEMsRUFBZCxjQUFjQSxJQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHekUsSUFBYyxPQUFPRCxHQUFTQSxFQUFFd00sZ0JBQW1ELFdBQW5DL0gsRUFBRUEsRUFBRWdJLGNBQWNDLE1BQU0sRUFBRSxLQUFzQixVQUFVakksR0FBRSxRQUFRLE9BQU0sR0FDL1RrSSxDQUFHbEksRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUdBLEVBQUUsT0FBTSxFQUFHLEdBQUcsT0FBT0QsRUFBRSxPQUFPQSxFQUFFa0gsTUFBTSxLQUFLLEVBQUUsT0FBT3hDLEVBQUUsS0FBSyxFQUFFLE9BQU0sSUFBS0EsRUFBRSxLQUFLLEVBQUUsT0FBT2tJLE1BQU1sSSxHQUFHLEtBQUssRUFBRSxPQUFPa0ksTUFBTWxJLElBQUksRUFBRUEsRUFBRSxPQUFNLEVBQUcsU0FBU08sRUFBRVIsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxFQUFFSyxFQUFFRixHQUFHekIsS0FBS3FILGdCQUFnQixJQUFJOUgsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUVTLEtBQUswSCxjQUFjNU0sRUFBRWtGLEtBQUsySCxtQkFBbUJyRyxFQUFFdEIsS0FBSzRILGdCQUFnQi9NLEVBQUVtRixLQUFLNkgsYUFBYXZJLEVBQUVVLEtBQUsrQixLQUFLeEMsRUFBRVMsS0FBSzhILFlBQVluRyxFQUFFM0IsS0FBSytILGtCQUFrQnRHLEVBQUUsSUFBSXBCLEVBQUUsR0FDbmIsdUlBQXVJN0MsTUFBTSxLQUFLQyxTQUFRLFNBQVM2QixHQUFHZSxFQUFFZixHQUFHLElBQUlRLEVBQUVSLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0Isa0JBQWtCLENBQUMsWUFBWSxTQUFTLENBQUMsVUFBVSxPQUFPLENBQUMsWUFBWSxlQUFlN0IsU0FBUSxTQUFTNkIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUdlLEVBQUVkLEdBQUcsSUFBSU8sRUFBRVAsRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBUzdCLFNBQVEsU0FBUzZCLEdBQUdlLEVBQUVmLEdBQUcsSUFBSVEsRUFBRVIsRUFBRSxHQUFFLEVBQUdBLEVBQUVnSSxjQUFjLE1BQUssR0FBRyxNQUN2ZSxDQUFDLGNBQWMsNEJBQTRCLFlBQVksaUJBQWlCN0osU0FBUSxTQUFTNkIsR0FBR2UsRUFBRWYsR0FBRyxJQUFJUSxFQUFFUixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSw4T0FBOE85QixNQUFNLEtBQUtDLFNBQVEsU0FBUzZCLEdBQUdlLEVBQUVmLEdBQUcsSUFBSVEsRUFBRVIsRUFBRSxHQUFFLEVBQUdBLEVBQUVnSSxjQUFjLE1BQUssR0FBRyxNQUNyYixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVk3SixTQUFRLFNBQVM2QixHQUFHZSxFQUFFZixHQUFHLElBQUlRLEVBQUVSLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsVUFBVSxZQUFZN0IsU0FBUSxTQUFTNkIsR0FBR2UsRUFBRWYsR0FBRyxJQUFJUSxFQUFFUixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFPLFFBQVE3QixTQUFRLFNBQVM2QixHQUFHZSxFQUFFZixHQUFHLElBQUlRLEVBQUVSLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsVUFBVSxTQUFTN0IsU0FBUSxTQUFTNkIsR0FBR2UsRUFBRWYsR0FBRyxJQUFJUSxFQUFFUixFQUFFLEdBQUUsRUFBR0EsRUFBRWdJLGNBQWMsTUFBSyxHQUFHLE1BQU0sSUFBSVUsRUFBRyxnQkFBZ0IsU0FBU0MsRUFBRzNJLEdBQUcsT0FBT0EsRUFBRSxHQUFHNEksY0FJM1ksU0FBU0MsRUFBRzdJLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLElBQUl3RyxFQUFFakIsRUFBRWhFLGVBQWVrRCxHQUFHYyxFQUFFZCxHQUFHLE1BQVcsT0FBTytCLEVBQUUsSUFBSUEsRUFBRVMsTUFBS2pILElBQU8sRUFBRXlFLEVBQUVuQixTQUFTLE1BQU1tQixFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLFFBQWE2SCxFQUFHN0gsRUFBRTFFLEVBQUV5RyxFQUFFeEcsS0FBS0QsRUFBRSxNQUFNQyxHQUFHLE9BQU93RyxFQVJwTCxTQUFZaEMsR0FBRyxRQUFHMkgsRUFBR3RNLEtBQUt3TSxFQUFHN0gsS0FBZTJILEVBQUd0TSxLQUFLdU0sRUFBRzVILEtBQWUwSCxFQUFHb0IsS0FBSzlJLEdBQVU2SCxFQUFHN0gsSUFBRyxHQUFHNEgsRUFBRzVILElBQUcsR0FBUyxJQVFzRStJLENBQUc5SSxLQUFLLE9BQU8xRSxFQUFFeUUsRUFBRWdKLGdCQUFnQi9JLEdBQUdELEVBQUVpSixhQUFhaEosRUFBRSxHQUFHMUUsSUFBSXlHLEVBQUVzRyxnQkFBZ0J0SSxFQUFFZ0MsRUFBRXVHLGNBQWMsT0FBT2hOLEVBQUUsSUFBSXlHLEVBQUVTLE1BQVEsR0FBR2xILEdBQUcwRSxFQUFFK0IsRUFBRW9HLGNBQWM1TSxFQUFFd0csRUFBRXFHLG1CQUFtQixPQUFPOU0sRUFBRXlFLEVBQUVnSixnQkFBZ0IvSSxJQUFhMUUsRUFBRSxLQUFYeUcsRUFBRUEsRUFBRVMsT0FBYyxJQUFJVCxJQUFHLElBQUt6RyxFQUFFLEdBQUcsR0FBR0EsRUFBRUMsRUFBRXdFLEVBQUVrSixlQUFlMU4sRUFBRXlFLEVBQUUxRSxHQUFHeUUsRUFBRWlKLGFBQWFoSixFQUFFMUUsTUFINWQsMGpDQUEwakMyQyxNQUFNLEtBQUtDLFNBQVEsU0FBUzZCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRThDLFFBQVE0RixFQUN6bUNDLEdBQUk1SCxFQUFFZCxHQUFHLElBQUlPLEVBQUVQLEVBQUUsR0FBRSxFQUFHRCxFQUFFLE1BQUssR0FBRyxNQUFNLDJFQUEyRTlCLE1BQU0sS0FBS0MsU0FBUSxTQUFTNkIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFOEMsUUFBUTRGLEVBQUdDLEdBQUk1SCxFQUFFZCxHQUFHLElBQUlPLEVBQUVQLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixHQUFHLE1BQU0sQ0FBQyxXQUFXLFdBQVcsYUFBYTdCLFNBQVEsU0FBUzZCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRThDLFFBQVE0RixFQUFHQyxHQUFJNUgsRUFBRWQsR0FBRyxJQUFJTyxFQUFFUCxFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsR0FBRyxNQUFNLENBQUMsV0FBVyxlQUFlN0IsU0FBUSxTQUFTNkIsR0FBR2UsRUFBRWYsR0FBRyxJQUFJUSxFQUFFUixFQUFFLEdBQUUsRUFBR0EsRUFBRWdJLGNBQWMsTUFBSyxHQUFHLE1BQy9jakgsRUFBRW9JLFVBQVUsSUFBSTNJLEVBQUUsWUFBWSxHQUFFLEVBQUcsYUFBYSxnQ0FBK0IsR0FBRyxHQUFJLENBQUMsTUFBTSxPQUFPLFNBQVMsY0FBY3JDLFNBQVEsU0FBUzZCLEdBQUdlLEVBQUVmLEdBQUcsSUFBSVEsRUFBRVIsRUFBRSxHQUFFLEVBQUdBLEVBQUVnSSxjQUFjLE1BQUssR0FBRyxNQUV6TCxJQUFJb0IsRUFBR25DLEVBQUdwQyxtREFBbUR3RSxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFDaE4sR0FBRyxtQkFBb0JwTyxRQUFRQSxPQUFPMEQsSUFBSSxDQUFDLElBQUlxQixFQUFFL0UsT0FBTzBELElBQUkwSixFQUFHckksRUFBRSxpQkFBaUJzSSxFQUFHdEksRUFBRSxnQkFBZ0J1SSxFQUFHdkksRUFBRSxrQkFBa0J3SSxFQUFHeEksRUFBRSxxQkFBcUJ5SSxFQUFHekksRUFBRSxrQkFBa0IwSSxFQUFHMUksRUFBRSxrQkFBa0IySSxFQUFHM0ksRUFBRSxpQkFBaUI0SSxFQUFHNUksRUFBRSxxQkFBcUI2SSxFQUFHN0ksRUFBRSxrQkFBa0I4SSxFQUFHOUksRUFBRSx1QkFBdUIrSSxFQUFHL0ksRUFBRSxjQUFjZ0osRUFBR2hKLEVBQUUsY0FBY2lKLEVBQUdqSixFQUFFLGVBQWVBLEVBQUUsZUFBZWtKLEVBQUdsSixFQUFFLG1CQUFtQm1KLEVBQUduSixFQUFFLDBCQUEwQm9KLEVBQUdwSixFQUFFLG1CQUFtQnFKLEVBQUdySixFQUFFLHVCQUN4YyxJQUFtTHNKLEVBQS9LQyxFQUFHLG1CQUFvQnRPLFFBQVFBLE9BQU82RCxTQUFTLFNBQVMwSyxFQUFHeEssR0FBRyxPQUFHLE9BQU9BLEdBQUcscUJBQWtCQSxFQUFsQixjQUFrQkEsSUFBUyxLQUF3QyxtQkFBbkNBLEVBQUV1SyxHQUFJdkssRUFBRXVLLElBQUt2SyxFQUFFLGVBQTBDQSxFQUFFLEtBQVksU0FBU3lLLEVBQUd6SyxHQUFHLFFBQUcsSUFBU3NLLEVBQUcsSUFBSSxNQUFNbkosUUFBUyxNQUFNNUYsR0FBRyxJQUFJMEUsRUFBRTFFLEVBQUVtUCxNQUFNQyxPQUFPQyxNQUFNLGdCQUFnQk4sRUFBR3JLLEdBQUdBLEVBQUUsSUFBSSxHQUFHLE1BQU0sS0FBS3FLLEVBQUd0SyxFQUFFLElBQUk2SyxHQUFHLEVBQ2pVLFNBQVNDLEVBQUc5SyxFQUFFQyxHQUFHLElBQUlELEdBQUc2SyxFQUFHLE1BQU0sR0FBR0EsR0FBRyxFQUFHLElBQUl0UCxFQUFFNEYsTUFBTTRKLGtCQUFrQjVKLE1BQU00Six1QkFBa0IsRUFBTyxJQUFJLEdBQUc5SyxFQUFFLEdBQUdBLEVBQUUsV0FBVyxNQUFNa0IsU0FBVXZGLE9BQU9DLGVBQWVvRSxFQUFFbkQsVUFBVSxRQUFRLENBQUNrTyxJQUFJLFdBQVcsTUFBTTdKLFdBQVksZ0NBQWtCOEosUUFBbEIsY0FBa0JBLFdBQVNBLFFBQVFDLFVBQVUsQ0FBQyxJQUFJRCxRQUFRQyxVQUFVakwsRUFBRSxJQUFJLE1BQU1nQyxHQUFHLElBQUl6RyxFQUFFeUcsRUFBRWdKLFFBQVFDLFVBQVVsTCxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJQSxFQUFFNUUsT0FBTyxNQUFNNEcsR0FBR3pHLEVBQUV5RyxFQUFFakMsRUFBRTNFLEtBQUs0RSxFQUFFbkQsZUFBZSxDQUFDLElBQUksTUFBTXFFLFFBQVMsTUFBTWMsR0FBR3pHLEVBQUV5RyxFQUFFakMsS0FBSyxNQUFNaUMsR0FBRyxHQUFHQSxHQUFHekcsR0FBRyxpQkFBa0J5RyxFQUFFeUksTUFBTSxDQUFDLElBQUksSUFBSTFJLEVBQUVDLEVBQUV5SSxNQUFNeE0sTUFBTSxNQUNuZm1FLEVBQUU3RyxFQUFFa1AsTUFBTXhNLE1BQU0sTUFBTWlFLEVBQUVILEVBQUVsRCxPQUFPLEVBQUVvRCxFQUFFRyxFQUFFdkQsT0FBTyxFQUFFLEdBQUdxRCxHQUFHLEdBQUdELEdBQUdGLEVBQUVHLEtBQUtFLEVBQUVILElBQUlBLElBQUksS0FBSyxHQUFHQyxHQUFHLEdBQUdELEVBQUVDLElBQUlELElBQUksR0FBR0YsRUFBRUcsS0FBS0UsRUFBRUgsR0FBRyxDQUFDLEdBQUcsSUFBSUMsR0FBRyxJQUFJRCxFQUFHLEdBQUcsR0FBR0MsSUFBUSxJQUFKRCxHQUFTRixFQUFFRyxLQUFLRSxFQUFFSCxHQUFHLE1BQU0sS0FBS0YsRUFBRUcsR0FBR1csUUFBUSxXQUFXLGNBQWMsR0FBR1gsR0FBRyxHQUFHRCxHQUFHLFFBRDNILFFBQzJJMkksR0FBRyxFQUFHMUosTUFBTTRKLGtCQUFrQnhQLEVBQUUsT0FBT3lFLEVBQUVBLEVBQUVBLEVBQUVtTCxhQUFhbkwsRUFBRXZFLEtBQUssSUFBSWdQLEVBQUd6SyxHQUFHLEdBQzdULFNBQVNvTCxFQUFHcEwsR0FBRyxPQUFPQSxFQUFFcUwsS0FBSyxLQUFLLEVBQUUsT0FBT1osRUFBR3pLLEVBQUV5QyxNQUFNLEtBQUssR0FBRyxPQUFPZ0ksRUFBRyxRQUFRLEtBQUssR0FBRyxPQUFPQSxFQUFHLFlBQVksS0FBSyxHQUFHLE9BQU9BLEVBQUcsZ0JBQWdCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQU96SyxFQUFFOEssRUFBRzlLLEVBQUV5QyxNQUFLLEdBQU0sS0FBSyxHQUFHLE9BQU96QyxFQUFFOEssRUFBRzlLLEVBQUV5QyxLQUFLekQsUUFBTyxHQUFNLEtBQUssR0FBRyxPQUFPZ0IsRUFBRThLLEVBQUc5SyxFQUFFeUMsS0FBSzZJLFNBQVEsR0FBTSxLQUFLLEVBQUUsT0FBT3RMLEVBQUU4SyxFQUFHOUssRUFBRXlDLE1BQUssR0FBTSxRQUFRLE1BQU0sSUFDOVQsU0FBUzhJLEVBQUd2TCxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxtQkFBb0JBLEVBQUUsT0FBT0EsRUFBRW1MLGFBQWFuTCxFQUFFdkUsTUFBTSxLQUFLLEdBQUcsaUJBQWtCdUUsRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEdBQUcsS0FBS3VKLEVBQUcsTUFBTSxXQUFXLEtBQUtELEVBQUcsTUFBTSxTQUFTLEtBQUtHLEVBQUcsTUFBTSxXQUFXLEtBQUtELEVBQUcsTUFBTSxhQUFhLEtBQUtLLEVBQUcsTUFBTSxXQUFXLEtBQUtDLEVBQUcsTUFBTSxlQUFlLEdBQUcscUJBQWtCOUosRUFBbEIsY0FBa0JBLElBQUUsT0FBT0EsRUFBRXdDLFVBQVUsS0FBS21ILEVBQUcsT0FBTzNKLEVBQUVtTCxhQUFhLFdBQVcsWUFBWSxLQUFLekIsRUFBRyxPQUFPMUosRUFBRXNGLFNBQVM2RixhQUFhLFdBQVcsWUFBWSxLQUFLdkIsRUFBRyxJQUFJM0osRUFBRUQsRUFBRWhCLE9BQ25kLE9BRDBkaUIsRUFBRUEsRUFBRWtMLGFBQWFsTCxFQUFFeEUsTUFBTSxHQUM1ZXVFLEVBQUVtTCxjQUFjLEtBQUtsTCxFQUFFLGNBQWNBLEVBQUUsSUFBSSxjQUFjLEtBQUs4SixFQUFHLE9BQU93QixFQUFHdkwsRUFBRXlDLE1BQU0sS0FBS3dILEVBQUcsT0FBT3NCLEVBQUd2TCxFQUFFc0wsU0FBUyxLQUFLdEIsRUFBRy9KLEVBQUVELEVBQUU2RixTQUFTN0YsRUFBRUEsRUFBRThGLE1BQU0sSUFBSSxPQUFPeUYsRUFBR3ZMLEVBQUVDLElBQUksTUFBTTFFLEtBQUssT0FBTyxLQUFLLFNBQVNpUSxFQUFHeEwsR0FBRyxnQkFBY0EsRUFBZCxjQUFjQSxJQUFHLElBQUssVUFBVSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFlBQVksT0FBT0EsRUFBRSxRQUFRLE1BQU0sSUFBSSxTQUFTeUwsRUFBR3pMLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXlDLEtBQUssT0FBT3pDLEVBQUVBLEVBQUUwTCxXQUFXLFVBQVUxTCxFQUFFZ0ksZ0JBQWdCLGFBQWEvSCxHQUFHLFVBQVVBLEdBRTFaLFNBQVMwTCxFQUFHM0wsR0FBR0EsRUFBRTRMLGdCQUFnQjVMLEVBQUU0TCxjQUR2RCxTQUFZNUwsR0FBRyxJQUFJQyxFQUFFd0wsRUFBR3pMLEdBQUcsVUFBVSxRQUFRekUsRUFBRUssT0FBT2lRLHlCQUF5QjdMLEVBQUVzQixZQUFZeEUsVUFBVW1ELEdBQUd6RSxFQUFFLEdBQUd3RSxFQUFFQyxHQUFHLElBQUlELEVBQUVqRCxlQUFla0QsU0FBSSxJQUFxQjFFLEdBQUcsbUJBQW9CQSxFQUFFUSxLQUFLLG1CQUFvQlIsRUFBRXlQLElBQUksQ0FBQyxJQUFJaEosRUFBRXpHLEVBQUVRLElBQUlzRyxFQUFFOUcsRUFBRXlQLElBQWlMLE9BQTdLcFAsT0FBT0MsZUFBZW1FLEVBQUVDLEVBQUUsQ0FBQzZMLGNBQWEsRUFBRy9QLElBQUksV0FBVyxPQUFPaUcsRUFBRTNHLEtBQUtxRixPQUFPc0ssSUFBSSxTQUFTaEwsR0FBR3hFLEVBQUUsR0FBR3dFLEVBQUVxQyxFQUFFaEgsS0FBS3FGLEtBQUtWLE1BQU1wRSxPQUFPQyxlQUFlbUUsRUFBRUMsRUFBRSxDQUFDbkUsV0FBV1AsRUFBRU8sYUFBbUIsQ0FBQ2lRLFNBQVMsV0FBVyxPQUFPdlEsR0FBR3dRLFNBQVMsU0FBU2hNLEdBQUd4RSxFQUFFLEdBQUd3RSxHQUFHaU0sYUFBYSxXQUFXak0sRUFBRTRMLGNBQ3hmLFlBQVk1TCxFQUFFQyxNQUF1RGlNLENBQUdsTSxJQUFJLFNBQVNtTSxFQUFHbk0sR0FBRyxJQUFJQSxFQUFFLE9BQU0sRUFBRyxJQUFJQyxFQUFFRCxFQUFFNEwsY0FBYyxJQUFJM0wsRUFBRSxPQUFNLEVBQUcsSUFBSTFFLEVBQUUwRSxFQUFFOEwsV0FBZXZRLEVBQUUsR0FBcUQsT0FBbER3RSxJQUFJeEUsRUFBRWlRLEVBQUd6TCxHQUFHQSxFQUFFb00sUUFBUSxPQUFPLFFBQVFwTSxFQUFFN0QsUUFBTzZELEVBQUV4RSxLQUFhRCxJQUFHMEUsRUFBRStMLFNBQVNoTSxJQUFHLEdBQU8sU0FBU3FNLEdBQUdyTSxHQUF3RCxRQUFHLEtBQXhEQSxFQUFFQSxJQUFJLG9CQUFxQmQsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPYyxFQUFFc00sZUFBZXRNLEVBQUV1TSxLQUFLLE1BQU10TSxHQUFHLE9BQU9ELEVBQUV1TSxNQUMvWixTQUFTQyxHQUFHeE0sRUFBRUMsR0FBRyxJQUFJMUUsRUFBRTBFLEVBQUVtTSxRQUFRLE9BQU85USxFQUFFLEdBQUcyRSxFQUFFLENBQUN3TSxvQkFBZSxFQUFPQyxrQkFBYSxFQUFPdlEsV0FBTSxFQUFPaVEsUUFBUSxNQUFNN1EsRUFBRUEsRUFBRXlFLEVBQUUyTSxjQUFjQyxpQkFBaUIsU0FBU0MsR0FBRzdNLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUUsTUFBTTBFLEVBQUV5TSxhQUFhLEdBQUd6TSxFQUFFeU0sYUFBYWxSLEVBQUUsTUFBTXlFLEVBQUVtTSxRQUFRbk0sRUFBRW1NLFFBQVFuTSxFQUFFd00sZUFBZWxSLEVBQUVpUSxFQUFHLE1BQU12TCxFQUFFOUQsTUFBTThELEVBQUU5RCxNQUFNWixHQUFHeUUsRUFBRTJNLGNBQWMsQ0FBQ0MsZUFBZXBSLEVBQUVzUixhQUFhdlIsRUFBRXdSLFdBQVcsYUFBYTlNLEVBQUV3QyxNQUFNLFVBQVV4QyxFQUFFd0MsS0FBSyxNQUFNeEMsRUFBRW1NLFFBQVEsTUFBTW5NLEVBQUU5RCxPQUFPLFNBQVM2USxHQUFHaE4sRUFBRUMsR0FBZSxPQUFaQSxFQUFFQSxFQUFFbU0sVUFBaUJ2RCxFQUFHN0ksRUFBRSxVQUFVQyxHQUFFLEdBQzNkLFNBQVNnTixHQUFHak4sRUFBRUMsR0FBRytNLEdBQUdoTixFQUFFQyxHQUFHLElBQUkxRSxFQUFFaVEsRUFBR3ZMLEVBQUU5RCxPQUFPWCxFQUFFeUUsRUFBRXdDLEtBQUssR0FBRyxNQUFNbEgsRUFBSyxXQUFXQyxHQUFNLElBQUlELEdBQUcsS0FBS3lFLEVBQUU3RCxPQUFPNkQsRUFBRTdELE9BQU9aLEtBQUV5RSxFQUFFN0QsTUFBTSxHQUFHWixHQUFPeUUsRUFBRTdELFFBQVEsR0FBR1osSUFBSXlFLEVBQUU3RCxNQUFNLEdBQUdaLFFBQVEsR0FBRyxXQUFXQyxHQUFHLFVBQVVBLEVBQThCLFlBQTNCd0UsRUFBRWdKLGdCQUFnQixTQUFnQi9JLEVBQUVsRCxlQUFlLFNBQVNtUSxHQUFHbE4sRUFBRUMsRUFBRXdDLEtBQUtsSCxHQUFHMEUsRUFBRWxELGVBQWUsaUJBQWlCbVEsR0FBR2xOLEVBQUVDLEVBQUV3QyxLQUFLK0ksRUFBR3ZMLEVBQUV5TSxlQUFlLE1BQU16TSxFQUFFbU0sU0FBUyxNQUFNbk0sRUFBRXdNLGlCQUFpQnpNLEVBQUV5TSxpQkFBaUJ4TSxFQUFFd00sZ0JBQ25aLFNBQVNVLEdBQUduTixFQUFFQyxFQUFFMUUsR0FBRyxHQUFHMEUsRUFBRWxELGVBQWUsVUFBVWtELEVBQUVsRCxlQUFlLGdCQUFnQixDQUFDLElBQUl2QixFQUFFeUUsRUFBRXdDLEtBQUssS0FBSyxXQUFXakgsR0FBRyxVQUFVQSxRQUFHLElBQVN5RSxFQUFFOUQsT0FBTyxPQUFPOEQsRUFBRTlELE9BQU8sT0FBTzhELEVBQUUsR0FBR0QsRUFBRTJNLGNBQWNHLGFBQWF2UixHQUFHMEUsSUFBSUQsRUFBRTdELFFBQVE2RCxFQUFFN0QsTUFBTThELEdBQUdELEVBQUUwTSxhQUFhek0sRUFBVyxNQUFUMUUsRUFBRXlFLEVBQUV2RSxRQUFjdUUsRUFBRXZFLEtBQUssSUFBSXVFLEVBQUV5TSxpQkFBaUJ6TSxFQUFFMk0sY0FBY0MsZUFBZSxLQUFLclIsSUFBSXlFLEVBQUV2RSxLQUFLRixHQUN2VixTQUFTMlIsR0FBR2xOLEVBQUVDLEVBQUUxRSxHQUFNLFdBQVcwRSxHQUFHb00sR0FBR3JNLEVBQUVvTixpQkFBaUJwTixJQUFFLE1BQU16RSxFQUFFeUUsRUFBRTBNLGFBQWEsR0FBRzFNLEVBQUUyTSxjQUFjRyxhQUFhOU0sRUFBRTBNLGVBQWUsR0FBR25SLElBQUl5RSxFQUFFME0sYUFBYSxHQUFHblIsSUFBd0YsU0FBUzhSLEdBQUdyTixFQUFFQyxHQUE2RCxPQUExREQsRUFBRTFFLEVBQUUsQ0FBQzhHLGNBQVMsR0FBUW5DLElBQU1BLEVBQWxJLFNBQVlELEdBQUcsSUFBSUMsRUFBRSxHQUF1RCxPQUFwRGdILEVBQUczQyxTQUFTbkcsUUFBUTZCLEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRHFOLENBQUdyTixFQUFFbUMsYUFBVXBDLEVBQUVvQyxTQUFTbkMsR0FBU0QsRUFDdlUsU0FBU3VOLEdBQUd2TixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBZSxHQUFad0UsRUFBRUEsRUFBRXdOLFFBQVd2TixFQUFFLENBQUNBLEVBQUUsR0FBRyxJQUFJLElBQUkrQixFQUFFLEVBQUVBLEVBQUV6RyxFQUFFdUQsT0FBT2tELElBQUkvQixFQUFFLElBQUkxRSxFQUFFeUcsS0FBSSxFQUFHLElBQUl6RyxFQUFFLEVBQUVBLEVBQUV5RSxFQUFFbEIsT0FBT3ZELElBQUl5RyxFQUFFL0IsRUFBRWxELGVBQWUsSUFBSWlELEVBQUV6RSxHQUFHWSxPQUFPNkQsRUFBRXpFLEdBQUdrUyxXQUFXekwsSUFBSWhDLEVBQUV6RSxHQUFHa1MsU0FBU3pMLEdBQUdBLEdBQUd4RyxJQUFJd0UsRUFBRXpFLEdBQUdtUyxpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQm5TLEVBQUUsR0FBR2lRLEVBQUdqUSxHQUFHMEUsRUFBRSxLQUFTK0IsRUFBRSxFQUFFQSxFQUFFaEMsRUFBRWxCLE9BQU9rRCxJQUFJLENBQUMsR0FBR2hDLEVBQUVnQyxHQUFHN0YsUUFBUVosRUFBaUQsT0FBOUN5RSxFQUFFZ0MsR0FBR3lMLFVBQVMsT0FBR2pTLElBQUl3RSxFQUFFZ0MsR0FBRzBMLGlCQUFnQixJQUFXLE9BQU96TixHQUFHRCxFQUFFZ0MsR0FBRzJMLFdBQVcxTixFQUFFRCxFQUFFZ0MsSUFBSSxPQUFPL0IsSUFBSUEsRUFBRXdOLFVBQVMsSUFDcFksU0FBU0csR0FBRzVOLEVBQUVDLEdBQUcsR0FBRyxNQUFNQSxFQUFFNE4sd0JBQXdCLE1BQU0xTSxNQUFNa0MsRUFBRSxLQUFLLE9BQU8vSCxFQUFFLEdBQUcyRSxFQUFFLENBQUM5RCxXQUFNLEVBQU91USxrQkFBYSxFQUFPdEssU0FBUyxHQUFHcEMsRUFBRTJNLGNBQWNHLGVBQWUsU0FBU2dCLEdBQUc5TixFQUFFQyxHQUFHLElBQUkxRSxFQUFFMEUsRUFBRTlELE1BQU0sR0FBRyxNQUFNWixFQUFFLENBQStCLEdBQTlCQSxFQUFFMEUsRUFBRW1DLFNBQVNuQyxFQUFFQSxFQUFFeU0sYUFBZ0IsTUFBTW5SLEVBQUUsQ0FBQyxHQUFHLE1BQU0wRSxFQUFFLE1BQU1rQixNQUFNa0MsRUFBRSxLQUFLLEdBQUdmLE1BQU1ZLFFBQVEzSCxHQUFHLENBQUMsS0FBSyxHQUFHQSxFQUFFdUQsUUFBUSxNQUFNcUMsTUFBTWtDLEVBQUUsS0FBSzlILEVBQUVBLEVBQUUsR0FBRzBFLEVBQUUxRSxFQUFFLE1BQU0wRSxJQUFJQSxFQUFFLElBQUkxRSxFQUFFMEUsRUFBRUQsRUFBRTJNLGNBQWMsQ0FBQ0csYUFBYXRCLEVBQUdqUSxJQUMvWSxTQUFTd1MsR0FBRy9OLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVpUSxFQUFHdkwsRUFBRTlELE9BQU9YLEVBQUVnUSxFQUFHdkwsRUFBRXlNLGNBQWMsTUFBTW5SLEtBQUlBLEVBQUUsR0FBR0EsS0FBTXlFLEVBQUU3RCxRQUFRNkQsRUFBRTdELE1BQU1aLEdBQUcsTUFBTTBFLEVBQUV5TSxjQUFjMU0sRUFBRTBNLGVBQWVuUixJQUFJeUUsRUFBRTBNLGFBQWFuUixJQUFJLE1BQU1DLElBQUl3RSxFQUFFME0sYUFBYSxHQUFHbFIsR0FBRyxTQUFTd1MsR0FBR2hPLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWlPLFlBQVloTyxJQUFJRCxFQUFFMk0sY0FBY0csY0FBYyxLQUFLN00sR0FBRyxPQUFPQSxJQUFJRCxFQUFFN0QsTUFBTThELEdBQUcsSUFBSWlPLEdBQVMsK0JBQVRBLEdBQXdGLDZCQUM5WCxTQUFTQyxHQUFHbk8sR0FBRyxPQUFPQSxHQUFHLElBQUssTUFBTSxNQUFNLDZCQUE2QixJQUFLLE9BQU8sTUFBTSxxQ0FBcUMsUUFBUSxNQUFNLGdDQUFnQyxTQUFTb08sR0FBR3BPLEVBQUVDLEdBQUcsT0FBTyxNQUFNRCxHQUFHLGlDQUFpQ0EsRUFBRW1PLEdBQUdsTyxHQUFHLCtCQUErQkQsR0FBRyxrQkFBa0JDLEVBQUUsK0JBQStCRCxFQUMzVSxJQUFJcU8sR0FBR0MsR0FBRyxTQUFTdE8sR0FBRyxNQUFNLG9CQUFxQnVPLE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTdk8sRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHdU0sTUFBTUMseUJBQXdCLFdBQVcsT0FBT3hPLEVBQUVDLEVBQUUxRSxPQUFVeUUsRUFBNUosRUFBK0osU0FBU0EsRUFBRUMsR0FBRyxHQUFHRCxFQUFFeU8sZUFBZVAsSUFBUSxjQUFjbE8sRUFBRUEsRUFBRTBPLFVBQVV6TyxNQUFNLENBQTJGLEtBQTFGb08sR0FBR0EsSUFBSW5QLFNBQVNxRyxjQUFjLFFBQVVtSixVQUFVLFFBQVF6TyxFQUFFME8sVUFBVTNMLFdBQVcsU0FBYS9DLEVBQUVvTyxHQUFHTyxXQUFXNU8sRUFBRTRPLFlBQVk1TyxFQUFFNk8sWUFBWTdPLEVBQUU0TyxZQUFZLEtBQUszTyxFQUFFMk8sWUFBWTVPLEVBQUU4TyxZQUFZN08sRUFBRTJPLGdCQUNqYixTQUFTRyxHQUFHL08sRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSTFFLEVBQUV5RSxFQUFFNE8sV0FBVyxHQUFHclQsR0FBR0EsSUFBSXlFLEVBQUVnUCxXQUFXLElBQUl6VCxFQUFFMFQsU0FBd0IsWUFBZDFULEVBQUUyVCxVQUFValAsR0FBVUQsRUFBRWlPLFlBQVloTyxFQUNySCxJQUFJa1AsR0FBRyxDQUFDQyx5QkFBd0IsRUFBR0MsbUJBQWtCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHQyxhQUFZLEVBQUdDLFNBQVEsRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxjQUFhLEVBQUdDLFdBQVUsRUFBR0MsVUFBUyxFQUFHQyxTQUFRLEVBQUdDLFlBQVcsRUFBR0MsYUFBWSxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsZUFBYyxFQUFHQyxnQkFBZSxFQUFHQyxpQkFBZ0IsRUFBR0MsWUFBVyxFQUFHQyxXQUFVLEVBQUdDLFlBQVcsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLFFBQU8sRUFBR0MsTUFBSyxFQUFHQyxhQUFZLEVBQzFmQyxjQUFhLEVBQUdDLGFBQVksRUFBR0MsaUJBQWdCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsZUFBYyxFQUFHQyxhQUFZLEdBQUlDLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxLQUE2SCxTQUFTQyxHQUFHL1IsRUFBRUMsRUFBRTFFLEdBQUcsT0FBTyxNQUFNMEUsR0FBRyxrQkFBbUJBLEdBQUcsS0FBS0EsRUFBRSxHQUFHMUUsR0FBRyxpQkFBa0IwRSxHQUFHLElBQUlBLEdBQUdrUCxHQUFHcFMsZUFBZWlELElBQUltUCxHQUFHblAsSUFBSSxHQUFHQyxHQUFHMEssT0FBTzFLLEVBQUUsS0FDOVosU0FBUytSLEdBQUdoUyxFQUFFQyxHQUFhLElBQUksSUFBSTFFLEtBQWxCeUUsRUFBRUEsRUFBRWlTLE1BQW1CaFMsRUFBRSxHQUFHQSxFQUFFbEQsZUFBZXhCLEdBQUcsQ0FBQyxJQUFJQyxFQUFFLElBQUlELEVBQUUyVyxRQUFRLE1BQU1sUSxFQUFFK1AsR0FBR3hXLEVBQUUwRSxFQUFFMUUsR0FBR0MsR0FBRyxVQUFVRCxJQUFJQSxFQUFFLFlBQVlDLEVBQUV3RSxFQUFFbVMsWUFBWTVXLEVBQUV5RyxHQUFHaEMsRUFBRXpFLEdBQUd5RyxHQURUcEcsT0FBT3lDLEtBQUs4USxJQUFJaFIsU0FBUSxTQUFTNkIsR0FBRzhSLEdBQUczVCxTQUFRLFNBQVM4QixHQUFHQSxFQUFFQSxFQUFFRCxFQUFFb1MsT0FBTyxHQUFHeEosY0FBYzVJLEVBQUVxUyxVQUFVLEdBQUdsRCxHQUFHbFAsR0FBR2tQLEdBQUduUCxTQUNyRyxJQUFJc1MsR0FBR2hYLEVBQUUsQ0FBQ2lYLFVBQVMsR0FBSSxDQUFDQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsT0FBTSxFQUFHMVUsUUFBTyxFQUFHMlUsT0FBTSxFQUFHQyxLQUFJLElBQ2xULFNBQVNDLEdBQUd0VCxFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHcVMsR0FBR3RTLEtBQUssTUFBTUMsRUFBRW1DLFVBQVUsTUFBTW5DLEVBQUU0Tix5QkFBeUIsTUFBTTFNLE1BQU1rQyxFQUFFLElBQUlyRCxJQUFJLEdBQUcsTUFBTUMsRUFBRTROLHdCQUF3QixDQUFDLEdBQUcsTUFBTTVOLEVBQUVtQyxTQUFTLE1BQU1qQixNQUFNa0MsRUFBRSxLQUFLLEdBQUssYUFBa0JwRCxFQUFFNE4sNEJBQXlCLFdBQVc1TixFQUFFNE4seUJBQXlCLE1BQU0xTSxNQUFNa0MsRUFBRSxLQUFNLEdBQUcsTUFBTXBELEVBQUVnUyxPQUFPLGFBQWtCaFMsRUFBRWdTLE9BQU0sTUFBTTlRLE1BQU1rQyxFQUFFLE1BQzVWLFNBQVNrUSxHQUFHdlQsRUFBRUMsR0FBRyxJQUFJLElBQUlELEVBQUVrUyxRQUFRLEtBQUssTUFBTSxpQkFBa0JqUyxFQUFFdVQsR0FBRyxPQUFPeFQsR0FBRyxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLFlBQVksSUFBSyxnQkFBZ0IsSUFBSyxnQkFBZ0IsSUFBSyxtQkFBbUIsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVN5VCxHQUFHelQsR0FBNkYsT0FBMUZBLEVBQUVBLEVBQUV4QixRQUFRd0IsRUFBRTBULFlBQVlqTSxRQUFTa00sMEJBQTBCM1QsRUFBRUEsRUFBRTJULHlCQUFnQyxJQUFJM1QsRUFBRWlQLFNBQVNqUCxFQUFFNFQsV0FBVzVULEVBQUUsSUFBSTZULEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQ3hiLFNBQVNDLEdBQUdoVSxHQUFHLEdBQUdBLEVBQUVpVSxHQUFHalUsR0FBRyxDQUFDLEdBQUcsbUJBQW9CNlQsR0FBRyxNQUFNMVMsTUFBTWtDLEVBQUUsTUFBTSxJQUFJcEQsRUFBRUQsRUFBRWtVLFVBQVVqVSxJQUFJQSxFQUFFa1UsR0FBR2xVLEdBQUc0VCxHQUFHN1QsRUFBRWtVLFVBQVVsVSxFQUFFeUMsS0FBS3hDLEtBQUssU0FBU21VLEdBQUdwVSxHQUFHOFQsR0FBR0MsR0FBR0EsR0FBRzNRLEtBQUtwRCxHQUFHK1QsR0FBRyxDQUFDL1QsR0FBRzhULEdBQUc5VCxFQUFFLFNBQVNxVSxLQUFLLEdBQUdQLEdBQUcsQ0FBQyxJQUFJOVQsRUFBRThULEdBQUc3VCxFQUFFOFQsR0FBb0IsR0FBakJBLEdBQUdELEdBQUcsS0FBS0UsR0FBR2hVLEdBQU1DLEVBQUUsSUFBSUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFbkIsT0FBT2tCLElBQUlnVSxHQUFHL1QsRUFBRUQsS0FBSyxTQUFTc1UsR0FBR3RVLEVBQUVDLEdBQUcsT0FBT0QsRUFBRUMsR0FBRyxTQUFTc1UsR0FBR3ZVLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csR0FBRyxPQUFPaEMsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLFNBQVN3UyxNQUFNLElBQUlDLEdBQUdILEdBQUdJLElBQUcsRUFBR0MsSUFBRyxFQUFHLFNBQVNDLEtBQVEsT0FBT2QsSUFBSSxPQUFPQyxLQUFHUyxLQUFLSCxNQUU5WixTQUFTUSxHQUFHN1UsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRXlFLEVBQUVrVSxVQUFVLEdBQUcsT0FBTzNZLEVBQUUsT0FBTyxLQUFLLElBQUlDLEVBQUUyWSxHQUFHNVksR0FBRyxHQUFHLE9BQU9DLEVBQUUsT0FBTyxLQUFLRCxFQUFFQyxFQUFFeUUsR0FBR0QsRUFBRSxPQUFPQyxHQUFHLElBQUssVUFBVSxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLHVCQUF1QixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssWUFBWSxJQUFLLG1CQUFtQixJQUFLLGdCQUFnQnpFLEdBQUdBLEVBQUVtUyxZQUFxQm5TLElBQUksWUFBYndFLEVBQUVBLEVBQUV5QyxPQUF1QixVQUFVekMsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLElBQUlBLEdBQUd4RSxFQUFFLE1BQU13RSxFQUFFLFFBQVFBLEdBQUUsRUFBRyxHQUFHQSxFQUFFLE9BQU8sS0FBSyxHQUFHekUsR0FBRyxtQkFDbGVBLEVBQUUsTUFBTTRGLE1BQU1rQyxFQUFFLElBQUlwRCxPQUFOLElBQWUxRSxFQUFmLGNBQWVBLEtBQUksT0FBT0EsRUFBRSxJQUFJdVosSUFBRyxFQUFHLEdBQUd0TixFQUFHLElBQUksSUFBSXVOLEdBQUcsR0FBR25aLE9BQU9DLGVBQWVrWixHQUFHLFVBQVUsQ0FBQ2haLElBQUksV0FBVytZLElBQUcsS0FBTXJOLE9BQU91TixpQkFBaUIsT0FBT0QsR0FBR0EsSUFBSXROLE9BQU93TixvQkFBb0IsT0FBT0YsR0FBR0EsSUFBSSxNQUFNL1UsR0FBRzhVLElBQUcsRUFBRyxTQUFTSSxHQUFHbFYsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxFQUFFSyxFQUFFRixFQUFFRCxFQUFFRCxHQUFHLElBQUk5RyxFQUFFbUgsTUFBTXhGLFVBQVVtTCxNQUFNNU0sS0FBS3dELFVBQVUsR0FBRyxJQUFJb0IsRUFBRXNFLE1BQU1oSixFQUFFSixHQUFHLE1BQU13QixHQUFHK0QsS0FBS3lVLFFBQVF4WSxJQUFJLElBQUl5WSxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsQ0FBQ0wsUUFBUSxTQUFTblYsR0FBR29WLElBQUcsRUFBR0MsR0FBR3JWLElBQUksU0FBU3lWLEdBQUd6VixFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLEVBQUVLLEVBQUVGLEVBQUVELEVBQUVELEdBQUdtVCxJQUFHLEVBQUdDLEdBQUcsS0FBS0gsR0FBRzNRLE1BQU1pUixHQUFHM1csV0FDdlYsU0FBUzZXLEdBQUcxVixHQUFHLElBQUlDLEVBQUVELEVBQUV6RSxFQUFFeUUsRUFBRSxHQUFHQSxFQUFFMlYsVUFBVSxLQUFLMVYsRUFBRTJWLFFBQVEzVixFQUFFQSxFQUFFMlYsV0FBVyxDQUFDNVYsRUFBRUMsRUFBRSxHQUFPLElBQWEsTUFBakJBLEVBQUVELEdBQVM2VixTQUFjdGEsRUFBRTBFLEVBQUUyVixRQUFRNVYsRUFBRUMsRUFBRTJWLGFBQWE1VixHQUFHLE9BQU8sSUFBSUMsRUFBRW9MLElBQUk5UCxFQUFFLEtBQUssU0FBU3VhLEdBQUc5VixHQUFHLEdBQUcsS0FBS0EsRUFBRXFMLElBQUksQ0FBQyxJQUFJcEwsRUFBRUQsRUFBRStWLGNBQXNFLEdBQXhELE9BQU85VixJQUFrQixRQUFkRCxFQUFFQSxFQUFFMlYsYUFBcUIxVixFQUFFRCxFQUFFK1YsZ0JBQW1CLE9BQU85VixFQUFFLE9BQU9BLEVBQUUrVixXQUFXLE9BQU8sS0FBSyxTQUFTQyxHQUFHalcsR0FBRyxHQUFHMFYsR0FBRzFWLEtBQUtBLEVBQUUsTUFBTW1CLE1BQU1rQyxFQUFFLE1BRXBTLFNBQVM2UyxHQUFHbFcsR0FBVyxLQUFSQSxFQUR0TixTQUFZQSxHQUFHLElBQUlDLEVBQUVELEVBQUUyVixVQUFVLElBQUkxVixFQUFFLENBQVMsR0FBRyxRQUFYQSxFQUFFeVYsR0FBRzFWLElBQWUsTUFBTW1CLE1BQU1rQyxFQUFFLE1BQU0sT0FBT3BELElBQUlELEVBQUUsS0FBS0EsRUFBRSxJQUFJLElBQUl6RSxFQUFFeUUsRUFBRXhFLEVBQUV5RSxJQUFJLENBQUMsSUFBSStCLEVBQUV6RyxFQUFFcWEsT0FBTyxHQUFHLE9BQU81VCxFQUFFLE1BQU0sSUFBSUssRUFBRUwsRUFBRTJULFVBQVUsR0FBRyxPQUFPdFQsRUFBRSxDQUFZLEdBQUcsUUFBZDdHLEVBQUV3RyxFQUFFNFQsUUFBbUIsQ0FBQ3JhLEVBQUVDLEVBQUUsU0FBUyxNQUFNLEdBQUd3RyxFQUFFbVUsUUFBUTlULEVBQUU4VCxNQUFNLENBQUMsSUFBSTlULEVBQUVMLEVBQUVtVSxNQUFNOVQsR0FBRyxDQUFDLEdBQUdBLElBQUk5RyxFQUFFLE9BQU8wYSxHQUFHalUsR0FBR2hDLEVBQUUsR0FBR3FDLElBQUk3RyxFQUFFLE9BQU95YSxHQUFHalUsR0FBRy9CLEVBQUVvQyxFQUFFQSxFQUFFK1QsUUFBUSxNQUFNalYsTUFBTWtDLEVBQUUsTUFBTyxHQUFHOUgsRUFBRXFhLFNBQVNwYSxFQUFFb2EsT0FBT3JhLEVBQUV5RyxFQUFFeEcsRUFBRTZHLE1BQU0sQ0FBQyxJQUFJLElBQUlGLEdBQUUsRUFBR0QsRUFBRUYsRUFBRW1VLE1BQU1qVSxHQUFHLENBQUMsR0FBR0EsSUFBSTNHLEVBQUUsQ0FBQzRHLEdBQUUsRUFBRzVHLEVBQUV5RyxFQUFFeEcsRUFBRTZHLEVBQUUsTUFBTSxHQUFHSCxJQUFJMUcsRUFBRSxDQUFDMkcsR0FBRSxFQUFHM0csRUFBRXdHLEVBQUV6RyxFQUFFOEcsRUFBRSxNQUFNSCxFQUFFQSxFQUFFa1UsUUFBUSxJQUFJalUsRUFBRSxDQUFDLElBQUlELEVBQUVHLEVBQUU4VCxNQUFNalUsR0FBRyxDQUFDLEdBQUdBLElBQzVmM0csRUFBRSxDQUFDNEcsR0FBRSxFQUFHNUcsRUFBRThHLEVBQUU3RyxFQUFFd0csRUFBRSxNQUFNLEdBQUdFLElBQUkxRyxFQUFFLENBQUMyRyxHQUFFLEVBQUczRyxFQUFFNkcsRUFBRTlHLEVBQUV5RyxFQUFFLE1BQU1FLEVBQUVBLEVBQUVrVSxRQUFRLElBQUlqVSxFQUFFLE1BQU1oQixNQUFNa0MsRUFBRSxPQUFRLEdBQUc5SCxFQUFFb2EsWUFBWW5hLEVBQUUsTUFBTTJGLE1BQU1rQyxFQUFFLE1BQU8sR0FBRyxJQUFJOUgsRUFBRThQLElBQUksTUFBTWxLLE1BQU1rQyxFQUFFLE1BQU0sT0FBTzlILEVBQUUyWSxVQUFVelMsVUFBVWxHLEVBQUV5RSxFQUFFQyxFQUFtQm9XLENBQUdyVyxJQUFTLE9BQU8sS0FBSyxJQUFJLElBQUlDLEVBQUVELElBQUksQ0FBQyxHQUFHLElBQUlDLEVBQUVvTCxLQUFLLElBQUlwTCxFQUFFb0wsSUFBSSxPQUFPcEwsRUFBRSxHQUFHQSxFQUFFa1csTUFBTWxXLEVBQUVrVyxNQUFNUCxPQUFPM1YsRUFBRUEsRUFBRUEsRUFBRWtXLFVBQVUsQ0FBQyxHQUFHbFcsSUFBSUQsRUFBRSxNQUFNLE1BQU1DLEVBQUVtVyxTQUFTLENBQUMsSUFBSW5XLEVBQUUyVixRQUFRM1YsRUFBRTJWLFNBQVM1VixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTJWLE9BQU8zVixFQUFFbVcsUUFBUVIsT0FBTzNWLEVBQUUyVixPQUFPM1YsRUFBRUEsRUFBRW1XLFNBQVMsT0FBTyxLQUM1YyxTQUFTRSxHQUFHdFcsRUFBRUMsR0FBRyxJQUFJLElBQUkxRSxFQUFFeUUsRUFBRTJWLFVBQVUsT0FBTzFWLEdBQUcsQ0FBQyxHQUFHQSxJQUFJRCxHQUFHQyxJQUFJMUUsRUFBRSxPQUFNLEVBQUcwRSxFQUFFQSxFQUFFMlYsT0FBTyxPQUFNLEVBQUcsSUFBSVcsR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsSUFBRyxFQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsSUFBSUMsSUFBSUMsR0FBRyxJQUFJRCxJQUFJRSxHQUFHLEdBQUdDLEdBQUcsNlBBQTZQbFosTUFBTSxLQUNyYixTQUFTbVosR0FBR3JYLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csR0FBRyxNQUFNLENBQUNzVixVQUFVdFgsRUFBRXVYLGFBQWF0WCxFQUFFdVgsaUJBQW1CLEdBQUZqYyxFQUFLa2MsWUFBWXpWLEVBQUUwVixpQkFBaUIsQ0FBQ2xjLElBQUksU0FBU21jLEdBQUczWCxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxVQUFVLElBQUssV0FBVzZXLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFlBQVlDLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFdBQVdDLEdBQUcsS0FBSyxNQUFNLElBQUssY0FBYyxJQUFLLGFBQWFDLEdBQUdZLE9BQU8zWCxFQUFFNFgsV0FBVyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCWCxHQUFHVSxPQUFPM1gsRUFBRTRYLFlBQzNaLFNBQVNDLEdBQUc5WCxFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLEVBQUVLLEdBQUcsT0FBRyxPQUFPckMsR0FBR0EsRUFBRXlYLGNBQWNwVixHQUFTckMsRUFBRXFYLEdBQUdwWCxFQUFFMUUsRUFBRUMsRUFBRXdHLEVBQUVLLEdBQUcsT0FBT3BDLElBQVksUUFBUkEsRUFBRWdVLEdBQUdoVSxLQUFhdVcsR0FBR3ZXLElBQUlELElBQUVBLEVBQUV3WCxrQkFBa0JoYyxFQUFFeUUsRUFBRUQsRUFBRTBYLGlCQUFpQixPQUFPMVYsSUFBSSxJQUFJL0IsRUFBRWlTLFFBQVFsUSxJQUFJL0IsRUFBRW1ELEtBQUtwQixHQUFVaEMsR0FFOU0sU0FBUytYLEdBQUcvWCxHQUFHLElBQUlDLEVBQUUrWCxHQUFHaFksRUFBRXhCLFFBQVEsR0FBRyxPQUFPeUIsRUFBRSxDQUFDLElBQUkxRSxFQUFFbWEsR0FBR3pWLEdBQUcsR0FBRyxPQUFPMUUsRUFBRSxHQUFXLE1BQVIwRSxFQUFFMUUsRUFBRThQLE1BQVksR0FBVyxRQUFScEwsRUFBRTZWLEdBQUd2YSxJQUFtSCxPQUF0R3lFLEVBQUVzWCxVQUFVclgsT0FBRXlXLEdBQUcxVyxFQUFFaVksY0FBYSxXQUFXamMsRUFBRWtjLHlCQUF5QmxZLEVBQUVtWSxVQUFTLFdBQVcxQixHQUFHbGIsY0FBb0IsR0FBRyxJQUFJMEUsR0FBRzFFLEVBQUUyWSxVQUFVa0UsUUFBOEQsWUFBckRwWSxFQUFFc1gsVUFBVSxJQUFJL2IsRUFBRThQLElBQUk5UCxFQUFFMlksVUFBVW1FLGNBQWMsTUFBYXJZLEVBQUVzWCxVQUFVLEtBQzFVLFNBQVNnQixHQUFHdFksR0FBRyxHQUFHLE9BQU9BLEVBQUVzWCxVQUFVLE9BQU0sRUFBRyxJQUFJLElBQUlyWCxFQUFFRCxFQUFFMFgsaUJBQWlCLEVBQUV6WCxFQUFFbkIsUUFBUSxDQUFDLElBQUl2RCxFQUFFZ2QsR0FBR3ZZLEVBQUV1WCxhQUFhdlgsRUFBRXdYLGlCQUFpQnZYLEVBQUUsR0FBR0QsRUFBRXlYLGFBQWEsR0FBRyxPQUFPbGMsRUFBRSxPQUFlLFFBQVIwRSxFQUFFZ1UsR0FBRzFZLEtBQWFpYixHQUFHdlcsR0FBR0QsRUFBRXNYLFVBQVUvYixHQUFFLEVBQUcwRSxFQUFFdVksUUFBUSxPQUFNLEVBQUcsU0FBU0MsR0FBR3pZLEVBQUVDLEVBQUUxRSxHQUFHK2MsR0FBR3RZLElBQUl6RSxFQUFFcWMsT0FBTzNYLEdBQ3pRLFNBQVN5WSxLQUFLLElBQUkvQixJQUFHLEVBQUcsRUFBRUMsR0FBRzlYLFFBQVEsQ0FBQyxJQUFJa0IsRUFBRTRXLEdBQUcsR0FBRyxHQUFHLE9BQU81VyxFQUFFc1gsVUFBVSxDQUFtQixRQUFsQnRYLEVBQUVpVSxHQUFHalUsRUFBRXNYLGFBQXFCZixHQUFHdlcsR0FBRyxNQUFNLElBQUksSUFBSUMsRUFBRUQsRUFBRTBYLGlCQUFpQixFQUFFelgsRUFBRW5CLFFBQVEsQ0FBQyxJQUFJdkQsRUFBRWdkLEdBQUd2WSxFQUFFdVgsYUFBYXZYLEVBQUV3WCxpQkFBaUJ2WCxFQUFFLEdBQUdELEVBQUV5WCxhQUFhLEdBQUcsT0FBT2xjLEVBQUUsQ0FBQ3lFLEVBQUVzWCxVQUFVL2IsRUFBRSxNQUFNMEUsRUFBRXVZLFFBQVEsT0FBT3hZLEVBQUVzWCxXQUFXVixHQUFHNEIsUUFBUSxPQUFPM0IsSUFBSXlCLEdBQUd6QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXdCLEdBQUd4QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXVCLEdBQUd2QixNQUFNQSxHQUFHLE1BQU1DLEdBQUc3WSxRQUFRc2EsSUFBSXZCLEdBQUcvWSxRQUFRc2EsSUFDclosU0FBU0UsR0FBRzNZLEVBQUVDLEdBQUdELEVBQUVzWCxZQUFZclgsSUFBSUQsRUFBRXNYLFVBQVUsS0FBS1gsS0FBS0EsSUFBRyxFQUFHM2EsRUFBRTRjLDBCQUEwQjVjLEVBQUU2Yyx3QkFBd0JILE1BQ3JILFNBQVNJLEdBQUc5WSxHQUFHLFNBQVNDLEVBQUVBLEdBQUcsT0FBTzBZLEdBQUcxWSxFQUFFRCxHQUFHLEdBQUcsRUFBRTRXLEdBQUc5WCxPQUFPLENBQUM2WixHQUFHL0IsR0FBRyxHQUFHNVcsR0FBRyxJQUFJLElBQUl6RSxFQUFFLEVBQUVBLEVBQUVxYixHQUFHOVgsT0FBT3ZELElBQUksQ0FBQyxJQUFJQyxFQUFFb2IsR0FBR3JiLEdBQUdDLEVBQUU4YixZQUFZdFgsSUFBSXhFLEVBQUU4YixVQUFVLE9BQStGLElBQXhGLE9BQU9ULElBQUk4QixHQUFHOUIsR0FBRzdXLEdBQUcsT0FBTzhXLElBQUk2QixHQUFHN0IsR0FBRzlXLEdBQUcsT0FBTytXLElBQUk0QixHQUFHNUIsR0FBRy9XLEdBQUdnWCxHQUFHN1ksUUFBUThCLEdBQUdpWCxHQUFHL1ksUUFBUThCLEdBQU8xRSxFQUFFLEVBQUVBLEVBQUU0YixHQUFHclksT0FBT3ZELEtBQUlDLEVBQUUyYixHQUFHNWIsSUFBSytiLFlBQVl0WCxJQUFJeEUsRUFBRThiLFVBQVUsTUFBTSxLQUFLLEVBQUVILEdBQUdyWSxRQUFpQixRQUFSdkQsRUFBRTRiLEdBQUcsSUFBWUcsV0FBWVMsR0FBR3hjLEdBQUcsT0FBT0EsRUFBRStiLFdBQVdILEdBQUdxQixRQUMvWCxTQUFTTyxHQUFHL1ksRUFBRUMsR0FBRyxJQUFJMUUsRUFBRSxHQUFrRixPQUEvRUEsRUFBRXlFLEVBQUVnSSxlQUFlL0gsRUFBRStILGNBQWN6TSxFQUFFLFNBQVN5RSxHQUFHLFNBQVNDLEVBQUUxRSxFQUFFLE1BQU15RSxHQUFHLE1BQU1DLEVBQVMxRSxFQUFFLElBQUl5ZCxHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQ25GLFNBQVNDLEdBQUd2WixHQUFHLEdBQUdxWixHQUFHclosR0FBRyxPQUFPcVosR0FBR3JaLEdBQUcsSUFBSWdaLEdBQUdoWixHQUFHLE9BQU9BLEVBQUUsSUFBWXpFLEVBQVIwRSxFQUFFK1ksR0FBR2haLEdBQUssSUFBSXpFLEtBQUswRSxFQUFFLEdBQUdBLEVBQUVsRCxlQUFleEIsSUFBSUEsS0FBSytkLEdBQUcsT0FBT0QsR0FBR3JaLEdBQUdDLEVBQUUxRSxHQUFHLE9BQU95RSxFQUE5WHdILElBQUs4UixHQUFHcGEsU0FBU3FHLGNBQWMsT0FBTzBNLE1BQU0sbUJBQW1CeEssZ0JBQWdCdVIsR0FBR0MsYUFBYU8saUJBQWlCUixHQUFHRSxtQkFBbUJNLGlCQUFpQlIsR0FBR0csZUFBZUssV0FBVyxvQkFBb0IvUixlQUFldVIsR0FBR0ksY0FBY2pWLFlBQ3hPLElBQUlzVixHQUFHRixHQUFHLGdCQUFnQkcsR0FBR0gsR0FBRyxzQkFBc0JJLEdBQUdKLEdBQUcsa0JBQWtCSyxHQUFHTCxHQUFHLGlCQUFpQk0sR0FBRyxJQUFJNUMsSUFBSTZDLEdBQUcsSUFBSTdDLElBQUk4QyxHQUFHLENBQUMsUUFBUSxRQUFRTixHQUFHLGVBQWVDLEdBQUcscUJBQXFCQyxHQUFHLGlCQUFpQixVQUFVLFVBQVUsaUJBQWlCLGlCQUFpQixpQkFBaUIsaUJBQWlCLFVBQVUsVUFBVSxZQUFZLFlBQVksUUFBUSxRQUFRLFFBQVEsUUFBUSxvQkFBb0Isb0JBQW9CLE9BQU8sT0FBTyxhQUFhLGFBQWEsaUJBQWlCLGlCQUFpQixZQUFZLFlBQy9lLHFCQUFxQixxQkFBcUIsVUFBVSxVQUFVLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxhQUFhLGFBQWFDLEdBQUcsZ0JBQWdCLFVBQVUsV0FBVyxTQUFTSSxHQUFHaGEsRUFBRUMsR0FBRyxJQUFJLElBQUkxRSxFQUFFLEVBQUVBLEVBQUV5RSxFQUFFbEIsT0FBT3ZELEdBQUcsRUFBRSxDQUFDLElBQUlDLEVBQUV3RSxFQUFFekUsR0FBR3lHLEVBQUVoQyxFQUFFekUsRUFBRSxHQUFHeUcsRUFBRSxNQUFNQSxFQUFFLEdBQUc0RyxjQUFjNUcsRUFBRWlHLE1BQU0sSUFBSTZSLEdBQUc5TyxJQUFJeFAsRUFBRXlFLEdBQUc0WixHQUFHN08sSUFBSXhQLEVBQUV3RyxHQUFHcUYsRUFBR3JGLEVBQUUsQ0FBQ3hHLE1BQTJCeWUsRUFBZmplLEVBQUVrZSxnQkFBa0IsSUFBSTdZLEdBQUUsRUFDL1gsU0FBUzhZLEdBQUduYSxHQUFHLEdBQUcsSUFBSyxFQUFFQSxHQUFHLE9BQU9xQixHQUFFLEdBQUcsRUFBRSxHQUFHLElBQUssRUFBRXJCLEdBQUcsT0FBT3FCLEdBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSyxFQUFFckIsR0FBRyxPQUFPcUIsR0FBRSxHQUFHLEVBQUUsSUFBSXBCLEVBQUUsR0FBR0QsRUFBRSxPQUFHLElBQUlDLEdBQVNvQixHQUFFLEdBQUdwQixHQUFLLElBQU8sR0FBRkQsSUFBYXFCLEdBQUUsR0FBRyxJQUFjLEtBQVhwQixFQUFFLElBQUlELElBQWtCcUIsR0FBRSxHQUFHcEIsR0FBSyxJQUFPLElBQUZELElBQWNxQixHQUFFLEVBQUUsS0FBZ0IsS0FBWnBCLEVBQUUsS0FBS0QsSUFBa0JxQixHQUFFLEVBQUVwQixHQUFLLElBQU8sS0FBRkQsSUFBZXFCLEdBQUUsRUFBRSxNQUFvQixLQUFmcEIsRUFBRSxRQUFRRCxJQUFrQnFCLEdBQUUsRUFBRXBCLEdBQWtCLEtBQWhCQSxFQUFFLFNBQVNELElBQWtCcUIsR0FBRSxFQUFFcEIsR0FBTyxTQUFGRCxHQUFrQnFCLEdBQUUsRUFBRSxVQUFZLElBQU8sVUFBRnJCLElBQW9CcUIsR0FBRSxFQUFFLFdBQTJCLEtBQWpCcEIsRUFBRSxVQUFVRCxJQUFrQnFCLEdBQUUsRUFBRXBCLEdBQUssSUFBSyxXQUFXRCxJQUFVcUIsR0FBRSxFQUFFLGFBQ2pmQSxHQUFFLEVBQVNyQixHQUNYLFNBQVNvYSxHQUFHcGEsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRXlFLEVBQUVxYSxhQUFhLEdBQUcsSUFBSTllLEVBQUUsT0FBTzhGLEdBQUUsRUFBRSxJQUFJN0YsRUFBRSxFQUFFd0csRUFBRSxFQUFFSyxFQUFFckMsRUFBRXNhLGFBQWFuWSxFQUFFbkMsRUFBRXVhLGVBQWVyWSxFQUFFbEMsRUFBRXdhLFlBQVksR0FBRyxJQUFJblksRUFBRTdHLEVBQUU2RyxFQUFFTCxFQUFFWCxHQUFFLFFBQVEsR0FBaUIsS0FBZGdCLEVBQUksVUFBRjlHLEdBQWtCLENBQUMsSUFBSTBHLEVBQUVJLEdBQUdGLEVBQUUsSUFBSUYsR0FBR3pHLEVBQUUyZSxHQUFHbFksR0FBR0QsRUFBRVgsSUFBUyxLQUFMYSxHQUFHRyxLQUFVN0csRUFBRTJlLEdBQUdqWSxHQUFHRixFQUFFWCxTQUFnQixLQUFQZ0IsRUFBRTlHLEdBQUc0RyxJQUFTM0csRUFBRTJlLEdBQUc5WCxHQUFHTCxFQUFFWCxJQUFHLElBQUlhLElBQUkxRyxFQUFFMmUsR0FBR2pZLEdBQUdGLEVBQUVYLElBQUcsR0FBRyxJQUFJN0YsRUFBRSxPQUFPLEVBQXFDLEdBQXhCQSxFQUFFRCxJQUFJLEdBQWpCQyxFQUFFLEdBQUdpZixHQUFHamYsSUFBYSxFQUFFLEdBQUdBLElBQUksR0FBRyxFQUFLLElBQUl5RSxHQUFHQSxJQUFJekUsR0FBRyxJQUFLeUUsRUFBRWtDLEdBQUcsQ0FBTyxHQUFOZ1ksR0FBR2xhLEdBQU0rQixHQUFHWCxHQUFFLE9BQU9wQixFQUFFb0IsR0FBRVcsRUFBcUIsR0FBRyxLQUF0Qi9CLEVBQUVELEVBQUUwYSxnQkFBd0IsSUFBSTFhLEVBQUVBLEVBQUUyYSxjQUFjMWEsR0FBR3pFLEVBQUUsRUFBRXlFLEdBQWMrQixFQUFFLElBQWJ6RyxFQUFFLEdBQUdrZixHQUFHeGEsSUFBVXpFLEdBQUd3RSxFQUFFekUsR0FBRzBFLElBQUkrQixFQUFFLE9BQU94RyxFQUMxZSxTQUFTb2YsR0FBRzVhLEdBQWdDLE9BQU8sS0FBcENBLEdBQWtCLFdBQWhCQSxFQUFFcWEsY0FBc0NyYSxFQUFJLFdBQUZBLEVBQWEsV0FBVyxFQUFFLFNBQVM2YSxHQUFHN2EsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBbUIsS0FBWkEsRUFBRThhLEdBQUcsSUFBSTdhLElBQVM0YSxHQUFHLEdBQUc1YSxHQUFHRCxFQUFFLEtBQUssR0FBRyxPQUFvQixLQUFiQSxFQUFFOGEsR0FBRyxLQUFLN2EsSUFBUzRhLEdBQUcsRUFBRTVhLEdBQUdELEVBQUUsS0FBSyxFQUFFLE9BQXFCLEtBQWRBLEVBQUU4YSxHQUFHLE1BQU03YSxNQUE0QixLQUFqQkQsRUFBRThhLEdBQUcsU0FBUzdhLE1BQVdELEVBQUUsTUFBTUEsRUFBRSxLQUFLLEVBQUUsT0FBMEIsS0FBbkJDLEVBQUU2YSxHQUFHLFdBQVc3YSxNQUFXQSxFQUFFLFdBQVdBLEVBQUUsTUFBTWtCLE1BQU1rQyxFQUFFLElBQUlyRCxJQUFLLFNBQVM4YSxHQUFHOWEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFLFNBQVMrYSxHQUFHL2EsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBRzFFLEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJMEUsRUFBRW1ELEtBQUtwRCxHQUFHLE9BQU9DLEVBQ3JkLFNBQVMrYSxHQUFHaGIsRUFBRUMsRUFBRTFFLEdBQUd5RSxFQUFFcWEsY0FBY3BhLEVBQUUsSUFBSXpFLEVBQUV5RSxFQUFFLEVBQUVELEVBQUV1YSxnQkFBZ0IvZSxFQUFFd0UsRUFBRXdhLGFBQWFoZixHQUFFd0UsRUFBRUEsRUFBRWliLFlBQVdoYixFQUFFLEdBQUd3YSxHQUFHeGEsSUFBUTFFLEVBQUUsSUFBSWtmLEdBQUdTLEtBQUtDLE1BQU1ELEtBQUtDLE1BQWlDLFNBQVluYixHQUFHLE9BQU8sSUFBSUEsRUFBRSxHQUFHLElBQUlvYixHQUFHcGIsR0FBR3FiLEdBQUcsR0FBRyxHQUF2RUQsR0FBR0YsS0FBS0ksSUFBSUQsR0FBR0gsS0FBS0ssSUFBcUQsSUFBSUMsR0FBR3hmLEVBQUV5Ziw4QkFBOEJDLEdBQUcxZixFQUFFa2MseUJBQXlCeUQsSUFBRyxFQUFHLFNBQVNDLEdBQUc1YixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBR2taLElBQUlGLEtBQUssSUFBSXhTLEVBQUU2WixHQUFHeFosRUFBRXFTLEdBQUdBLElBQUcsRUFBRyxJQUFJSCxHQUFHdlMsRUFBRWhDLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFmLFNBQTJCa1osR0FBR3JTLElBQUl1UyxNQUFNLFNBQVNrSCxHQUFHOWIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUdrZ0IsR0FBR0YsR0FBR0ssR0FBR25mLEtBQUssS0FBS3NELEVBQUVDLEVBQUUxRSxFQUFFQyxJQUNqYixTQUFTcWdCLEdBQUc3YixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBVSxJQUFJd0csRUFBWCxHQUFHMlosR0FBVSxJQUFJM1osRUFBRSxJQUFPLEVBQUYvQixLQUFPLEVBQUUyVyxHQUFHOVgsU0FBUyxFQUFFc1ksR0FBR2xGLFFBQVFsUyxHQUFHQSxFQUFFcVgsR0FBRyxLQUFLclgsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUdvYixHQUFHeFQsS0FBS3BELE9BQU8sQ0FBQyxJQUFJcUMsRUFBRWtXLEdBQUd2WSxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxHQUFHLE9BQU82RyxFQUFFTCxHQUFHMlYsR0FBRzNYLEVBQUV4RSxPQUFPLENBQUMsR0FBR3dHLEVBQUUsQ0FBQyxJQUFJLEVBQUVvVixHQUFHbEYsUUFBUWxTLEdBQStCLE9BQTNCQSxFQUFFcVgsR0FBR2hWLEVBQUVyQyxFQUFFQyxFQUFFMUUsRUFBRUMsUUFBR29iLEdBQUd4VCxLQUFLcEQsR0FBVSxHQWZoTyxTQUFZQSxFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLEdBQUcsT0FBTy9CLEdBQUcsSUFBSyxVQUFVLE9BQU80VyxHQUFHaUIsR0FBR2pCLEdBQUc3VyxFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBTzhVLEdBQUdnQixHQUFHaEIsR0FBRzlXLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPK1UsR0FBR2UsR0FBR2YsR0FBRy9XLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJSyxFQUFFTCxFQUFFNlYsVUFBa0QsT0FBeENiLEdBQUdoTSxJQUFJM0ksRUFBRXlWLEdBQUdkLEdBQUdqYixJQUFJc0csSUFBSSxLQUFLckMsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBT0ssRUFBRUwsRUFBRTZWLFVBQVVYLEdBQUdsTSxJQUFJM0ksRUFBRXlWLEdBQUdaLEdBQUduYixJQUFJc0csSUFBSSxLQUFLckMsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxLQUFJLEVBQUcsT0FBTSxFQWU5SCtaLENBQUcxWixFQUFFckMsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsT0FBT21jLEdBQUczWCxFQUFFeEUsR0FBR3dnQixHQUFHaGMsRUFBRUMsRUFBRXpFLEVBQUUsS0FBS0QsS0FDOVEsU0FBU2dkLEdBQUd2WSxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRXlSLEdBQUdqWSxHQUFXLEdBQUcsUUFBWHdHLEVBQUVnVyxHQUFHaFcsSUFBZSxDQUFDLElBQUlLLEVBQUVxVCxHQUFHMVQsR0FBRyxHQUFHLE9BQU9LLEVBQUVMLEVBQUUsU0FBUyxDQUFDLElBQUlHLEVBQUVFLEVBQUVnSixJQUFJLEdBQUcsS0FBS2xKLEVBQUUsQ0FBUyxHQUFHLFFBQVhILEVBQUU4VCxHQUFHelQsSUFBZSxPQUFPTCxFQUFFQSxFQUFFLFVBQVUsR0FBRyxJQUFJRyxFQUFFLENBQUMsR0FBR0UsRUFBRTZSLFVBQVVrRSxRQUFRLE9BQU8sSUFBSS9WLEVBQUVnSixJQUFJaEosRUFBRTZSLFVBQVVtRSxjQUFjLEtBQUtyVyxFQUFFLFVBQVVLLElBQUlMLElBQUlBLEVBQUUsT0FBcUIsT0FBZGdhLEdBQUdoYyxFQUFFQyxFQUFFekUsRUFBRXdHLEVBQUV6RyxHQUFVLEtBQUssSUFBSTBnQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUN6VCxTQUFTQyxLQUFLLEdBQUdELEdBQUcsT0FBT0EsR0FBRyxJQUFJbmMsRUFBa0J4RSxFQUFoQnlFLEVBQUVpYyxHQUFHM2dCLEVBQUUwRSxFQUFFbkIsT0FBU2tELEVBQUUsVUFBVWlhLEdBQUdBLEdBQUc5ZixNQUFNOGYsR0FBR2hPLFlBQVk1TCxFQUFFTCxFQUFFbEQsT0FBTyxJQUFJa0IsRUFBRSxFQUFFQSxFQUFFekUsR0FBRzBFLEVBQUVELEtBQUtnQyxFQUFFaEMsR0FBR0EsS0FBSyxJQUFJbUMsRUFBRTVHLEVBQUV5RSxFQUFFLElBQUl4RSxFQUFFLEVBQUVBLEdBQUcyRyxHQUFHbEMsRUFBRTFFLEVBQUVDLEtBQUt3RyxFQUFFSyxFQUFFN0csR0FBR0EsS0FBSyxPQUFPMmdCLEdBQUduYSxFQUFFaUcsTUFBTWpJLEVBQUUsRUFBRXhFLEVBQUUsRUFBRUEsT0FBRSxHQUFRLFNBQVM2Z0IsR0FBR3JjLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXNjLFFBQStFLE1BQXZFLGFBQWF0YyxFQUFnQixLQUFiQSxFQUFFQSxFQUFFdWMsV0FBZ0IsS0FBS3RjLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLEVBQUUsU0FBU3djLEtBQUssT0FBTSxFQUFHLFNBQVNDLEtBQUssT0FBTSxFQUNqWSxTQUFTQyxHQUFHMWMsR0FBRyxTQUFTQyxFQUFFQSxFQUFFekUsRUFBRXdHLEVBQUVLLEVBQUVGLEdBQTZHLElBQUksSUFBSTVHLEtBQWxIbUYsS0FBS2ljLFdBQVcxYyxFQUFFUyxLQUFLa2MsWUFBWTVhLEVBQUV0QixLQUFLK0IsS0FBS2pILEVBQUVrRixLQUFLK1csWUFBWXBWLEVBQUUzQixLQUFLbEMsT0FBTzJELEVBQUV6QixLQUFLbWMsY0FBYyxLQUFrQjdjLEVBQUVBLEVBQUVqRCxlQUFleEIsS0FBSzBFLEVBQUVELEVBQUV6RSxHQUFHbUYsS0FBS25GLEdBQUcwRSxFQUFFQSxFQUFFb0MsR0FBR0EsRUFBRTlHLElBQWdJLE9BQTVIbUYsS0FBS29jLG9CQUFvQixNQUFNemEsRUFBRTBhLGlCQUFpQjFhLEVBQUUwYSxrQkFBaUIsSUFBSzFhLEVBQUUyYSxhQUFhUixHQUFHQyxHQUFHL2IsS0FBS3VjLHFCQUFxQlIsR0FBVS9iLEtBQzFFLE9BRCtFcEYsRUFBRTJFLEVBQUVuRCxVQUFVLENBQUNvZ0IsZUFBZSxXQUFXeGMsS0FBS3FjLGtCQUFpQixFQUFHLElBQUkvYyxFQUFFVSxLQUFLK1csWUFBWXpYLElBQUlBLEVBQUVrZCxlQUFlbGQsRUFBRWtkLGlCQUFpQixrQkFBbUJsZCxFQUFFZ2QsY0FDN2VoZCxFQUFFZ2QsYUFBWSxHQUFJdGMsS0FBS29jLG1CQUFtQk4sS0FBS1csZ0JBQWdCLFdBQVcsSUFBSW5kLEVBQUVVLEtBQUsrVyxZQUFZelgsSUFBSUEsRUFBRW1kLGdCQUFnQm5kLEVBQUVtZCxrQkFBa0Isa0JBQW1CbmQsRUFBRW9kLGVBQWVwZCxFQUFFb2QsY0FBYSxHQUFJMWMsS0FBS3VjLHFCQUFxQlQsS0FBS2EsUUFBUSxhQUFhQyxhQUFhZCxLQUFZdmMsRUFDaFIsSUFBb0xzZCxHQUFHQyxHQUFHQyxHQUF0TEMsR0FBRyxDQUFDQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLFNBQVM5ZCxHQUFHLE9BQU9BLEVBQUU4ZCxXQUFXQyxLQUFLQyxPQUFPakIsaUJBQWlCLEVBQUVrQixVQUFVLEdBQUdDLEdBQUd4QixHQUFHZ0IsSUFBSVMsR0FBRzdpQixFQUFFLEdBQUdvaUIsR0FBRyxDQUFDVSxLQUFLLEVBQUVDLE9BQU8sSUFBSUMsR0FBRzVCLEdBQUd5QixJQUFhSSxHQUFHampCLEVBQUUsR0FBRzZpQixHQUFHLENBQUNLLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsaUJBQWlCQyxHQUFHQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxTQUFTdGYsR0FBRyxZQUFPLElBQVNBLEVBQUVzZixjQUFjdGYsRUFBRXVmLGNBQWN2ZixFQUFFMFQsV0FBVzFULEVBQUV3ZixVQUFVeGYsRUFBRXVmLFlBQVl2ZixFQUFFc2YsZUFBZUcsVUFBVSxTQUFTemYsR0FBRyxNQUFHLGNBQzNlQSxFQUFTQSxFQUFFeWYsV0FBVXpmLElBQUl5ZCxLQUFLQSxJQUFJLGNBQWN6ZCxFQUFFeUMsTUFBTThhLEdBQUd2ZCxFQUFFd2UsUUFBUWYsR0FBR2UsUUFBUWhCLEdBQUd4ZCxFQUFFeWUsUUFBUWhCLEdBQUdnQixTQUFTakIsR0FBR0QsR0FBRyxFQUFFRSxHQUFHemQsR0FBVXVkLEtBQUltQyxVQUFVLFNBQVMxZixHQUFHLE1BQU0sY0FBY0EsRUFBRUEsRUFBRTBmLFVBQVVsQyxNQUFNbUMsR0FBR2pELEdBQUc2QixJQUFpQ3FCLEdBQUdsRCxHQUE3QnBoQixFQUFFLEdBQUdpakIsR0FBRyxDQUFDc0IsYUFBYSxLQUE0Q0MsR0FBR3BELEdBQTlCcGhCLEVBQUUsR0FBRzZpQixHQUFHLENBQUNtQixjQUFjLEtBQTBFUyxHQUFHckQsR0FBNURwaEIsRUFBRSxHQUFHb2lCLEdBQUcsQ0FBQ3NDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEtBQXNIQyxHQUFHekQsR0FBeEdwaEIsRUFBRSxHQUFHb2lCLEdBQUcsQ0FBQzBDLGNBQWMsU0FBU3BnQixHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFb2dCLGNBQWMzWSxPQUFPMlksa0JBQWdEQyxHQUFHM0QsR0FBckJwaEIsRUFBRSxHQUFHb2lCLEdBQUcsQ0FBQzRDLEtBQUssS0FBY0MsR0FBRyxDQUFDQyxJQUFJLFNBQ3hmQyxTQUFTLElBQUlDLEtBQUssWUFBWUMsR0FBRyxVQUFVQyxNQUFNLGFBQWFDLEtBQUssWUFBWUMsSUFBSSxTQUFTQyxJQUFJLEtBQUtDLEtBQUssY0FBY0MsS0FBSyxjQUFjQyxPQUFPLGFBQWFDLGdCQUFnQixnQkFBZ0JDLEdBQUcsQ0FBQ0MsRUFBRSxZQUFZQyxFQUFFLE1BQU1DLEdBQUcsUUFBUUMsR0FBRyxRQUFRQyxHQUFHLFFBQVFDLEdBQUcsVUFBVUMsR0FBRyxNQUFNQyxHQUFHLFFBQVFDLEdBQUcsV0FBV0MsR0FBRyxTQUFTQyxHQUFHLElBQUlDLEdBQUcsU0FBU0MsR0FBRyxXQUFXQyxHQUFHLE1BQU1DLEdBQUcsT0FBT0MsR0FBRyxZQUFZQyxHQUFHLFVBQVVDLEdBQUcsYUFBYUMsR0FBRyxZQUFZQyxHQUFHLFNBQVNDLEdBQUcsU0FBU0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUN0ZkMsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksTUFBTUMsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksVUFBVUMsSUFBSSxhQUFhQyxJQUFJLFFBQVFDLEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVNDLEdBQUc5akIsR0FBRyxJQUFJQyxFQUFFUyxLQUFLK1csWUFBWSxPQUFPeFgsRUFBRWlmLGlCQUFpQmpmLEVBQUVpZixpQkFBaUJsZixNQUFJQSxFQUFFeWpCLEdBQUd6akIsT0FBTUMsRUFBRUQsR0FBTSxTQUFTbWYsS0FBSyxPQUFPMkUsR0FDOVIsSUFDaUVDLEdBQUdySCxHQUQ3RHBoQixFQUFFLEdBQUc2aUIsR0FBRyxDQUFDMWhCLElBQUksU0FBU3VELEdBQUcsR0FBR0EsRUFBRXZELElBQUksQ0FBQyxJQUFJd0QsRUFBRXNnQixHQUFHdmdCLEVBQUV2RCxNQUFNdUQsRUFBRXZELElBQUksR0FBRyxpQkFBaUJ3RCxFQUFFLE9BQU9BLEVBQUUsTUFBTSxhQUFhRCxFQUFFeUMsS0FBYyxNQUFSekMsRUFBRXFjLEdBQUdyYyxJQUFVLFFBQVFyQyxPQUFPRyxhQUFha0MsR0FBSSxZQUFZQSxFQUFFeUMsTUFBTSxVQUFVekMsRUFBRXlDLEtBQUsyZSxHQUFHcGhCLEVBQUVzYyxVQUFVLGVBQWUsSUFBSTBILEtBQUssRUFBRUMsU0FBUyxFQUFFbkYsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFaUYsT0FBTyxFQUFFQyxPQUFPLEVBQUVqRixpQkFBaUJDLEdBQUc1QyxTQUFTLFNBQVN2YyxHQUFHLE1BQU0sYUFBYUEsRUFBRXlDLEtBQUs0WixHQUFHcmMsR0FBRyxHQUFHc2MsUUFBUSxTQUFTdGMsR0FBRyxNQUFNLFlBQVlBLEVBQUV5QyxNQUFNLFVBQVV6QyxFQUFFeUMsS0FBS3pDLEVBQUVzYyxRQUFRLEdBQUc4SCxNQUFNLFNBQVNwa0IsR0FBRyxNQUFNLGFBQzdlQSxFQUFFeUMsS0FBSzRaLEdBQUdyYyxHQUFHLFlBQVlBLEVBQUV5QyxNQUFNLFVBQVV6QyxFQUFFeUMsS0FBS3pDLEVBQUVzYyxRQUFRLE1BQTRJK0gsR0FBRzNILEdBQTdIcGhCLEVBQUUsR0FBR2lqQixHQUFHLENBQUMxRyxVQUFVLEVBQUV5TSxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxtQkFBbUIsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxVQUFVLEtBQW1JQyxHQUFHckksR0FBckhwaEIsRUFBRSxHQUFHNmlCLEdBQUcsQ0FBQzZHLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUVsRyxPQUFPLEVBQUVDLFFBQVEsRUFBRUgsUUFBUSxFQUFFQyxTQUFTLEVBQUVHLGlCQUFpQkMsTUFBMEVnRyxHQUFHekksR0FBM0RwaEIsRUFBRSxHQUFHb2lCLEdBQUcsQ0FBQ25WLGFBQWEsRUFBRTBYLFlBQVksRUFBRUMsY0FBYyxLQUMvUGtGLEdBQUcxSSxHQUQ2UXBoQixFQUFFLEdBQUdpakIsR0FBRyxDQUFDOEcsT0FBTyxTQUFTcmxCLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFcWxCLE9BQU8sZ0JBQWdCcmxCLEdBQUdBLEVBQUVzbEIsWUFBWSxHQUNsZkMsT0FBTyxTQUFTdmxCLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFdWxCLE9BQU8sZ0JBQWdCdmxCLEdBQUdBLEVBQUV3bEIsWUFBWSxlQUFleGxCLEdBQUdBLEVBQUV5bEIsV0FBVyxHQUFHQyxPQUFPLEVBQUVDLFVBQVUsS0FBY0MsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUlDLEdBQUdyZSxHQUFJLHFCQUFxQkMsT0FBT3FlLEdBQUcsS0FBS3RlLEdBQUksaUJBQWlCdEksV0FBVzRtQixHQUFHNW1CLFNBQVM2bUIsY0FBYyxJQUFJQyxHQUFHeGUsR0FBSSxjQUFjQyxTQUFTcWUsR0FBR0csR0FBR3plLEtBQU1xZSxJQUFJQyxJQUFJLEVBQUVBLElBQUksSUFBSUEsSUFBSUksR0FBR3ZvQixPQUFPRyxhQUFhLElBQUlxb0IsSUFBRyxFQUMxVyxTQUFTQyxHQUFHcG1CLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJNGxCLEdBQUcxVCxRQUFRalMsRUFBRXFjLFNBQVMsSUFBSyxVQUFVLE9BQU8sTUFBTXJjLEVBQUVxYyxRQUFRLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLE9BQU0sRUFBRyxRQUFRLE9BQU0sR0FBSSxTQUFTK0osR0FBR3JtQixHQUFjLE1BQU0sc0JBQWpCQSxFQUFFQSxFQUFFcWUsUUFBYSxjQUFrQnJlLEtBQUcsU0FBU0EsRUFBRUEsRUFBRXNnQixLQUFLLEtBQUssSUFBSWdHLElBQUcsRUFFOVEsSUFBSUMsR0FBRyxDQUFDQyxPQUFNLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHLGtCQUFpQixFQUFHQyxPQUFNLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxVQUFTLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxLQUFJLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxLQUFJLEVBQUdDLE1BQUssR0FBSSxTQUFTQyxHQUFHdG5CLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRTBMLFVBQVUxTCxFQUFFMEwsU0FBUzFELGNBQWMsTUFBTSxVQUFVL0gsSUFBSXNtQixHQUFHdm1CLEVBQUV5QyxNQUFNLGFBQWF4QyxFQUFRLFNBQVNzbkIsR0FBR3ZuQixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRzRZLEdBQUc1WSxHQUFzQixHQUFuQnlFLEVBQUV1bkIsR0FBR3ZuQixFQUFFLGFBQWdCbkIsU0FBU3ZELEVBQUUsSUFBSTJpQixHQUFHLFdBQVcsU0FBUyxLQUFLM2lCLEVBQUVDLEdBQUd3RSxFQUFFb0QsS0FBSyxDQUFDcWtCLE1BQU1sc0IsRUFBRW1zQixVQUFVem5CLEtBQUssSUFBSTBuQixHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHN25CLEdBQUc4bkIsR0FBRzluQixFQUFFLEdBQUcsU0FBUytuQixHQUFHL25CLEdBQWUsR0FBR21NLEVBQVQ2YixHQUFHaG9CLElBQVksT0FBT0EsRUFDbmUsU0FBU2lvQixHQUFHam9CLEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLEVBQUUsSUFBSWlvQixJQUFHLEVBQUcsR0FBRzFnQixFQUFHLENBQUMsSUFBSTJnQixHQUFHLEdBQUczZ0IsRUFBRyxDQUFDLElBQUk0Z0IsR0FBRyxZQUFZbHBCLFNBQVMsSUFBSWtwQixHQUFHLENBQUMsSUFBSUMsR0FBR25wQixTQUFTcUcsY0FBYyxPQUFPOGlCLEdBQUdwZixhQUFhLFVBQVUsV0FBV21mLEdBQUcsbUJBQW9CQyxHQUFHQyxRQUFRSCxHQUFHQyxRQUFRRCxJQUFHLEVBQUdELEdBQUdDLE1BQU1qcEIsU0FBUzZtQixjQUFjLEVBQUU3bUIsU0FBUzZtQixjQUFjLFNBQVN3QyxLQUFLWixLQUFLQSxHQUFHYSxZQUFZLG1CQUFtQkMsSUFBSWIsR0FBR0QsR0FBRyxNQUFNLFNBQVNjLEdBQUd6b0IsR0FBRyxHQUFHLFVBQVVBLEVBQUV1SSxjQUFjd2YsR0FBR0gsSUFBSSxDQUFDLElBQUkzbkIsRUFBRSxHQUF5QixHQUF0QnNuQixHQUFHdG5CLEVBQUUybkIsR0FBRzVuQixFQUFFeVQsR0FBR3pULElBQUlBLEVBQUU2bkIsR0FBTW5ULEdBQUcxVSxFQUFFQyxPQUFPLENBQUN5VSxJQUFHLEVBQUcsSUFBSUosR0FBR3RVLEVBQUVDLEdBQVQsUUFBb0J5VSxJQUFHLEVBQUdFLFFBQzNlLFNBQVM4VCxHQUFHMW9CLEVBQUVDLEVBQUUxRSxHQUFHLFlBQVl5RSxHQUFHdW9CLEtBQVVYLEdBQUdyc0IsR0FBUm9zQixHQUFHMW5CLEdBQVUwb0IsWUFBWSxtQkFBbUJGLEtBQUssYUFBYXpvQixHQUFHdW9CLEtBQUssU0FBU0ssR0FBRzVvQixHQUFHLEdBQUcsb0JBQW9CQSxHQUFHLFVBQVVBLEdBQUcsWUFBWUEsRUFBRSxPQUFPK25CLEdBQUdILElBQUksU0FBU2lCLEdBQUc3b0IsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEVBQUUsT0FBTytuQixHQUFHOW5CLEdBQUcsU0FBUzZvQixHQUFHOW9CLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxHQUFHLFdBQVdBLEVBQUUsT0FBTytuQixHQUFHOW5CLEdBQW1FLElBQUk4b0IsR0FBRyxtQkFBb0JudEIsT0FBTzRYLEdBQUc1WCxPQUFPNFgsR0FBNUcsU0FBWXhULEVBQUVDLEdBQUcsT0FBT0QsSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUVBLEdBQUksRUFBRUMsSUFBSUQsR0FBSUEsR0FBR0MsR0FBSUEsR0FBb0Qrb0IsR0FBR3B0QixPQUFPa0IsVUFBVUMsZUFDN2EsU0FBU2tzQixHQUFHanBCLEVBQUVDLEdBQUcsR0FBRzhvQixHQUFHL29CLEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUcscUJBQWtCRCxFQUFsQixjQUFrQkEsS0FBRyxPQUFPQSxHQUFHLHFCQUFrQkMsRUFBbEIsY0FBa0JBLEtBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSTFFLEVBQUVLLE9BQU95QyxLQUFLMkIsR0FBR3hFLEVBQUVJLE9BQU95QyxLQUFLNEIsR0FBRyxHQUFHMUUsRUFBRXVELFNBQVN0RCxFQUFFc0QsT0FBTyxPQUFNLEVBQUcsSUFBSXRELEVBQUUsRUFBRUEsRUFBRUQsRUFBRXVELE9BQU90RCxJQUFJLElBQUl3dEIsR0FBRzN0QixLQUFLNEUsRUFBRTFFLEVBQUVDLE1BQU11dEIsR0FBRy9vQixFQUFFekUsRUFBRUMsSUFBSXlFLEVBQUUxRSxFQUFFQyxLQUFLLE9BQU0sRUFBRyxPQUFNLEVBQUcsU0FBUzB0QixHQUFHbHBCLEdBQUcsS0FBS0EsR0FBR0EsRUFBRTRPLFlBQVk1TyxFQUFFQSxFQUFFNE8sV0FBVyxPQUFPNU8sRUFDbFUsU0FBU21wQixHQUFHbnBCLEVBQUVDLEdBQUcsSUFBd0J6RSxFQUFwQkQsRUFBRTJ0QixHQUFHbHBCLEdBQU8sSUFBSkEsRUFBRSxFQUFZekUsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTBULFNBQVMsQ0FBMEIsR0FBekJ6VCxFQUFFd0UsRUFBRXpFLEVBQUUwUyxZQUFZblAsT0FBVWtCLEdBQUdDLEdBQUd6RSxHQUFHeUUsRUFBRSxNQUFNLENBQUNtcEIsS0FBSzd0QixFQUFFOHRCLE9BQU9wcEIsRUFBRUQsR0FBR0EsRUFBRXhFLEVBQUV3RSxFQUFFLENBQUMsS0FBS3pFLEdBQUcsQ0FBQyxHQUFHQSxFQUFFK3RCLFlBQVksQ0FBQy90QixFQUFFQSxFQUFFK3RCLFlBQVksTUFBTXRwQixFQUFFekUsRUFBRUEsRUFBRXFZLFdBQVdyWSxPQUFFLEVBQU9BLEVBQUUydEIsR0FBRzN0QixJQUMxTixTQUFTZ3VCLEtBQUssSUFBSSxJQUFJdnBCLEVBQUV5SCxPQUFPeEgsRUFBRW9NLEtBQUtwTSxhQUFhRCxFQUFFd3BCLG1CQUFtQixDQUFDLElBQUksSUFBSWp1QixFQUFFLGlCQUFrQjBFLEVBQUV3cEIsY0FBY3hGLFNBQVN5RixLQUFLLE1BQU1sdUIsR0FBR0QsR0FBRSxFQUFHLElBQUdBLEVBQXlCLE1BQU0wRSxFQUFFb00sSUFBL0JyTSxFQUFFQyxFQUFFd3BCLGVBQWdDdnFCLFVBQVUsT0FBT2UsRUFBRSxTQUFTMHBCLEdBQUczcEIsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFMEwsVUFBVTFMLEVBQUUwTCxTQUFTMUQsY0FBYyxPQUFPL0gsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUV5QyxNQUFNLFdBQVd6QyxFQUFFeUMsTUFBTSxRQUFRekMsRUFBRXlDLE1BQU0sUUFBUXpDLEVBQUV5QyxNQUFNLGFBQWF6QyxFQUFFeUMsT0FBTyxhQUFheEMsR0FBRyxTQUFTRCxFQUFFNHBCLGlCQUN4WixJQUFJQyxHQUFHcmlCLEdBQUksaUJBQWlCdEksVUFBVSxJQUFJQSxTQUFTNm1CLGFBQWErRCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQzNGLFNBQVNDLEdBQUdscUIsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWtNLFNBQVNsTSxFQUFFQSxFQUFFMkQsU0FBUyxJQUFJM0QsRUFBRTBULFNBQVMxVCxFQUFFQSxFQUFFNlIsY0FBYzZjLElBQUksTUFBTUgsSUFBSUEsS0FBS3pkLEdBQUc3USxLQUFVLG1CQUFMQSxFQUFFc3VCLEtBQXlCSCxHQUFHbnVCLEdBQUdBLEVBQUUsQ0FBQzJ1QixNQUFNM3VCLEVBQUU0dUIsZUFBZUMsSUFBSTd1QixFQUFFOHVCLGNBQXVGOXVCLEVBQUUsQ0FBQyt1QixZQUEzRS91QixHQUFHQSxFQUFFNFIsZUFBZTVSLEVBQUU0UixjQUFjb2QsYUFBYS9pQixRQUFRZ2pCLGdCQUErQkYsV0FBV0csYUFBYWx2QixFQUFFa3ZCLGFBQWFDLFVBQVVudkIsRUFBRW12QixVQUFVQyxZQUFZcHZCLEVBQUVvdkIsYUFBY1osSUFBSWYsR0FBR2UsR0FBR3h1QixLQUFLd3VCLEdBQUd4dUIsRUFBc0IsR0FBcEJBLEVBQUVnc0IsR0FBR3VDLEdBQUcsYUFBZ0JqckIsU0FBU21CLEVBQUUsSUFBSWllLEdBQUcsV0FBVyxTQUFTLEtBQUtqZSxFQUFFMUUsR0FBR3lFLEVBQUVvRCxLQUFLLENBQUNxa0IsTUFBTXhuQixFQUFFeW5CLFVBQVVsc0IsSUFBSXlFLEVBQUV6QixPQUFPc3JCLE1BQ2pmOVAsR0FBRyxtakJBQW1qQjliLE1BQU0sS0FDNWpCLEdBQUc4YixHQUFHLG9SQUFvUjliLE1BQU0sS0FBSyxHQUFHOGIsR0FBR0QsR0FBRyxHQUFHLElBQUksSUFBSThRLEdBQUcscUZBQXFGM3NCLE1BQU0sS0FBSzRzQixHQUFHLEVBQUVBLEdBQUdELEdBQUcvckIsT0FBT2dzQixLQUFLaFIsR0FBRzlPLElBQUk2ZixHQUFHQyxJQUFJLEdBQUd4akIsRUFBRyxlQUFlLENBQUMsV0FBVyxjQUNsZUEsRUFBRyxlQUFlLENBQUMsV0FBVyxjQUFjQSxFQUFHLGlCQUFpQixDQUFDLGFBQWEsZ0JBQWdCQSxFQUFHLGlCQUFpQixDQUFDLGFBQWEsZ0JBQWdCRCxFQUFHLFdBQVcsb0VBQW9FbkosTUFBTSxNQUFNbUosRUFBRyxXQUFXLHVGQUF1Rm5KLE1BQU0sTUFBTW1KLEVBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLFdBQVcsWUFBWSxVQUFVQSxFQUFHLG1CQUFtQiwyREFBMkRuSixNQUFNLE1BQzVmbUosRUFBRyxxQkFBcUIsNkRBQTZEbkosTUFBTSxNQUFNbUosRUFBRyxzQkFBc0IsOERBQThEbkosTUFBTSxNQUFNLElBQUk2c0IsR0FBRyxzTkFBc043c0IsTUFBTSxLQUFLOHNCLEdBQUcsSUFBSTdqQixJQUFJLDBDQUEwQ2pKLE1BQU0sS0FBSytzQixPQUFPRixLQUNuZixTQUFTRyxHQUFHbHJCLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUV3RSxFQUFFeUMsTUFBTSxnQkFBZ0J6QyxFQUFFNmMsY0FBY3RoQixFQS9DakUsU0FBWXlFLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csRUFBRUssRUFBRUYsRUFBRUQsRUFBRUQsR0FBNEIsR0FBekJ3VCxHQUFHbFIsTUFBTTdELEtBQUs3QixXQUFjdVcsR0FBRyxDQUFDLElBQUdBLEdBQWdDLE1BQU1qVSxNQUFNa0MsRUFBRSxNQUExQyxJQUFJbEksRUFBRWthLEdBQUdELElBQUcsRUFBR0MsR0FBRyxLQUE4QkMsS0FBS0EsSUFBRyxFQUFHQyxHQUFHcGEsSUErQ2pFZ3dCLENBQUczdkIsRUFBRXlFLE9BQUUsRUFBT0QsR0FBR0EsRUFBRTZjLGNBQWMsS0FDcEcsU0FBU2lMLEdBQUc5bkIsRUFBRUMsR0FBR0EsRUFBRSxJQUFPLEVBQUZBLEdBQUssSUFBSSxJQUFJMUUsRUFBRSxFQUFFQSxFQUFFeUUsRUFBRWxCLE9BQU92RCxJQUFJLENBQUMsSUFBSUMsRUFBRXdFLEVBQUV6RSxHQUFHeUcsRUFBRXhHLEVBQUVpc0IsTUFBTWpzQixFQUFFQSxFQUFFa3NCLFVBQVUxbkIsRUFBRSxDQUFDLElBQUlxQyxPQUFFLEVBQU8sR0FBR3BDLEVBQUUsSUFBSSxJQUFJa0MsRUFBRTNHLEVBQUVzRCxPQUFPLEVBQUUsR0FBR3FELEVBQUVBLElBQUksQ0FBQyxJQUFJRCxFQUFFMUcsRUFBRTJHLEdBQUdGLEVBQUVDLEVBQUVrcEIsU0FBU2p3QixFQUFFK0csRUFBRTJhLGNBQTJCLEdBQWIzYSxFQUFFQSxFQUFFbXBCLFNBQVlwcEIsSUFBSUksR0FBR0wsRUFBRWliLHVCQUF1QixNQUFNamQsRUFBRWtyQixHQUFHbHBCLEVBQUVFLEVBQUUvRyxHQUFHa0gsRUFBRUosT0FBTyxJQUFJRSxFQUFFLEVBQUVBLEVBQUUzRyxFQUFFc0QsT0FBT3FELElBQUksQ0FBb0QsR0FBNUNGLEdBQVBDLEVBQUUxRyxFQUFFMkcsSUFBT2lwQixTQUFTandCLEVBQUUrRyxFQUFFMmEsY0FBYzNhLEVBQUVBLEVBQUVtcEIsU0FBWXBwQixJQUFJSSxHQUFHTCxFQUFFaWIsdUJBQXVCLE1BQU1qZCxFQUFFa3JCLEdBQUdscEIsRUFBRUUsRUFBRS9HLEdBQUdrSCxFQUFFSixJQUFJLEdBQUdxVCxHQUFHLE1BQU10VixFQUFFdVYsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUt2VixFQUMxYSxTQUFTd0IsR0FBRXhCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUUrdkIsR0FBR3JyQixHQUFHekUsRUFBRXdFLEVBQUUsV0FBV3pFLEVBQUVnd0IsSUFBSS92QixLQUFLZ3dCLEdBQUd2ckIsRUFBRUQsRUFBRSxHQUFFLEdBQUl6RSxFQUFFZ00sSUFBSS9MLElBQUksSUFBSWl3QixHQUFHLGtCQUFrQnZRLEtBQUt3USxTQUFTMW9CLFNBQVMsSUFBSWlGLE1BQU0sR0FBRyxTQUFTMGpCLEdBQUczckIsR0FBR0EsRUFBRXlyQixNQUFNenJCLEVBQUV5ckIsS0FBSSxFQUFHdmtCLEVBQUcvSSxTQUFRLFNBQVM4QixHQUFHK3FCLEdBQUdPLElBQUl0ckIsSUFBSTJyQixHQUFHM3JCLEdBQUUsRUFBR0QsRUFBRSxNQUFNNHJCLEdBQUczckIsR0FBRSxFQUFHRCxFQUFFLFVBQ3RPLFNBQVM0ckIsR0FBRzVyQixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRSxFQUFFbkQsVUFBVUMsYUFBUSxJQUFTRCxVQUFVLEdBQUdBLFVBQVUsR0FBRyxFQUFFd0QsRUFBRTlHLEVBQTZELEdBQTNELG9CQUFvQnlFLEdBQUcsSUFBSXpFLEVBQUUwVCxXQUFXNU0sRUFBRTlHLEVBQUU2UixlQUFrQixPQUFPNVIsSUFBSXlFLEdBQUcrcUIsR0FBR08sSUFBSXZyQixHQUFHLENBQUMsR0FBRyxXQUFXQSxFQUFFLE9BQU9nQyxHQUFHLEVBQUVLLEVBQUU3RyxFQUFFLElBQUkyRyxFQUFFbXBCLEdBQUdqcEIsR0FBR0gsRUFBRWxDLEVBQUUsTUFBTUMsRUFBRSxVQUFVLFVBQVVrQyxFQUFFb3BCLElBQUlycEIsS0FBS2pDLElBQUkrQixHQUFHLEdBQUd3cEIsR0FBR25wQixFQUFFckMsRUFBRWdDLEVBQUUvQixHQUFHa0MsRUFBRW9GLElBQUlyRixJQUNsUyxTQUFTc3BCLEdBQUd4ckIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsSUFBSXdHLEVBQUU4WCxHQUFHL2QsSUFBSWtFLEdBQUcsWUFBTyxJQUFTK0IsRUFBRSxFQUFFQSxHQUFHLEtBQUssRUFBRUEsRUFBRTRaLEdBQUcsTUFBTSxLQUFLLEVBQUU1WixFQUFFOFosR0FBRyxNQUFNLFFBQVE5WixFQUFFNlosR0FBR3RnQixFQUFFeUcsRUFBRXRGLEtBQUssS0FBS3VELEVBQUUxRSxFQUFFeUUsR0FBR2dDLE9BQUUsR0FBUThTLElBQUksZUFBZTdVLEdBQUcsY0FBY0EsR0FBRyxVQUFVQSxJQUFJK0IsR0FBRSxHQUFJeEcsT0FBRSxJQUFTd0csRUFBRWhDLEVBQUVnVixpQkFBaUIvVSxFQUFFMUUsRUFBRSxDQUFDc3dCLFNBQVEsRUFBR0MsUUFBUTlwQixJQUFJaEMsRUFBRWdWLGlCQUFpQi9VLEVBQUUxRSxHQUFFLFFBQUksSUFBU3lHLEVBQUVoQyxFQUFFZ1YsaUJBQWlCL1UsRUFBRTFFLEVBQUUsQ0FBQ3V3QixRQUFROXBCLElBQUloQyxFQUFFZ1YsaUJBQWlCL1UsRUFBRTFFLEdBQUUsR0FDcFcsU0FBU3lnQixHQUFHaGMsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLElBQUlLLEVBQUU3RyxFQUFFLEdBQUcsSUFBTyxFQUFGeUUsSUFBTSxJQUFPLEVBQUZBLElBQU0sT0FBT3pFLEVBQUV3RSxFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU94RSxFQUFFLE9BQU8sSUFBSTJHLEVBQUUzRyxFQUFFNlAsSUFBSSxHQUFHLElBQUlsSixHQUFHLElBQUlBLEVBQUUsQ0FBQyxJQUFJRCxFQUFFMUcsRUFBRTBZLFVBQVVtRSxjQUFjLEdBQUduVyxJQUFJRixHQUFHLElBQUlFLEVBQUUrTSxVQUFVL00sRUFBRTBSLGFBQWE1UixFQUFFLE1BQU0sR0FBRyxJQUFJRyxFQUFFLElBQUlBLEVBQUUzRyxFQUFFb2EsT0FBTyxPQUFPelQsR0FBRyxDQUFDLElBQUlGLEVBQUVFLEVBQUVrSixJQUFJLElBQUcsSUFBSXBKLEdBQUcsSUFBSUEsTUFBS0EsRUFBRUUsRUFBRStSLFVBQVVtRSxpQkFBa0JyVyxHQUFHLElBQUlDLEVBQUVnTixVQUFVaE4sRUFBRTJSLGFBQWE1UixHQUFFLE9BQU9HLEVBQUVBLEVBQUV5VCxPQUFPLEtBQUssT0FBTzFULEdBQUcsQ0FBUyxHQUFHLFFBQVhDLEVBQUU2VixHQUFHOVYsSUFBZSxPQUFlLEdBQUcsS0FBWEQsRUFBRUUsRUFBRWtKLE1BQWMsSUFBSXBKLEVBQUUsQ0FBQ3pHLEVBQUU2RyxFQUFFRixFQUFFLFNBQVNuQyxFQUFFa0MsRUFBRUEsRUFBRTBSLFlBQVlwWSxFQUFFQSxFQUFFb2EsUUF2RDdjLFNBQVk1VixFQUFFQyxFQUFFMUUsR0FBRyxHQUFHb1osR0FBRyxPQUFPM1UsRUFBRUMsRUFBRTFFLEdBQUdvWixJQUFHLEVBQUcsSUFBV0YsR0FBR3pVLEVBQUVDLEVBQUUxRSxHQUFsQixRQUE2Qm9aLElBQUcsRUFBR0MsTUF1RG9ZbVgsRUFBRyxXQUFXLElBQUl2d0IsRUFBRTZHLEVBQUVMLEVBQUV5UixHQUFHbFksR0FBRzRHLEVBQUUsR0FDcGZuQyxFQUFFLENBQUMsSUFBSWtDLEVBQUUyWCxHQUFHOWQsSUFBSWlFLEdBQUcsUUFBRyxJQUFTa0MsRUFBRSxDQUFDLElBQUlELEVBQUVpYyxHQUFHcmUsRUFBRUcsRUFBRSxPQUFPQSxHQUFHLElBQUssV0FBVyxHQUFHLElBQUlxYyxHQUFHOWdCLEdBQUcsTUFBTXlFLEVBQUUsSUFBSyxVQUFVLElBQUssUUFBUWlDLEVBQUU4aEIsR0FBRyxNQUFNLElBQUssVUFBVWxrQixFQUFFLFFBQVFvQyxFQUFFNmQsR0FBRyxNQUFNLElBQUssV0FBV2pnQixFQUFFLE9BQU9vQyxFQUFFNmQsR0FBRyxNQUFNLElBQUssYUFBYSxJQUFLLFlBQVk3ZCxFQUFFNmQsR0FBRyxNQUFNLElBQUssUUFBUSxHQUFHLElBQUl2a0IsRUFBRTZqQixPQUFPLE1BQU1wZixFQUFFLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWNpQyxFQUFFMGQsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU8xZCxFQUMxaUIyZCxHQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxhQUFhM2QsRUFBRThpQixHQUFHLE1BQU0sS0FBS3RMLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHMVgsRUFBRThkLEdBQUcsTUFBTSxLQUFLbkcsR0FBRzNYLEVBQUVrakIsR0FBRyxNQUFNLElBQUssU0FBU2xqQixFQUFFcWMsR0FBRyxNQUFNLElBQUssUUFBUXJjLEVBQUVtakIsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLE1BQU0sSUFBSyxRQUFRbmpCLEVBQUVrZSxHQUFHLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUIsSUFBSyxnQkFBZ0IsSUFBSyxjQUFjLElBQUssY0FBYyxJQUFLLGFBQWEsSUFBSyxjQUFjLElBQUssWUFBWWxlLEVBQUVvaUIsR0FBRyxJQUFJemtCLEVBQUUsSUFBTyxFQUFGSyxHQUFLRixHQUFHSCxHQUFHLFdBQVdJLEVBQUVQLEVBQUVHLEVBQUUsT0FBT3NDLEVBQUVBLEVBQUUsVUFBVSxLQUFLQSxFQUFFdEMsRUFBRSxHQUFHLElBQUksSUFBUUwsRUFBSm5ELEVBQUVaLEVBQUksT0FDL2VZLEdBQUcsQ0FBSyxJQUFJc0QsR0FBUkgsRUFBRW5ELEdBQVU4WCxVQUFzRixHQUE1RSxJQUFJM1UsRUFBRThMLEtBQUssT0FBTzNMLElBQUlILEVBQUVHLEVBQUUsT0FBT0QsSUFBYyxPQUFWQyxFQUFFbVYsR0FBR3pZLEVBQUVxRCxLQUFZRyxFQUFFd0QsS0FBSzRvQixHQUFHNXZCLEVBQUVzRCxFQUFFSCxNQUFTUSxFQUFFLE1BQU0zRCxFQUFFQSxFQUFFd1osT0FBTyxFQUFFaFcsRUFBRWQsU0FBU29ELEVBQUUsSUFBSUQsRUFBRUMsRUFBRXJDLEVBQUUsS0FBS3RFLEVBQUV5RyxHQUFHRyxFQUFFaUIsS0FBSyxDQUFDcWtCLE1BQU12bEIsRUFBRXdsQixVQUFVOW5CLE1BQU0sR0FBRyxJQUFPLEVBQUZLLEdBQUssQ0FBNEUsR0FBbkNnQyxFQUFFLGFBQWFqQyxHQUFHLGVBQWVBLEtBQXRFa0MsRUFBRSxjQUFjbEMsR0FBRyxnQkFBZ0JBLElBQTJDLElBQU8sR0FBRkMsTUFBUUosRUFBRXRFLEVBQUUrakIsZUFBZS9qQixFQUFFZ2tCLGVBQWV2SCxHQUFHblksS0FBSUEsRUFBRW9zQixPQUFnQmhxQixHQUFHQyxLQUFHQSxFQUFFRixFQUFFeUYsU0FBU3pGLEVBQUVBLEdBQUdFLEVBQUVGLEVBQUVvTCxlQUFlbEwsRUFBRXNvQixhQUFhdG9CLEVBQUVncUIsYUFBYXprQixPQUFVeEYsR0FBcUNBLEVBQUV6RyxFQUFpQixRQUFmcUUsR0FBbkNBLEVBQUV0RSxFQUFFK2pCLGVBQWUvakIsRUFBRWlrQixXQUFrQnhILEdBQUduWSxHQUFHLFFBQ2xlQSxLQUFSRSxFQUFFMlYsR0FBRzdWLEtBQVUsSUFBSUEsRUFBRXdMLEtBQUssSUFBSXhMLEVBQUV3TCxPQUFLeEwsRUFBRSxRQUFVb0MsRUFBRSxLQUFLcEMsRUFBRXJFLEdBQUt5RyxJQUFJcEMsR0FBRSxDQUFnVSxHQUEvVEQsRUFBRStmLEdBQUdqZ0IsRUFBRSxlQUFlRCxFQUFFLGVBQWVyRCxFQUFFLFFBQVcsZUFBZTRELEdBQUcsZ0JBQWdCQSxJQUFFSixFQUFFeWtCLEdBQUcza0IsRUFBRSxpQkFBaUJELEVBQUUsaUJBQWlCckQsRUFBRSxXQUFVMkQsRUFBRSxNQUFNa0MsRUFBRUMsRUFBRThsQixHQUFHL2xCLEdBQUcxQyxFQUFFLE1BQU1NLEVBQUVxQyxFQUFFOGxCLEdBQUdub0IsSUFBR3FDLEVBQUUsSUFBSXRDLEVBQUVGLEVBQUV0RCxFQUFFLFFBQVE2RixFQUFFMUcsRUFBRXlHLElBQUt4RCxPQUFPdUIsRUFBRW1DLEVBQUVvZCxjQUFjL2YsRUFBRUcsRUFBRSxLQUFLc1ksR0FBR2hXLEtBQUt4RyxLQUFJb0UsRUFBRSxJQUFJQSxFQUFFSCxFQUFFckQsRUFBRSxRQUFReUQsRUFBRXRFLEVBQUV5RyxJQUFLeEQsT0FBT2UsRUFBRUssRUFBRTBmLGNBQWN2ZixFQUFFTCxFQUFFRSxHQUFHRyxFQUFFTCxFQUFLdUMsR0FBR3BDLEVBQUVJLEVBQUUsQ0FBYSxJQUFSUixFQUFFSSxFQUFFekQsRUFBRSxFQUFNbUQsRUFBaEJLLEVBQUVxQyxFQUFrQjFDLEVBQUVBLEVBQUU0c0IsR0FBRzVzQixHQUFHbkQsSUFBUSxJQUFKbUQsRUFBRSxFQUFNRyxFQUFFRCxFQUFFQyxFQUFFQSxFQUFFeXNCLEdBQUd6c0IsR0FBR0gsSUFBSSxLQUFLLEVBQUVuRCxFQUFFbUQsR0FBR0ssRUFBRXVzQixHQUFHdnNCLEdBQUd4RCxJQUFJLEtBQUssRUFBRW1ELEVBQUVuRCxHQUFHcUQsRUFDcGYwc0IsR0FBRzFzQixHQUFHRixJQUFJLEtBQUtuRCxLQUFLLENBQUMsR0FBR3dELElBQUlILEdBQUcsT0FBT0EsR0FBR0csSUFBSUgsRUFBRWtXLFVBQVUsTUFBTTFWLEVBQUVMLEVBQUV1c0IsR0FBR3ZzQixHQUFHSCxFQUFFMHNCLEdBQUcxc0IsR0FBR0csRUFBRSxVQUFVQSxFQUFFLEtBQUssT0FBT3FDLEdBQUdtcUIsR0FBR2pxQixFQUFFRCxFQUFFRCxFQUFFckMsR0FBRSxHQUFJLE9BQU9DLEdBQUcsT0FBT0UsR0FBR3FzQixHQUFHanFCLEVBQUVwQyxFQUFFRixFQUFFRCxHQUFFLEdBQWlFLEdBQUcsWUFBMUNxQyxHQUFqQkMsRUFBRTFHLEVBQUV3c0IsR0FBR3hzQixHQUFHaU0sUUFBV2lFLFVBQVV4SixFQUFFd0osU0FBUzFELGdCQUErQixVQUFVL0YsR0FBRyxTQUFTQyxFQUFFTyxLQUFLLElBQUlWLEVBQUVrbUIsUUFBUSxHQUFHWCxHQUFHcGxCLEdBQUcsR0FBR2dtQixHQUFHbm1CLEVBQUUrbUIsT0FBTyxDQUFDL21CLEVBQUU2bUIsR0FBRyxJQUFJemxCLEVBQUV1bEIsUUFBUXptQixFQUFFQyxFQUFFd0osV0FBVyxVQUFVekosRUFBRStGLGdCQUFnQixhQUFhOUYsRUFBRU8sTUFBTSxVQUFVUCxFQUFFTyxRQUFRVixFQUFFOG1CLElBQ2xWLE9BRHlWOW1CLElBQUlBLEVBQUVBLEVBQUUvQixFQUFFeEUsSUFBSytyQixHQUFHcGxCLEVBQUVKLEVBQUV4RyxFQUFFeUcsSUFBV21CLEdBQUdBLEVBQUVuRCxFQUFFa0MsRUFBRTFHLEdBQUcsYUFBYXdFLElBQUltRCxFQUFFakIsRUFBRXlLLGdCQUN0ZXhKLEVBQUU0SixZQUFZLFdBQVc3SyxFQUFFTyxNQUFNeUssR0FBR2hMLEVBQUUsU0FBU0EsRUFBRS9GLFFBQU9nSCxFQUFFM0gsRUFBRXdzQixHQUFHeHNCLEdBQUdpTSxPQUFjekgsR0FBRyxJQUFLLFdBQWFzbkIsR0FBR25rQixJQUFJLFNBQVNBLEVBQUV5bUIsbUJBQWdCRSxHQUFHM21CLEVBQUU0bUIsR0FBR3Z1QixFQUFFd3VCLEdBQUcsTUFBSyxNQUFNLElBQUssV0FBV0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVUEsSUFBRyxFQUFHQyxHQUFHL25CLEVBQUU1RyxFQUFFeUcsR0FBRyxNQUFNLElBQUssa0JBQWtCLEdBQUc2bkIsR0FBRyxNQUFNLElBQUssVUFBVSxJQUFLLFFBQVFLLEdBQUcvbkIsRUFBRTVHLEVBQUV5RyxHQUFHLElBQUl5QixFQUFFLEdBQUdvaUIsR0FBRzVsQixFQUFFLENBQUMsT0FBT0QsR0FBRyxJQUFLLG1CQUFtQixJQUFJMkMsRUFBRSxxQkFBcUIsTUFBTTFDLEVBQUUsSUFBSyxpQkFBaUIwQyxFQUFFLG1CQUFtQixNQUFNMUMsRUFDcmYsSUFBSyxvQkFBb0IwQyxFQUFFLHNCQUFzQixNQUFNMUMsRUFBRTBDLE9BQUUsT0FBWTJqQixHQUFHRixHQUFHcG1CLEVBQUV6RSxLQUFLb0gsRUFBRSxvQkFBb0IsWUFBWTNDLEdBQUcsTUFBTXpFLEVBQUUrZ0IsVUFBVTNaLEVBQUUsc0JBQXNCQSxJQUFJc2pCLElBQUksT0FBTzFxQixFQUFFNG9CLFNBQVNtQyxJQUFJLHVCQUF1QjNqQixFQUFFLHFCQUFxQkEsR0FBRzJqQixLQUFLN2lCLEVBQUUyWSxPQUFZRixHQUFHLFVBQVJELEdBQUdqYSxHQUFrQmlhLEdBQUc5ZixNQUFNOGYsR0FBR2hPLFlBQVlxWSxJQUFHLElBQWUsR0FBVm5qQixFQUFFcWtCLEdBQUdoc0IsRUFBRW1ILElBQU83RCxTQUFTNkQsRUFBRSxJQUFJMGQsR0FBRzFkLEVBQUUzQyxFQUFFLEtBQUt6RSxFQUFFeUcsR0FBR0csRUFBRWlCLEtBQUssQ0FBQ3FrQixNQUFNOWtCLEVBQUUra0IsVUFBVXZrQixJQUFJTSxFQUFFZCxFQUFFMmQsS0FBSzdjLEVBQVcsUUFBUkEsRUFBRTRpQixHQUFHOXFCLE1BQWNvSCxFQUFFMmQsS0FBSzdjLE1BQVNBLEVBQUV1aUIsR0ExQmpLLFNBQVlobUIsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssaUJBQWlCLE9BQU9xbUIsR0FBR3BtQixHQUFHLElBQUssV0FBVyxPQUFHLEtBQUtBLEVBQUVta0IsTUFBYSxNQUFLK0IsSUFBRyxFQUFVRCxJQUFHLElBQUssWUFBWSxPQUFPbG1CLEVBQUVDLEVBQUVxZ0IsUUFBUzRGLElBQUlDLEdBQUcsS0FBS25tQixFQUFFLFFBQVEsT0FBTyxNQTBCeEJxc0IsQ0FBR3JzQixFQUFFekUsR0F6QjFiLFNBQVl5RSxFQUFFQyxHQUFHLEdBQUdxbUIsR0FBRyxNQUFNLG1CQUFtQnRtQixJQUFJNmxCLElBQUlPLEdBQUdwbUIsRUFBRUMsSUFBSUQsRUFBRW9jLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FBS3FLLElBQUcsRUFBR3RtQixHQUFHLEtBQUssT0FBT0EsR0FBRyxJQUFLLFFBQVEsT0FBTyxLQUFLLElBQUssV0FBVyxLQUFLQyxFQUFFNmUsU0FBUzdlLEVBQUUrZSxRQUFRL2UsRUFBRWdmLFVBQVVoZixFQUFFNmUsU0FBUzdlLEVBQUUrZSxPQUFPLENBQUMsR0FBRy9lLEVBQUVxc0IsTUFBTSxFQUFFcnNCLEVBQUVxc0IsS0FBS3h0QixPQUFPLE9BQU9tQixFQUFFcXNCLEtBQUssR0FBR3JzQixFQUFFbWtCLE1BQU0sT0FBT3ptQixPQUFPRyxhQUFhbUMsRUFBRW1rQixPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPNkIsSUFBSSxPQUFPaG1CLEVBQUVra0IsT0FBTyxLQUFLbGtCLEVBQUVxZ0IsS0FBSyxRQUFRLE9BQU8sTUF5QjJEaU0sQ0FBR3ZzQixFQUFFekUsTUFBMkIsR0FBeEJDLEVBQUVnc0IsR0FBR2hzQixFQUFFLGtCQUFxQnNELFNBQVNrRCxFQUFFLElBQUlxZSxHQUFHLGdCQUNuZixjQUFjLEtBQUs5a0IsRUFBRXlHLEdBQUdHLEVBQUVpQixLQUFLLENBQUNxa0IsTUFBTXpsQixFQUFFMGxCLFVBQVVsc0IsSUFBSXdHLEVBQUVzZSxLQUFLN2MsSUFBR3FrQixHQUFHM2xCLEVBQUVsQyxNQUFLLFNBQVMrckIsR0FBR2hzQixFQUFFQyxFQUFFMUUsR0FBRyxNQUFNLENBQUM2dkIsU0FBU3ByQixFQUFFcXJCLFNBQVNwckIsRUFBRTRjLGNBQWN0aEIsR0FBRyxTQUFTaXNCLEdBQUd4bkIsRUFBRUMsR0FBRyxJQUFJLElBQUkxRSxFQUFFMEUsRUFBRSxVQUFVekUsRUFBRSxHQUFHLE9BQU93RSxHQUFHLENBQUMsSUFBSWdDLEVBQUVoQyxFQUFFcUMsRUFBRUwsRUFBRWtTLFVBQVUsSUFBSWxTLEVBQUVxSixLQUFLLE9BQU9oSixJQUFJTCxFQUFFSyxFQUFZLE9BQVZBLEVBQUV3UyxHQUFHN1UsRUFBRXpFLEtBQVlDLEVBQUVneEIsUUFBUVIsR0FBR2hzQixFQUFFcUMsRUFBRUwsSUFBYyxPQUFWSyxFQUFFd1MsR0FBRzdVLEVBQUVDLEtBQVl6RSxFQUFFNEgsS0FBSzRvQixHQUFHaHNCLEVBQUVxQyxFQUFFTCxLQUFLaEMsRUFBRUEsRUFBRTRWLE9BQU8sT0FBT3BhLEVBQUUsU0FBUzJ3QixHQUFHbnNCLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU8sS0FBSyxHQUFHQSxFQUFFQSxFQUFFNFYsYUFBYTVWLEdBQUcsSUFBSUEsRUFBRXFMLEtBQUssT0FBT3JMLEdBQUksS0FDeGEsU0FBU29zQixHQUFHcHNCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csR0FBRyxJQUFJLElBQUlLLEVBQUVwQyxFQUFFMGMsV0FBV3hhLEVBQUUsR0FBRyxPQUFPNUcsR0FBR0EsSUFBSUMsR0FBRyxDQUFDLElBQUkwRyxFQUFFM0csRUFBRTBHLEVBQUVDLEVBQUV5VCxVQUFVeGEsRUFBRStHLEVBQUVnUyxVQUFVLEdBQUcsT0FBT2pTLEdBQUdBLElBQUl6RyxFQUFFLE1BQU0sSUFBSTBHLEVBQUVtSixLQUFLLE9BQU9sUSxJQUFJK0csRUFBRS9HLEVBQUU2RyxFQUFhLE9BQVZDLEVBQUU0UyxHQUFHdFosRUFBRThHLEtBQVlGLEVBQUVxcUIsUUFBUVIsR0FBR3p3QixFQUFFMEcsRUFBRUMsSUFBS0YsR0FBYyxPQUFWQyxFQUFFNFMsR0FBR3RaLEVBQUU4RyxLQUFZRixFQUFFaUIsS0FBSzRvQixHQUFHendCLEVBQUUwRyxFQUFFQyxLQUFNM0csRUFBRUEsRUFBRXFhLE9BQU8sSUFBSXpULEVBQUVyRCxRQUFRa0IsRUFBRW9ELEtBQUssQ0FBQ3FrQixNQUFNeG5CLEVBQUV5bkIsVUFBVXZsQixJQUFJLFNBQVNzcUIsTUFBTSxJQUFJQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHNXNCLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVcsUUFBUUMsRUFBRTRzQixVQUFVLE9BQU0sRUFDM2IsU0FBU0MsR0FBRzlzQixFQUFFQyxHQUFHLE1BQU0sYUFBYUQsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLEdBQUcsaUJBQWtCQyxFQUFFbUMsVUFBVSxpQkFBa0JuQyxFQUFFbUMsVUFBVSxhQUFrQm5DLEVBQUU0TiwwQkFBeUIsT0FBTzVOLEVBQUU0Tix5QkFBeUIsTUFBTTVOLEVBQUU0Tix3QkFBd0JrZixPQUFPLElBQUlDLEdBQUcsbUJBQW9CQyxXQUFXQSxnQkFBVyxFQUFPQyxHQUFHLG1CQUFvQkMsYUFBYUEsa0JBQWEsRUFBTyxTQUFTQyxHQUFHcHRCLEdBQUcsSUFBSUEsRUFBRWlQLFNBQVNqUCxFQUFFaU8sWUFBWSxHQUFHLElBQUlqTyxFQUFFaVAsV0FBb0IsT0FBVGpQLEVBQUVBLEVBQUV1TSxRQUFldk0sRUFBRWlPLFlBQVksS0FDeGMsU0FBU29mLEdBQUdydEIsR0FBRyxLQUFLLE1BQU1BLEVBQUVBLEVBQUVBLEVBQUVzcEIsWUFBWSxDQUFDLElBQUlycEIsRUFBRUQsRUFBRWlQLFNBQVMsR0FBRyxJQUFJaFAsR0FBRyxJQUFJQSxFQUFFLE1BQU0sT0FBT0QsRUFBRSxTQUFTc3RCLEdBQUd0dEIsR0FBR0EsRUFBRUEsRUFBRXV0QixnQkFBZ0IsSUFBSSxJQUFJdHRCLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWlQLFNBQVMsQ0FBQyxJQUFJMVQsRUFBRXlFLEVBQUVzZ0IsS0FBSyxHQUFHLE1BQU0va0IsR0FBRyxPQUFPQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxHQUFHLElBQUkwRSxFQUFFLE9BQU9ELEVBQUVDLFFBQVEsT0FBTzFFLEdBQUcwRSxJQUFJRCxFQUFFQSxFQUFFdXRCLGdCQUFnQixPQUFPLEtBQUssSUFBSUMsR0FBRyxFQUEwRCxJQUFJQyxHQUFHdlMsS0FBS3dRLFNBQVMxb0IsU0FBUyxJQUFJaUYsTUFBTSxHQUFHeWxCLEdBQUcsZ0JBQWdCRCxHQUFHRSxHQUFHLGdCQUFnQkYsR0FBR3hCLEdBQUcsb0JBQW9Cd0IsR0FBR0csR0FBRyxpQkFBaUJILEdBQzlkLFNBQVN6VixHQUFHaFksR0FBRyxJQUFJQyxFQUFFRCxFQUFFMHRCLElBQUksR0FBR3p0QixFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJMUUsRUFBRXlFLEVBQUU0VCxXQUFXclksR0FBRyxDQUFDLEdBQUcwRSxFQUFFMUUsRUFBRTB3QixLQUFLMXdCLEVBQUVteUIsSUFBSSxDQUFlLEdBQWRueUIsRUFBRTBFLEVBQUUwVixVQUFhLE9BQU8xVixFQUFFa1csT0FBTyxPQUFPNWEsR0FBRyxPQUFPQSxFQUFFNGEsTUFBTSxJQUFJblcsRUFBRXN0QixHQUFHdHRCLEdBQUcsT0FBT0EsR0FBRyxDQUFDLEdBQUd6RSxFQUFFeUUsRUFBRTB0QixJQUFJLE9BQU9ueUIsRUFBRXlFLEVBQUVzdEIsR0FBR3R0QixHQUFHLE9BQU9DLEVBQU0xRSxHQUFKeUUsRUFBRXpFLEdBQU1xWSxXQUFXLE9BQU8sS0FBSyxTQUFTSyxHQUFHalUsR0FBa0IsUUFBZkEsRUFBRUEsRUFBRTB0QixLQUFLMXRCLEVBQUVpc0IsTUFBYyxJQUFJanNCLEVBQUVxTCxLQUFLLElBQUlyTCxFQUFFcUwsS0FBSyxLQUFLckwsRUFBRXFMLEtBQUssSUFBSXJMLEVBQUVxTCxJQUFJLEtBQUtyTCxFQUFFLFNBQVNnb0IsR0FBR2hvQixHQUFHLEdBQUcsSUFBSUEsRUFBRXFMLEtBQUssSUFBSXJMLEVBQUVxTCxJQUFJLE9BQU9yTCxFQUFFa1UsVUFBVSxNQUFNL1MsTUFBTWtDLEVBQUUsS0FBTSxTQUFTOFEsR0FBR25VLEdBQUcsT0FBT0EsRUFBRTJ0QixLQUFLLEtBQ2xiLFNBQVNyQyxHQUFHdHJCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTR0QixJQUFrQyxZQUE5QixJQUFTM3RCLElBQUlBLEVBQUVELEVBQUU0dEIsSUFBSSxJQUFJem1CLEtBQVlsSCxFQUFFLElBQUk0dEIsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBRy90QixHQUFHLE1BQU0sQ0FBQ3lCLFFBQVF6QixHQUFHLFNBQVMwQixHQUFFMUIsR0FBRyxFQUFFOHRCLEtBQUs5dEIsRUFBRXlCLFFBQVFvc0IsR0FBR0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLQSxNQUFNLFNBQVNuc0IsR0FBRTNCLEVBQUVDLEdBQUc2dEIsS0FBS0QsR0FBR0MsSUFBSTl0QixFQUFFeUIsUUFBUXpCLEVBQUV5QixRQUFReEIsRUFBRSxJQUFJK3RCLEdBQUcsR0FBR3ByQixHQUFFbXJCLEdBQUdDLElBQUluckIsR0FBRWtyQixJQUFHLEdBQUlFLEdBQUdELEdBQzVQLFNBQVNFLEdBQUdsdUIsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRXlFLEVBQUV5QyxLQUFLMHJCLGFBQWEsSUFBSTV5QixFQUFFLE9BQU95eUIsR0FBRyxJQUFJeHlCLEVBQUV3RSxFQUFFa1UsVUFBVSxHQUFHMVksR0FBR0EsRUFBRTR5Qiw4Q0FBOENudUIsRUFBRSxPQUFPekUsRUFBRTZ5QiwwQ0FBMEMsSUFBU2hzQixFQUFMTCxFQUFFLEdBQUssSUFBSUssS0FBSzlHLEVBQUV5RyxFQUFFSyxHQUFHcEMsRUFBRW9DLEdBQW9ILE9BQWpIN0csS0FBSXdFLEVBQUVBLEVBQUVrVSxXQUFZa2EsNENBQTRDbnVCLEVBQUVELEVBQUVxdUIsMENBQTBDcnNCLEdBQVVBLEVBQUUsU0FBU3NzQixHQUFHdHVCLEdBQXlCLE9BQU8sT0FBN0JBLEVBQUVBLEVBQUV1dUIsbUJBQThDLFNBQVNDLEtBQUs5c0IsR0FBRW1CLElBQUduQixHQUFFa0IsSUFBRyxTQUFTNnJCLEdBQUd6dUIsRUFBRUMsRUFBRTFFLEdBQUcsR0FBR3FILEdBQUVuQixVQUFVdXNCLEdBQUcsTUFBTTdzQixNQUFNa0MsRUFBRSxNQUFNMUIsR0FBRWlCLEdBQUUzQyxHQUFHMEIsR0FBRWtCLEdBQUV0SCxHQUMvZSxTQUFTbXpCLEdBQUcxdUIsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRXdFLEVBQUVrVSxVQUFnQyxHQUF0QmxVLEVBQUVDLEVBQUVzdUIsa0JBQXFCLG1CQUFvQi95QixFQUFFbXpCLGdCQUFnQixPQUFPcHpCLEVBQXdCLElBQUksSUFBSXlHLEtBQTlCeEcsRUFBRUEsRUFBRW16QixrQkFBaUMsS0FBSzNzQixLQUFLaEMsR0FBRyxNQUFNbUIsTUFBTWtDLEVBQUUsSUFBSWtJLEVBQUd0TCxJQUFJLFVBQVUrQixJQUFJLE9BQU8xRyxFQUFFLEdBQUdDLEVBQUVDLEdBQUcsU0FBU296QixHQUFHNXVCLEdBQXlHLE9BQXRHQSxHQUFHQSxFQUFFQSxFQUFFa1UsWUFBWWxVLEVBQUU2dUIsMkNBQTJDYixHQUFHQyxHQUFHcnJCLEdBQUVuQixRQUFRRSxHQUFFaUIsR0FBRTVDLEdBQUcyQixHQUFFa0IsR0FBRUEsR0FBRXBCLFVBQWUsRUFBRyxTQUFTcXRCLEdBQUc5dUIsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRXdFLEVBQUVrVSxVQUFVLElBQUkxWSxFQUFFLE1BQU0yRixNQUFNa0MsRUFBRSxNQUFNOUgsR0FBR3lFLEVBQUUwdUIsR0FBRzF1QixFQUFFQyxFQUFFZ3VCLElBQUl6eUIsRUFBRXF6QiwwQ0FBMEM3dUIsRUFBRTBCLEdBQUVtQixJQUFHbkIsR0FBRWtCLElBQUdqQixHQUFFaUIsR0FBRTVDLElBQUkwQixHQUFFbUIsSUFBR2xCLEdBQUVrQixHQUFFdEgsR0FDN2UsSUFBSXd6QixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBR2p6QixFQUFFa2MseUJBQXlCZ1gsR0FBR2x6QixFQUFFNGMsMEJBQTBCdVcsR0FBR256QixFQUFFb3pCLHdCQUF3QkMsR0FBR3J6QixFQUFFc3pCLHFCQUFxQkMsR0FBR3Z6QixFQUFFd3pCLHNCQUFzQkMsR0FBR3p6QixFQUFFa2UsYUFBYXdWLEdBQUcxekIsRUFBRTJ6QixpQ0FBaUNDLEdBQUc1ekIsRUFBRTZ6QiwyQkFBMkJDLEdBQUc5ekIsRUFBRXlmLDhCQUE4QnNVLEdBQUcvekIsRUFBRTZjLHdCQUF3Qm1YLEdBQUdoMEIsRUFBRWkwQixxQkFBcUJDLEdBQUdsMEIsRUFBRW0wQixzQkFBc0JDLEdBQUcsR0FBR0MsUUFBRyxJQUFTZCxHQUFHQSxHQUFHLGFBQWFlLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUdoQixLQUFLeHNCLEdBQUUsSUFBSXd0QixHQUFHaEIsR0FBRyxXQUFXLE9BQU9BLEtBQUtnQixJQUN0ZCxTQUFTQyxLQUFLLE9BQU9oQixNQUFNLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLFFBQVEsTUFBTS91QixNQUFNa0MsRUFBRSxPQUFRLFNBQVNzdEIsR0FBRzN3QixHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU80dkIsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxRQUFRLE1BQU0vdUIsTUFBTWtDLEVBQUUsT0FBUSxTQUFTdXRCLEdBQUc1d0IsRUFBRUMsR0FBVyxPQUFSRCxFQUFFMndCLEdBQUczd0IsR0FBVWl2QixHQUFHanZCLEVBQUVDLEdBQUcsU0FBUzR3QixHQUFHN3dCLEVBQUVDLEVBQUUxRSxHQUFXLE9BQVJ5RSxFQUFFMndCLEdBQUczd0IsR0FBVWt2QixHQUFHbHZCLEVBQUVDLEVBQUUxRSxHQUFHLFNBQVN1MUIsS0FBSyxHQUFHLE9BQU9QLEdBQUcsQ0FBQyxJQUFJdndCLEVBQUV1d0IsR0FBR0EsR0FBRyxLQUFLcEIsR0FBR252QixHQUFHK3dCLEtBQzNhLFNBQVNBLEtBQUssSUFBSVAsSUFBSSxPQUFPRixHQUFHLENBQUNFLElBQUcsRUFBRyxJQUFJeHdCLEVBQUUsRUFBRSxJQUFJLElBQUlDLEVBQUVxd0IsR0FBR00sR0FBRyxJQUFHLFdBQVcsS0FBSzV3QixFQUFFQyxFQUFFbkIsT0FBT2tCLElBQUksQ0FBQyxJQUFJekUsRUFBRTBFLEVBQUVELEdBQUcsR0FBR3pFLEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxPQUFNKzBCLEdBQUcsS0FBSyxNQUFNLzBCLEdBQUcsTUFBTSxPQUFPKzBCLEtBQUtBLEdBQUdBLEdBQUdyb0IsTUFBTWpJLEVBQUUsSUFBSWt2QixHQUFHVSxHQUFHa0IsSUFBSXYxQixFQUEzSixRQUFzS2kxQixJQUFHLElBQUssSUFBSVEsR0FBRzVuQixFQUFHbEYsd0JBQXdCLFNBQVMrc0IsR0FBR2p4QixFQUFFQyxHQUFHLEdBQUdELEdBQUdBLEVBQUV1QyxhQUFhLENBQTRCLElBQUksSUFBSWhILEtBQW5DMEUsRUFBRTNFLEVBQUUsR0FBRzJFLEdBQUdELEVBQUVBLEVBQUV1QyxrQkFBNEIsSUFBU3RDLEVBQUUxRSxLQUFLMEUsRUFBRTFFLEdBQUd5RSxFQUFFekUsSUFBSSxPQUFPMEUsRUFBRSxPQUFPQSxFQUFFLElBQUlpeEIsR0FBR25ELEdBQUcsTUFBTW9ELEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUM1YixTQUFTSSxHQUFHdnhCLEdBQUcsSUFBSUMsRUFBRWl4QixHQUFHenZCLFFBQVFDLEdBQUV3dkIsSUFBSWx4QixFQUFFeUMsS0FBSzZDLFNBQVNMLGNBQWNoRixFQUFFLFNBQVN1eEIsR0FBR3h4QixFQUFFQyxHQUFHLEtBQUssT0FBT0QsR0FBRyxDQUFDLElBQUl6RSxFQUFFeUUsRUFBRTJWLFVBQVUsSUFBSTNWLEVBQUV5eEIsV0FBV3h4QixLQUFLQSxFQUF0QixDQUF3QixHQUFHLE9BQU8xRSxJQUFJQSxFQUFFazJCLFdBQVd4eEIsS0FBS0EsRUFBRSxNQUFXMUUsRUFBRWsyQixZQUFZeHhCLE9BQU9ELEVBQUV5eEIsWUFBWXh4QixFQUFFLE9BQU8xRSxJQUFJQSxFQUFFazJCLFlBQVl4eEIsR0FBR0QsRUFBRUEsRUFBRTRWLFFBQVEsU0FBUzhiLEdBQUcxeEIsRUFBRUMsR0FBR2t4QixHQUFHbnhCLEVBQUVxeEIsR0FBR0QsR0FBRyxLQUFzQixRQUFqQnB4QixFQUFFQSxFQUFFMnhCLGVBQXVCLE9BQU8zeEIsRUFBRTR4QixlQUFlLElBQUs1eEIsRUFBRTZ4QixNQUFNNXhCLEtBQUs2eEIsSUFBRyxHQUFJOXhCLEVBQUU0eEIsYUFBYSxNQUN2WSxTQUFTRyxHQUFHL3hCLEVBQUVDLEdBQUcsR0FBR294QixLQUFLcnhCLElBQUcsSUFBS0MsR0FBRyxJQUFJQSxFQUFtRyxHQUE3RixpQkFBa0JBLEdBQUcsYUFBYUEsSUFBRW94QixHQUFHcnhCLEVBQUVDLEVBQUUsWUFBV0EsRUFBRSxDQUFDVyxRQUFRWixFQUFFZ3lCLGFBQWEveEIsRUFBRXFELEtBQUssTUFBUyxPQUFPOHRCLEdBQUcsQ0FBQyxHQUFHLE9BQU9ELEdBQUcsTUFBTWh3QixNQUFNa0MsRUFBRSxNQUFNK3RCLEdBQUdueEIsRUFBRWt4QixHQUFHUSxhQUFhLENBQUNFLE1BQU0sRUFBRUQsYUFBYTN4QixFQUFFZ3lCLFdBQVcsV0FBV2IsR0FBR0EsR0FBRzl0QixLQUFLckQsRUFBRSxPQUFPRCxFQUFFaUYsY0FBYyxJQUFJaXRCLElBQUcsRUFBRyxTQUFTQyxHQUFHbnlCLEdBQUdBLEVBQUVveUIsWUFBWSxDQUFDQyxVQUFVcnlCLEVBQUUrVixjQUFjdWMsZ0JBQWdCLEtBQUtDLGVBQWUsS0FBS0MsT0FBTyxDQUFDQyxRQUFRLE1BQU1DLFFBQVEsTUFDMWEsU0FBU0MsR0FBRzN5QixFQUFFQyxHQUFHRCxFQUFFQSxFQUFFb3lCLFlBQVlueUIsRUFBRW15QixjQUFjcHlCLElBQUlDLEVBQUVteUIsWUFBWSxDQUFDQyxVQUFVcnlCLEVBQUVxeUIsVUFBVUMsZ0JBQWdCdHlCLEVBQUVzeUIsZ0JBQWdCQyxlQUFldnlCLEVBQUV1eUIsZUFBZUMsT0FBT3h5QixFQUFFd3lCLE9BQU9FLFFBQVExeUIsRUFBRTB5QixVQUFVLFNBQVNFLEdBQUc1eUIsRUFBRUMsR0FBRyxNQUFNLENBQUM0eUIsVUFBVTd5QixFQUFFOHlCLEtBQUs3eUIsRUFBRW9MLElBQUksRUFBRTBuQixRQUFRLEtBQUtDLFNBQVMsS0FBSzF2QixLQUFLLE1BQU0sU0FBUzJ2QixHQUFHanpCLEVBQUVDLEdBQW1CLEdBQUcsUUFBbkJELEVBQUVBLEVBQUVveUIsYUFBd0IsQ0FBWSxJQUFJNzJCLEdBQWZ5RSxFQUFFQSxFQUFFd3lCLFFBQWVDLFFBQVEsT0FBT2wzQixFQUFFMEUsRUFBRXFELEtBQUtyRCxHQUFHQSxFQUFFcUQsS0FBSy9ILEVBQUUrSCxLQUFLL0gsRUFBRStILEtBQUtyRCxHQUFHRCxFQUFFeXlCLFFBQVF4eUIsR0FDclosU0FBU2l6QixHQUFHbHpCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUV5RSxFQUFFb3lCLFlBQVk1MkIsRUFBRXdFLEVBQUUyVixVQUFVLEdBQUcsT0FBT25hLEdBQW9CRCxLQUFoQkMsRUFBRUEsRUFBRTQyQixhQUFtQixDQUFDLElBQUlwd0IsRUFBRSxLQUFLSyxFQUFFLEtBQXlCLEdBQUcsUUFBdkI5RyxFQUFFQSxFQUFFKzJCLGlCQUE0QixDQUFDLEVBQUUsQ0FBQyxJQUFJbndCLEVBQUUsQ0FBQzB3QixVQUFVdDNCLEVBQUVzM0IsVUFBVUMsS0FBS3YzQixFQUFFdTNCLEtBQUt6bkIsSUFBSTlQLEVBQUU4UCxJQUFJMG5CLFFBQVF4M0IsRUFBRXczQixRQUFRQyxTQUFTejNCLEVBQUV5M0IsU0FBUzF2QixLQUFLLE1BQU0sT0FBT2pCLEVBQUVMLEVBQUVLLEVBQUVGLEVBQUVFLEVBQUVBLEVBQUVpQixLQUFLbkIsRUFBRTVHLEVBQUVBLEVBQUUrSCxXQUFXLE9BQU8vSCxHQUFHLE9BQU84RyxFQUFFTCxFQUFFSyxFQUFFcEMsRUFBRW9DLEVBQUVBLEVBQUVpQixLQUFLckQsT0FBTytCLEVBQUVLLEVBQUVwQyxFQUFpSCxPQUEvRzFFLEVBQUUsQ0FBQzgyQixVQUFVNzJCLEVBQUU2MkIsVUFBVUMsZ0JBQWdCdHdCLEVBQUV1d0IsZUFBZWx3QixFQUFFbXdCLE9BQU9oM0IsRUFBRWczQixPQUFPRSxRQUFRbDNCLEVBQUVrM0IsY0FBUzF5QixFQUFFb3lCLFlBQVk3MkIsR0FBNEIsUUFBbkJ5RSxFQUFFekUsRUFBRWczQixnQkFBd0JoM0IsRUFBRSsyQixnQkFBZ0JyeUIsRUFBRUQsRUFBRXNELEtBQ25mckQsRUFBRTFFLEVBQUVnM0IsZUFBZXR5QixFQUNuQixTQUFTa3pCLEdBQUduekIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsSUFBSXdHLEVBQUVoQyxFQUFFb3lCLFlBQVlGLElBQUcsRUFBRyxJQUFJN3ZCLEVBQUVMLEVBQUVzd0IsZ0JBQWdCbndCLEVBQUVILEVBQUV1d0IsZUFBZXJ3QixFQUFFRixFQUFFd3dCLE9BQU9DLFFBQVEsR0FBRyxPQUFPdndCLEVBQUUsQ0FBQ0YsRUFBRXd3QixPQUFPQyxRQUFRLEtBQUssSUFBSXh3QixFQUFFQyxFQUFFL0csRUFBRThHLEVBQUVxQixLQUFLckIsRUFBRXFCLEtBQUssS0FBSyxPQUFPbkIsRUFBRUUsRUFBRWxILEVBQUVnSCxFQUFFbUIsS0FBS25JLEVBQUVnSCxFQUFFRixFQUFFLElBQUl0RixFQUFFcUQsRUFBRTJWLFVBQVUsR0FBRyxPQUFPaFosRUFBRSxDQUFpQixJQUFJd0QsR0FBcEJ4RCxFQUFFQSxFQUFFeTFCLGFBQW9CRyxlQUFlcHlCLElBQUlnQyxJQUFJLE9BQU9oQyxFQUFFeEQsRUFBRTIxQixnQkFBZ0JuM0IsRUFBRWdGLEVBQUVtRCxLQUFLbkksRUFBRXdCLEVBQUU0MUIsZUFBZXR3QixJQUFJLEdBQUcsT0FBT0ksRUFBRSxDQUE4QixJQUE3QmxDLEVBQUU2QixFQUFFcXdCLFVBQVVsd0IsRUFBRSxFQUFFeEYsRUFBRXhCLEVBQUU4RyxFQUFFLE9BQU8sQ0FBQ0MsRUFBRUcsRUFBRXl3QixLQUFLLElBQUk5MUIsRUFBRXFGLEVBQUV3d0IsVUFBVSxJQUFJcjNCLEVBQUUwRyxLQUFLQSxFQUFFLENBQUMsT0FBT3ZGLElBQUlBLEVBQUVBLEVBQUUyRyxLQUFLLENBQUN1dkIsVUFBVTcxQixFQUFFODFCLEtBQUssRUFBRXpuQixJQUFJaEosRUFBRWdKLElBQUkwbkIsUUFBUTF3QixFQUFFMHdCLFFBQVFDLFNBQVMzd0IsRUFBRTJ3QixTQUNyZjF2QixLQUFLLE9BQU90RCxFQUFFLENBQUMsSUFBSVMsRUFBRVQsRUFBRUgsRUFBRXdDLEVBQVUsT0FBUkgsRUFBRWpDLEVBQUVqRCxFQUFFekIsRUFBU3NFLEVBQUV3TCxLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmNUssRUFBRVosRUFBRWt6QixTQUFpQyxDQUFDNXlCLEVBQUVNLEVBQUVwRixLQUFLMkIsRUFBRW1ELEVBQUUrQixHQUFHLE1BQU1sQyxFQUFFRyxFQUFFTSxFQUFFLE1BQU1ULEVBQUUsS0FBSyxFQUFFUyxFQUFFb1YsT0FBZSxLQUFUcFYsRUFBRW9WLE1BQVksR0FBRyxLQUFLLEVBQXNELEdBQUcsT0FBM0MzVCxFQUFFLG1CQUFkekIsRUFBRVosRUFBRWt6QixTQUFnQ3R5QixFQUFFcEYsS0FBSzJCLEVBQUVtRCxFQUFFK0IsR0FBR3pCLEdBQTBCLE1BQU1ULEVBQUVHLEVBQUU3RSxFQUFFLEdBQUc2RSxFQUFFK0IsR0FBRyxNQUFNbEMsRUFBRSxLQUFLLEVBQUVreUIsSUFBRyxHQUFJLE9BQU83dkIsRUFBRTJ3QixXQUFXaHpCLEVBQUU2VixPQUFPLEdBQWUsUUFBWjNULEVBQUVGLEVBQUUwd0IsU0FBaUIxd0IsRUFBRTB3QixRQUFRLENBQUNyd0IsR0FBR0gsRUFBRWtCLEtBQUtmLFNBQVNyRixFQUFFLENBQUM2MUIsVUFBVTcxQixFQUFFODFCLEtBQUs1d0IsRUFBRW1KLElBQUloSixFQUFFZ0osSUFBSTBuQixRQUFRMXdCLEVBQUUwd0IsUUFBUUMsU0FBUzN3QixFQUFFMndCLFNBQVMxdkIsS0FBSyxNQUFNLE9BQU8zRyxHQUFHeEIsRUFBRXdCLEVBQUVLLEVBQUVpRixFQUFFOUIsR0FBR3hELEVBQUVBLEVBQUUyRyxLQUFLdEcsRUFBRW1GLEdBQUdELEVBQVcsR0FBRyxRQUFaRyxFQUFFQSxFQUFFaUIsTUFDMWUsSUFBc0IsUUFBbkJwQixFQUFFRixFQUFFd3dCLE9BQU9DLFNBQWlCLE1BQVdwd0IsRUFBRUgsRUFBRW9CLEtBQUtwQixFQUFFb0IsS0FBSyxLQUFLdEIsRUFBRXV3QixlQUFlcndCLEVBQUVGLEVBQUV3d0IsT0FBT0MsUUFBUSxNQUFjLE9BQU85MUIsSUFBSXNGLEVBQUU5QixHQUFHNkIsRUFBRXF3QixVQUFVcHdCLEVBQUVELEVBQUVzd0IsZ0JBQWdCbjNCLEVBQUU2RyxFQUFFdXdCLGVBQWU1MUIsRUFBRXkyQixJQUFJanhCLEVBQUVuQyxFQUFFNnhCLE1BQU0xdkIsRUFBRW5DLEVBQUUrVixjQUFjNVYsR0FBRyxTQUFTa3pCLEdBQUdyekIsRUFBRUMsRUFBRTFFLEdBQThCLEdBQTNCeUUsRUFBRUMsRUFBRXl5QixRQUFRenlCLEVBQUV5eUIsUUFBUSxLQUFRLE9BQU8xeUIsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVsQixPQUFPbUIsSUFBSSxDQUFDLElBQUl6RSxFQUFFd0UsRUFBRUMsR0FBRytCLEVBQUV4RyxFQUFFdzNCLFNBQVMsR0FBRyxPQUFPaHhCLEVBQUUsQ0FBcUIsR0FBcEJ4RyxFQUFFdzNCLFNBQVMsS0FBS3gzQixFQUFFRCxFQUFLLG1CQUFvQnlHLEVBQUUsTUFBTWIsTUFBTWtDLEVBQUUsSUFBSXJCLElBQUlBLEVBQUUzRyxLQUFLRyxLQUFLLElBQUk4M0IsSUFBSSxJQUFJcnNCLEVBQUd0QyxXQUFXOUQsS0FDM2IsU0FBUzB5QixHQUFHdnpCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUE4QkQsRUFBRSxPQUFYQSxFQUFFQSxFQUFFQyxFQUF0QnlFLEVBQUVELEVBQUUrVixnQkFBOEM5VixFQUFFM0UsRUFBRSxHQUFHMkUsRUFBRTFFLEdBQUd5RSxFQUFFK1YsY0FBY3hhLEVBQUUsSUFBSXlFLEVBQUU2eEIsUUFBUTd4QixFQUFFb3lCLFlBQVlDLFVBQVU5MkIsR0FDM0ksSUFBSWk0QixHQUFHLENBQUNwekIsVUFBVSxTQUFTSixHQUFHLFNBQU9BLEVBQUVBLEVBQUV5ekIsa0JBQWlCL2QsR0FBRzFWLEtBQUtBLEdBQU1PLGdCQUFnQixTQUFTUCxFQUFFQyxFQUFFMUUsR0FBR3lFLEVBQUVBLEVBQUV5ekIsZ0JBQWdCLElBQUlqNEIsRUFBRWs0QixLQUFLMXhCLEVBQUUyeEIsR0FBRzN6QixHQUFHcUMsRUFBRXV3QixHQUFHcDNCLEVBQUV3RyxHQUFHSyxFQUFFMHdCLFFBQVE5eUIsRUFBRSxNQUFTMUUsSUFBYzhHLEVBQUUyd0IsU0FBU3ozQixHQUFHMDNCLEdBQUdqekIsRUFBRXFDLEdBQUd1eEIsR0FBRzV6QixFQUFFZ0MsRUFBRXhHLElBQUk4RSxvQkFBb0IsU0FBU04sRUFBRUMsRUFBRTFFLEdBQUd5RSxFQUFFQSxFQUFFeXpCLGdCQUFnQixJQUFJajRCLEVBQUVrNEIsS0FBSzF4QixFQUFFMnhCLEdBQUczekIsR0FBR3FDLEVBQUV1d0IsR0FBR3AzQixFQUFFd0csR0FBR0ssRUFBRWdKLElBQUksRUFBRWhKLEVBQUUwd0IsUUFBUTl5QixFQUFFLE1BQVMxRSxJQUFjOEcsRUFBRTJ3QixTQUFTejNCLEdBQUcwM0IsR0FBR2p6QixFQUFFcUMsR0FBR3V4QixHQUFHNXpCLEVBQUVnQyxFQUFFeEcsSUFBSTZFLG1CQUFtQixTQUFTTCxFQUFFQyxHQUFHRCxFQUFFQSxFQUFFeXpCLGdCQUFnQixJQUFJbDRCLEVBQUVtNEIsS0FBS2w0QixFQUFFbTRCLEdBQUczekIsR0FBR2dDLEVBQUU0d0IsR0FBR3IzQixFQUFFQyxHQUFHd0csRUFBRXFKLElBQUksRUFBRSxNQUFTcEwsSUFBYytCLEVBQUVneEIsU0FDamYveUIsR0FBR2d6QixHQUFHanpCLEVBQUVnQyxHQUFHNHhCLEdBQUc1ekIsRUFBRXhFLEVBQUVELEtBQUssU0FBU3M0QixHQUFHN3pCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csRUFBRUssRUFBRUYsR0FBaUIsTUFBTSxtQkFBcEJuQyxFQUFFQSxFQUFFa1UsV0FBc0M0ZixzQkFBc0I5ekIsRUFBRTh6QixzQkFBc0J0NEIsRUFBRTZHLEVBQUVGLElBQUdsQyxFQUFFbkQsWUFBV21ELEVBQUVuRCxVQUFVeUUsd0JBQXNCMG5CLEdBQUcxdEIsRUFBRUMsS0FBS3l0QixHQUFHam5CLEVBQUVLLElBQy9NLFNBQVMweEIsR0FBRy96QixFQUFFQyxFQUFFMUUsR0FBRyxJQUFJQyxHQUFFLEVBQUd3RyxFQUFFZ3NCLEdBQU8zckIsRUFBRXBDLEVBQUUrekIsWUFBMlcsTUFBL1YscUJBQWtCM3hCLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEVBQUVBLEVBQUUwdkIsR0FBRzF2QixJQUFJTCxFQUFFc3NCLEdBQUdydUIsR0FBR2d1QixHQUFHcnJCLEdBQUVuQixRQUF5QlksR0FBRzdHLEVBQUUsT0FBdEJBLEVBQUV5RSxFQUFFa3VCLGVBQXdDRCxHQUFHbHVCLEVBQUVnQyxHQUFHZ3NCLElBQUkvdEIsRUFBRSxJQUFJQSxFQUFFMUUsRUFBRThHLEdBQUdyQyxFQUFFK1YsY0FBYyxPQUFPOVYsRUFBRWcwQixZQUFPLElBQVNoMEIsRUFBRWcwQixNQUFNaDBCLEVBQUVnMEIsTUFBTSxLQUFLaDBCLEVBQUVhLFFBQVEweUIsR0FBR3h6QixFQUFFa1UsVUFBVWpVLEVBQUVBLEVBQUV3ekIsZ0JBQWdCenpCLEVBQUV4RSxLQUFJd0UsRUFBRUEsRUFBRWtVLFdBQVlrYSw0Q0FBNENwc0IsRUFBRWhDLEVBQUVxdUIsMENBQTBDaHNCLEdBQVVwQyxFQUMzWixTQUFTaTBCLEdBQUdsMEIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUd3RSxFQUFFQyxFQUFFZzBCLE1BQU0sbUJBQW9CaDBCLEVBQUVrMEIsMkJBQTJCbDBCLEVBQUVrMEIsMEJBQTBCNTRCLEVBQUVDLEdBQUcsbUJBQW9CeUUsRUFBRW0wQixrQ0FBa0NuMEIsRUFBRW0wQixpQ0FBaUM3NEIsRUFBRUMsR0FBR3lFLEVBQUVnMEIsUUFBUWowQixHQUFHd3pCLEdBQUdsekIsb0JBQW9CTCxFQUFFQSxFQUFFZzBCLE1BQU0sTUFDL1AsU0FBU0ksR0FBR3IwQixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRWhDLEVBQUVrVSxVQUFVbFMsRUFBRXJCLE1BQU1wRixFQUFFeUcsRUFBRWl5QixNQUFNajBCLEVBQUUrVixjQUFjL1QsRUFBRW5CLEtBQUt5eUIsR0FBR25CLEdBQUdueUIsR0FBRyxJQUFJcUMsRUFBRXBDLEVBQUUrekIsWUFBWSxxQkFBa0IzeEIsRUFBbEIsY0FBa0JBLEtBQUcsT0FBT0EsRUFBRUwsRUFBRXBCLFFBQVFteEIsR0FBRzF2QixJQUFJQSxFQUFFaXNCLEdBQUdydUIsR0FBR2d1QixHQUFHcnJCLEdBQUVuQixRQUFRTyxFQUFFcEIsUUFBUXN0QixHQUFHbHVCLEVBQUVxQyxJQUFJOHdCLEdBQUduekIsRUFBRXpFLEVBQUV5RyxFQUFFeEcsR0FBR3dHLEVBQUVpeUIsTUFBTWowQixFQUFFK1YsY0FBMkMsbUJBQTdCMVQsRUFBRXBDLEVBQUVxMEIsNEJBQWlEZixHQUFHdnpCLEVBQUVDLEVBQUVvQyxFQUFFOUcsR0FBR3lHLEVBQUVpeUIsTUFBTWowQixFQUFFK1YsZUFBZSxtQkFBb0I5VixFQUFFcTBCLDBCQUEwQixtQkFBb0J0eUIsRUFBRXV5Qix5QkFBeUIsbUJBQW9CdnlCLEVBQUV3eUIsMkJBQTJCLG1CQUFvQnh5QixFQUFFeXlCLHFCQUN2ZXgwQixFQUFFK0IsRUFBRWl5QixNQUFNLG1CQUFvQmp5QixFQUFFeXlCLG9CQUFvQnp5QixFQUFFeXlCLHFCQUFxQixtQkFBb0J6eUIsRUFBRXd5QiwyQkFBMkJ4eUIsRUFBRXd5Qiw0QkFBNEJ2MEIsSUFBSStCLEVBQUVpeUIsT0FBT1QsR0FBR2x6QixvQkFBb0IwQixFQUFFQSxFQUFFaXlCLE1BQU0sTUFBTWQsR0FBR256QixFQUFFekUsRUFBRXlHLEVBQUV4RyxHQUFHd0csRUFBRWl5QixNQUFNajBCLEVBQUUrVixlQUFlLG1CQUFvQi9ULEVBQUUweUIsb0JBQW9CMTBCLEVBQUU2VixPQUFPLEdBQUcsSUFBSThlLEdBQUdyeUIsTUFBTVksUUFDdlQsU0FBUzB4QixHQUFHNTBCLEVBQUVDLEVBQUUxRSxHQUFXLEdBQUcsUUFBWHlFLEVBQUV6RSxFQUFFcUcsTUFBaUIsbUJBQW9CNUIsR0FBRyxxQkFBa0JBLEVBQWxCLGNBQWtCQSxJQUFFLENBQUMsR0FBR3pFLEVBQUVtSCxPQUFPLENBQVksR0FBWG5ILEVBQUVBLEVBQUVtSCxPQUFZLENBQUMsR0FBRyxJQUFJbkgsRUFBRThQLElBQUksTUFBTWxLLE1BQU1rQyxFQUFFLE1BQU0sSUFBSTdILEVBQUVELEVBQUUyWSxVQUFVLElBQUkxWSxFQUFFLE1BQU0yRixNQUFNa0MsRUFBRSxJQUFJckQsSUFBSSxJQUFJZ0MsRUFBRSxHQUFHaEMsRUFBRSxPQUFHLE9BQU9DLEdBQUcsT0FBT0EsRUFBRTJCLEtBQUssbUJBQW9CM0IsRUFBRTJCLEtBQUszQixFQUFFMkIsSUFBSWl6QixhQUFhN3lCLEVBQVMvQixFQUFFMkIsTUFBSTNCLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFekUsRUFBRXFGLEtBQUtaLElBQUlxekIsS0FBS3J6QixFQUFFekUsRUFBRXFGLEtBQUssSUFBSSxPQUFPYixTQUFTQyxFQUFFK0IsR0FBRy9CLEVBQUUrQixHQUFHaEMsSUFBSzYwQixXQUFXN3lCLEVBQVMvQixHQUFFLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU1tQixNQUFNa0MsRUFBRSxNQUFNLElBQUk5SCxFQUFFbUgsT0FBTyxNQUFNdkIsTUFBTWtDLEVBQUUsSUFBSXJELElBQUssT0FBT0EsRUFDaGUsU0FBUzgwQixHQUFHOTBCLEVBQUVDLEdBQUcsR0FBRyxhQUFhRCxFQUFFeUMsS0FBSyxNQUFNdEIsTUFBTWtDLEVBQUUsR0FBRyxvQkFBb0J6SCxPQUFPa0IsVUFBVWtHLFNBQVMzSCxLQUFLNEUsR0FBRyxxQkFBcUJyRSxPQUFPeUMsS0FBSzRCLEdBQUdqQyxLQUFLLE1BQU0sSUFBSWlDLElBQ2xLLFNBQVM4MEIsR0FBRy8wQixHQUFHLFNBQVNDLEVBQUVBLEVBQUUxRSxHQUFHLEdBQUd5RSxFQUFFLENBQUMsSUFBSXhFLEVBQUV5RSxFQUFFKzBCLFdBQVcsT0FBT3g1QixHQUFHQSxFQUFFeTVCLFdBQVcxNUIsRUFBRTBFLEVBQUUrMEIsV0FBV3o1QixHQUFHMEUsRUFBRWkxQixZQUFZajFCLEVBQUUrMEIsV0FBV3o1QixFQUFFQSxFQUFFMDVCLFdBQVcsS0FBSzE1QixFQUFFc2EsTUFBTSxHQUFHLFNBQVN0YSxFQUFFQSxFQUFFQyxHQUFHLElBQUl3RSxFQUFFLE9BQU8sS0FBSyxLQUFLLE9BQU94RSxHQUFHeUUsRUFBRTFFLEVBQUVDLEdBQUdBLEVBQUVBLEVBQUU0YSxRQUFRLE9BQU8sS0FBSyxTQUFTNWEsRUFBRXdFLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJaVgsSUFBSSxPQUFPaFgsR0FBRyxPQUFPQSxFQUFFeEQsSUFBSXVELEVBQUVnTCxJQUFJL0ssRUFBRXhELElBQUl3RCxHQUFHRCxFQUFFZ0wsSUFBSS9LLEVBQUVrMUIsTUFBTWwxQixHQUFHQSxFQUFFQSxFQUFFbVcsUUFBUSxPQUFPcFcsRUFBRSxTQUFTZ0MsRUFBRWhDLEVBQUVDLEdBQXNDLE9BQW5DRCxFQUFFbzFCLEdBQUdwMUIsRUFBRUMsSUFBS2sxQixNQUFNLEVBQUVuMUIsRUFBRW9XLFFBQVEsS0FBWXBXLEVBQUUsU0FBU3FDLEVBQUVwQyxFQUFFMUUsRUFBRUMsR0FBYSxPQUFWeUUsRUFBRWsxQixNQUFNMzVCLEVBQU13RSxFQUE0QixRQUFqQnhFLEVBQUV5RSxFQUFFMFYsWUFBNkJuYSxFQUFFQSxFQUFFMjVCLE9BQVE1NUIsR0FBRzBFLEVBQUU0VixNQUFNLEVBQ3BmdGEsR0FBR0MsR0FBRXlFLEVBQUU0VixNQUFNLEVBQVN0YSxHQURvYUEsRUFDbGEsU0FBUzRHLEVBQUVsQyxHQUFzQyxPQUFuQ0QsR0FBRyxPQUFPQyxFQUFFMFYsWUFBWTFWLEVBQUU0VixNQUFNLEdBQVU1VixFQUFFLFNBQVNpQyxFQUFFbEMsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsT0FBRyxPQUFPeUUsR0FBRyxJQUFJQSxFQUFFb0wsTUFBV3BMLEVBQUVvMUIsR0FBRzk1QixFQUFFeUUsRUFBRTNELEtBQUtiLElBQUtvYSxPQUFPNVYsRUFBRUMsS0FBRUEsRUFBRStCLEVBQUUvQixFQUFFMUUsSUFBS3FhLE9BQU81VixFQUFTQyxHQUFFLFNBQVNnQyxFQUFFakMsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsT0FBRyxPQUFPeUUsR0FBR0EsRUFBRXExQixjQUFjLzVCLEVBQUVrSCxPQUFZakgsRUFBRXdHLEVBQUUvQixFQUFFMUUsRUFBRW9GLFFBQVNpQixJQUFJZ3pCLEdBQUc1MEIsRUFBRUMsRUFBRTFFLEdBQUdDLEVBQUVvYSxPQUFPNVYsRUFBRXhFLEtBQUVBLEVBQUUrNUIsR0FBR2g2QixFQUFFa0gsS0FBS2xILEVBQUVrQixJQUFJbEIsRUFBRW9GLE1BQU0sS0FBS1gsRUFBRTNELEtBQUtiLElBQUtvRyxJQUFJZ3pCLEdBQUc1MEIsRUFBRUMsRUFBRTFFLEdBQUdDLEVBQUVvYSxPQUFPNVYsRUFBU3hFLEdBQUUsU0FBU0wsRUFBRTZFLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLE9BQUcsT0FBT3lFLEdBQUcsSUFBSUEsRUFBRW9MLEtBQUtwTCxFQUFFaVUsVUFBVW1FLGdCQUFnQjljLEVBQUU4YyxlQUFlcFksRUFBRWlVLFVBQVVzaEIsaUJBQWlCajZCLEVBQUVpNkIsaUJBQXNCdjFCLEVBQ3JnQncxQixHQUFHbDZCLEVBQUV5RSxFQUFFM0QsS0FBS2IsSUFBS29hLE9BQU81VixFQUFFQyxLQUFFQSxFQUFFK0IsRUFBRS9CLEVBQUUxRSxFQUFFNkcsVUFBVSxLQUFNd1QsT0FBTzVWLEVBQVNDLEdBQUUsU0FBU3RELEVBQUVxRCxFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRTZHLEdBQUcsT0FBRyxPQUFPcEMsR0FBRyxJQUFJQSxFQUFFb0wsTUFBV3BMLEVBQUV5MUIsR0FBR242QixFQUFFeUUsRUFBRTNELEtBQUtiLEVBQUU2RyxJQUFLdVQsT0FBTzVWLEVBQUVDLEtBQUVBLEVBQUUrQixFQUFFL0IsRUFBRTFFLElBQUtxYSxPQUFPNVYsRUFBU0MsR0FBRSxTQUFTRSxFQUFFSCxFQUFFQyxFQUFFMUUsR0FBRyxHQUFHLGlCQUFrQjBFLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUVvMUIsR0FBRyxHQUFHcDFCLEVBQUVELEVBQUUzRCxLQUFLZCxJQUFLcWEsT0FBTzVWLEVBQUVDLEVBQUUsR0FBRyxxQkFBa0JBLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFdUMsVUFBVSxLQUFLNkcsRUFBRyxPQUFPOU4sRUFBRWc2QixHQUFHdDFCLEVBQUV3QyxLQUFLeEMsRUFBRXhELElBQUl3RCxFQUFFVSxNQUFNLEtBQUtYLEVBQUUzRCxLQUFLZCxJQUFLcUcsSUFBSWd6QixHQUFHNTBCLEVBQUUsS0FBS0MsR0FBRzFFLEVBQUVxYSxPQUFPNVYsRUFBRXpFLEVBQUUsS0FBSytOLEVBQUcsT0FBT3JKLEVBQUV3MUIsR0FBR3gxQixFQUFFRCxFQUFFM0QsS0FBS2QsSUFBS3FhLE9BQU81VixFQUFFQyxFQUFFLEdBQUcwMEIsR0FBRzEwQixJQUFJdUssRUFBR3ZLLEdBQUcsT0FBT0EsRUFBRXkxQixHQUFHejFCLEVBQ25mRCxFQUFFM0QsS0FBS2QsRUFBRSxPQUFRcWEsT0FBTzVWLEVBQUVDLEVBQUU2MEIsR0FBRzkwQixFQUFFQyxHQUFHLE9BQU8sS0FBSyxTQUFTakQsRUFBRWdELEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLElBQUl3RyxFQUFFLE9BQU8vQixFQUFFQSxFQUFFeEQsSUFBSSxLQUFLLEdBQUcsaUJBQWtCbEIsR0FBRyxpQkFBa0JBLEVBQUUsT0FBTyxPQUFPeUcsRUFBRSxLQUFLRSxFQUFFbEMsRUFBRUMsRUFBRSxHQUFHMUUsRUFBRUMsR0FBRyxHQUFHLHFCQUFrQkQsRUFBbEIsY0FBa0JBLEtBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVpSCxVQUFVLEtBQUs2RyxFQUFHLE9BQU85TixFQUFFa0IsTUFBTXVGLEVBQUV6RyxFQUFFa0gsT0FBTzhHLEVBQUc1TSxFQUFFcUQsRUFBRUMsRUFBRTFFLEVBQUVvRixNQUFNeUIsU0FBUzVHLEVBQUV3RyxHQUFHQyxFQUFFakMsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsS0FBSyxLQUFLOE4sRUFBRyxPQUFPL04sRUFBRWtCLE1BQU11RixFQUFFN0csRUFBRTZFLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLEtBQUssR0FBR201QixHQUFHcDVCLElBQUlpUCxFQUFHalAsR0FBRyxPQUFPLE9BQU95RyxFQUFFLEtBQUtyRixFQUFFcUQsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUUsTUFBTXM1QixHQUFHOTBCLEVBQUV6RSxHQUFHLE9BQU8sS0FBSyxTQUFTa0YsRUFBRVQsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLEdBQUcsaUJBQWtCeEcsR0FBRyxpQkFBa0JBLEVBQUUsT0FDbGUwRyxFQUFFakMsRUFEdWVELEVBQUVBLEVBQUVqRSxJQUFJUixJQUN0ZixLQUFXLEdBQUdDLEVBQUV3RyxHQUFHLEdBQUcscUJBQWtCeEcsRUFBbEIsY0FBa0JBLEtBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVnSCxVQUFVLEtBQUs2RyxFQUFHLE9BQU9ySixFQUFFQSxFQUFFakUsSUFBSSxPQUFPUCxFQUFFaUIsSUFBSWxCLEVBQUVDLEVBQUVpQixNQUFNLEtBQUtqQixFQUFFaUgsT0FBTzhHLEVBQUc1TSxFQUFFc0QsRUFBRUQsRUFBRXhFLEVBQUVtRixNQUFNeUIsU0FBU0osRUFBRXhHLEVBQUVpQixLQUFLd0YsRUFBRWhDLEVBQUVELEVBQUV4RSxFQUFFd0csR0FBRyxLQUFLc0gsRUFBRyxPQUEyQ25PLEVBQUU4RSxFQUF0Q0QsRUFBRUEsRUFBRWpFLElBQUksT0FBT1AsRUFBRWlCLElBQUlsQixFQUFFQyxFQUFFaUIsTUFBTSxLQUFXakIsRUFBRXdHLEdBQUcsR0FBRzJ5QixHQUFHbjVCLElBQUlnUCxFQUFHaFAsR0FBRyxPQUF3Qm1CLEVBQUVzRCxFQUFuQkQsRUFBRUEsRUFBRWpFLElBQUlSLElBQUksS0FBV0MsRUFBRXdHLEVBQUUsTUFBTTh5QixHQUFHNzBCLEVBQUV6RSxHQUFHLE9BQU8sS0FBSyxTQUFTcUUsRUFBRW1DLEVBQUVHLEVBQUVELEVBQUVELEdBQUcsSUFBSSxJQUFJOUcsRUFBRSxLQUFLaUIsRUFBRSxLQUFLcUQsRUFBRTBDLEVBQUVwQyxFQUFFb0MsRUFBRSxFQUFFNUMsRUFBRSxLQUFLLE9BQU9FLEdBQUdNLEVBQUVtQyxFQUFFcEQsT0FBT2lCLElBQUksQ0FBQ04sRUFBRTAxQixNQUFNcDFCLEdBQUdSLEVBQUVFLEVBQUVBLEVBQUUsTUFBTUYsRUFBRUUsRUFBRTJXLFFBQVEsSUFBSXpaLEVBQUVLLEVBQUVnRixFQUFFdkMsRUFBRXlDLEVBQUVuQyxHQUFHa0MsR0FBRyxHQUFHLE9BQU90RixFQUFFLENBQUMsT0FBTzhDLElBQUlBLEVBQUVGLEdBQUcsTUFBTVMsR0FBR1AsR0FBRyxPQUNqZjlDLEVBQUVnWixXQUFXMVYsRUFBRStCLEVBQUV2QyxHQUFHMEMsRUFBRUUsRUFBRTFGLEVBQUV3RixFQUFFcEMsR0FBRyxPQUFPM0QsRUFBRWpCLEVBQUV3QixFQUFFUCxFQUFFZ2EsUUFBUXpaLEVBQUVQLEVBQUVPLEVBQUU4QyxFQUFFRixFQUFFLEdBQUdRLElBQUltQyxFQUFFcEQsT0FBTyxPQUFPdkQsRUFBRXlHLEVBQUV2QyxHQUFHdEUsRUFBRSxHQUFHLE9BQU9zRSxFQUFFLENBQUMsS0FBS00sRUFBRW1DLEVBQUVwRCxPQUFPaUIsSUFBa0IsUUFBZE4sRUFBRVUsRUFBRTZCLEVBQUVFLEVBQUVuQyxHQUFHa0MsTUFBY0UsRUFBRUUsRUFBRTVDLEVBQUUwQyxFQUFFcEMsR0FBRyxPQUFPM0QsRUFBRWpCLEVBQUVzRSxFQUFFckQsRUFBRWdhLFFBQVEzVyxFQUFFckQsRUFBRXFELEdBQUcsT0FBT3RFLEVBQUUsSUFBSXNFLEVBQUVqRSxFQUFFd0csRUFBRXZDLEdBQUdNLEVBQUVtQyxFQUFFcEQsT0FBT2lCLElBQXNCLFFBQWxCUixFQUFFa0IsRUFBRWhCLEVBQUV1QyxFQUFFakMsRUFBRW1DLEVBQUVuQyxHQUFHa0MsTUFBY2pDLEdBQUcsT0FBT1QsRUFBRW9XLFdBQVdsVyxFQUFFbVksT0FBTyxPQUFPclksRUFBRTlDLElBQUlzRCxFQUFFUixFQUFFOUMsS0FBSzBGLEVBQUVFLEVBQUU5QyxFQUFFNEMsRUFBRXBDLEdBQUcsT0FBTzNELEVBQUVqQixFQUFFb0UsRUFBRW5ELEVBQUVnYSxRQUFRN1csRUFBRW5ELEVBQUVtRCxHQUE0QyxPQUF6Q1MsR0FBR1AsRUFBRXRCLFNBQVEsU0FBUzZCLEdBQUcsT0FBT0MsRUFBRStCLEVBQUVoQyxNQUFZN0UsRUFBRSxTQUFTeUUsRUFBRW9DLEVBQUVHLEVBQUVELEVBQUVELEdBQUcsSUFBSTlHLEVBQUVxUCxFQUFHdEksR0FBRyxHQUFHLG1CQUFvQi9HLEVBQUUsTUFBTWdHLE1BQU1rQyxFQUFFLE1BQWtCLEdBQUcsT0FBZm5CLEVBQUUvRyxFQUFFRSxLQUFLNkcsSUFDMWUsTUFBTWYsTUFBTWtDLEVBQUUsTUFBTSxJQUFJLElBQUlqSCxFQUFFakIsRUFBRSxLQUFLc0UsRUFBRTBDLEVBQUVwQyxFQUFFb0MsRUFBRSxFQUFFNUMsRUFBRSxLQUFLNUMsRUFBRXVGLEVBQUVvQixPQUFPLE9BQU83RCxJQUFJOUMsRUFBRTRHLEtBQUt4RCxJQUFJcEQsRUFBRXVGLEVBQUVvQixPQUFPLENBQUM3RCxFQUFFMDFCLE1BQU1wMUIsR0FBR1IsRUFBRUUsRUFBRUEsRUFBRSxNQUFNRixFQUFFRSxFQUFFMlcsUUFBUSxJQUFJeFcsRUFBRTVDLEVBQUVnRixFQUFFdkMsRUFBRTlDLEVBQUVSLE1BQU04RixHQUFHLEdBQUcsT0FBT3JDLEVBQUUsQ0FBQyxPQUFPSCxJQUFJQSxFQUFFRixHQUFHLE1BQU1TLEdBQUdQLEdBQUcsT0FBT0csRUFBRStWLFdBQVcxVixFQUFFK0IsRUFBRXZDLEdBQUcwQyxFQUFFRSxFQUFFekMsRUFBRXVDLEVBQUVwQyxHQUFHLE9BQU8zRCxFQUFFakIsRUFBRXlFLEVBQUV4RCxFQUFFZ2EsUUFBUXhXLEVBQUV4RCxFQUFFd0QsRUFBRUgsRUFBRUYsRUFBRSxHQUFHNUMsRUFBRTRHLEtBQUssT0FBT2hJLEVBQUV5RyxFQUFFdkMsR0FBR3RFLEVBQUUsR0FBRyxPQUFPc0UsRUFBRSxDQUFDLE1BQU05QyxFQUFFNEcsS0FBS3hELElBQUlwRCxFQUFFdUYsRUFBRW9CLE9BQXdCLFFBQWpCM0csRUFBRXdELEVBQUU2QixFQUFFckYsRUFBRVIsTUFBTThGLE1BQWNFLEVBQUVFLEVBQUUxRixFQUFFd0YsRUFBRXBDLEdBQUcsT0FBTzNELEVBQUVqQixFQUFFd0IsRUFBRVAsRUFBRWdhLFFBQVF6WixFQUFFUCxFQUFFTyxHQUFHLE9BQU94QixFQUFFLElBQUlzRSxFQUFFakUsRUFBRXdHLEVBQUV2QyxJQUFJOUMsRUFBRTRHLEtBQUt4RCxJQUFJcEQsRUFBRXVGLEVBQUVvQixPQUE0QixRQUFyQjNHLEVBQUU4RCxFQUFFaEIsRUFBRXVDLEVBQUVqQyxFQUFFcEQsRUFBRVIsTUFBTThGLE1BQWNqQyxHQUFHLE9BQU9yRCxFQUFFZ1osV0FDaGZsVyxFQUFFbVksT0FBTyxPQUFPamIsRUFBRUYsSUFBSXNELEVBQUVwRCxFQUFFRixLQUFLMEYsRUFBRUUsRUFBRTFGLEVBQUV3RixFQUFFcEMsR0FBRyxPQUFPM0QsRUFBRWpCLEVBQUV3QixFQUFFUCxFQUFFZ2EsUUFBUXpaLEVBQUVQLEVBQUVPLEdBQTRDLE9BQXpDcUQsR0FBR1AsRUFBRXRCLFNBQVEsU0FBUzZCLEdBQUcsT0FBT0MsRUFBRStCLEVBQUVoQyxNQUFZN0UsRUFBRSxPQUFPLFNBQVM2RSxFQUFFeEUsRUFBRTZHLEVBQUVILEdBQUcsSUFBSUQsRUFBRSxxQkFBa0JJLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEdBQUdBLEVBQUVJLE9BQU84RyxHQUFJLE9BQU9sSCxFQUFFNUYsSUFBSXdGLElBQUlJLEVBQUVBLEVBQUUxQixNQUFNeUIsVUFBVSxJQUFJakgsRUFBRSxxQkFBa0JrSCxFQUFsQixjQUFrQkEsS0FBRyxPQUFPQSxFQUFFLEdBQUdsSCxFQUFFLE9BQU9rSCxFQUFFRyxVQUFVLEtBQUs2RyxFQUFHckosRUFBRSxDQUFTLElBQVI3RSxFQUFFa0gsRUFBRTVGLElBQVF3RixFQUFFekcsRUFBRSxPQUFPeUcsR0FBRyxDQUFDLEdBQUdBLEVBQUV4RixNQUFNdEIsRUFBRSxDQUFDLE9BQU84RyxFQUFFb0osS0FBSyxLQUFLLEVBQUUsR0FBR2hKLEVBQUVJLE9BQU84RyxFQUFHLENBQUNoTyxFQUFFeUUsRUFBRWlDLEVBQUVtVSxVQUFTNWEsRUFBRXdHLEVBQUVDLEVBQUVJLEVBQUUxQixNQUFNeUIsV0FBWXdULE9BQU81VixFQUFFQSxFQUFFeEUsRUFBRSxNQUFNd0UsRUFBRSxNQUFNLFFBQVEsR0FBR2lDLEVBQUVxekIsY0FBY2p6QixFQUFFSSxLQUFLLENBQUNsSCxFQUFFeUUsRUFBRWlDLEVBQUVtVSxVQUM1ZTVhLEVBQUV3RyxFQUFFQyxFQUFFSSxFQUFFMUIsUUFBU2lCLElBQUlnekIsR0FBRzUwQixFQUFFaUMsRUFBRUksR0FBRzdHLEVBQUVvYSxPQUFPNVYsRUFBRUEsRUFBRXhFLEVBQUUsTUFBTXdFLEdBQUd6RSxFQUFFeUUsRUFBRWlDLEdBQUcsTUFBV2hDLEVBQUVELEVBQUVpQyxHQUFHQSxFQUFFQSxFQUFFbVUsUUFBUS9ULEVBQUVJLE9BQU84RyxJQUFJL04sRUFBRWs2QixHQUFHcnpCLEVBQUUxQixNQUFNeUIsU0FBU3BDLEVBQUUzRCxLQUFLNkYsRUFBRUcsRUFBRTVGLE1BQU9tWixPQUFPNVYsRUFBRUEsRUFBRXhFLEtBQUkwRyxFQUFFcXpCLEdBQUdsekIsRUFBRUksS0FBS0osRUFBRTVGLElBQUk0RixFQUFFMUIsTUFBTSxLQUFLWCxFQUFFM0QsS0FBSzZGLElBQUtOLElBQUlnekIsR0FBRzUwQixFQUFFeEUsRUFBRTZHLEdBQUdILEVBQUUwVCxPQUFPNVYsRUFBRUEsRUFBRWtDLEdBQUcsT0FBT0MsRUFBRW5DLEdBQUcsS0FBS3NKLEVBQUd0SixFQUFFLENBQUMsSUFBSWlDLEVBQUVJLEVBQUU1RixJQUFJLE9BQU9qQixHQUFHLENBQUMsR0FBR0EsRUFBRWlCLE1BQU13RixFQUFYLENBQWEsR0FBRyxJQUFJekcsRUFBRTZQLEtBQUs3UCxFQUFFMFksVUFBVW1FLGdCQUFnQmhXLEVBQUVnVyxlQUFlN2MsRUFBRTBZLFVBQVVzaEIsaUJBQWlCbnpCLEVBQUVtekIsZUFBZSxDQUFDajZCLEVBQUV5RSxFQUFFeEUsRUFBRTRhLFVBQVM1YSxFQUFFd0csRUFBRXhHLEVBQUU2RyxFQUFFRCxVQUFVLEtBQU13VCxPQUFPNVYsRUFBRUEsRUFBRXhFLEVBQUUsTUFBTXdFLEVBQU96RSxFQUFFeUUsRUFBRXhFLEdBQUcsTUFBV3lFLEVBQUVELEVBQUV4RSxHQUFHQSxFQUFFQSxFQUFFNGEsU0FBUTVhLEVBQ3BmaTZCLEdBQUdwekIsRUFBRXJDLEVBQUUzRCxLQUFLNkYsSUFBSzBULE9BQU81VixFQUFFQSxFQUFFeEUsRUFBRSxPQUFPMkcsRUFBRW5DLEdBQUcsR0FBRyxpQkFBa0JxQyxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPQSxFQUFFLEdBQUdBLEVBQUUsT0FBTzdHLEdBQUcsSUFBSUEsRUFBRTZQLEtBQUs5UCxFQUFFeUUsRUFBRXhFLEVBQUU0YSxVQUFTNWEsRUFBRXdHLEVBQUV4RyxFQUFFNkcsSUFBS3VULE9BQU81VixFQUFFQSxFQUFFeEUsSUFBSUQsRUFBRXlFLEVBQUV4RSxJQUFHQSxFQUFFNjVCLEdBQUdoekIsRUFBRXJDLEVBQUUzRCxLQUFLNkYsSUFBSzBULE9BQU81VixFQUFFQSxFQUFFeEUsR0FBRzJHLEVBQUVuQyxHQUFHLEdBQUcyMEIsR0FBR3R5QixHQUFHLE9BQU94QyxFQUFFRyxFQUFFeEUsRUFBRTZHLEVBQUVILEdBQUcsR0FBR3NJLEVBQUduSSxHQUFHLE9BQU96QyxFQUFFSSxFQUFFeEUsRUFBRTZHLEVBQUVILEdBQWMsR0FBWC9HLEdBQUcyNUIsR0FBRzkwQixFQUFFcUMsUUFBTSxJQUFxQkEsSUFBSUosRUFBRSxPQUFPakMsRUFBRXFMLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFNbEssTUFBTWtDLEVBQUUsSUFBSWtJLEVBQUd2TCxFQUFFeUMsT0FBTyxjQUFlLE9BQU9sSCxFQUFFeUUsRUFBRXhFLElBQUksSUFBSW02QixHQUFHWixJQUFHLEdBQUlhLEdBQUdiLElBQUcsR0FBSWMsR0FBRyxHQUFHQyxHQUFHL0gsR0FBRzhILElBQUlFLEdBQUdoSSxHQUFHOEgsSUFBSUcsR0FBR2pJLEdBQUc4SCxJQUN0ZCxTQUFTSSxHQUFHajJCLEdBQUcsR0FBR0EsSUFBSTYxQixHQUFHLE1BQU0xMEIsTUFBTWtDLEVBQUUsTUFBTSxPQUFPckQsRUFBRSxTQUFTazJCLEdBQUdsMkIsRUFBRUMsR0FBeUMsT0FBdEMwQixHQUFFcTBCLEdBQUcvMUIsR0FBRzBCLEdBQUVvMEIsR0FBRy8xQixHQUFHMkIsR0FBRW0wQixHQUFHRCxJQUFJNzFCLEVBQUVDLEVBQUVnUCxVQUFtQixLQUFLLEVBQUUsS0FBSyxHQUFHaFAsR0FBR0EsRUFBRUEsRUFBRWsyQixpQkFBaUJsMkIsRUFBRXdPLGFBQWFMLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0VuTyxFQUFFbU8sR0FBckNuTyxHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFMlQsV0FBVzNULEdBQU13TyxjQUFjLEtBQUt6TyxFQUFFQSxFQUFFbzJCLFNBQWtCMTBCLEdBQUVvMEIsSUFBSW4wQixHQUFFbTBCLEdBQUc3MUIsR0FBRyxTQUFTbzJCLEtBQUszMEIsR0FBRW8wQixJQUFJcDBCLEdBQUVxMEIsSUFBSXIwQixHQUFFczBCLElBQUksU0FBU00sR0FBR3QyQixHQUFHaTJCLEdBQUdELEdBQUd2MEIsU0FBUyxJQUFJeEIsRUFBRWcyQixHQUFHSCxHQUFHcjBCLFNBQWFsRyxFQUFFNlMsR0FBR25PLEVBQUVELEVBQUV5QyxNQUFNeEMsSUFBSTFFLElBQUlvRyxHQUFFbzBCLEdBQUcvMUIsR0FBRzJCLEdBQUVtMEIsR0FBR3Y2QixJQUFJLFNBQVNnN0IsR0FBR3YyQixHQUFHKzFCLEdBQUd0MEIsVUFBVXpCLElBQUkwQixHQUFFbzBCLElBQUlwMEIsR0FBRXEwQixLQUFLLElBQUl2eUIsR0FBRXVxQixHQUFHLEdBQzljLFNBQVN5SSxHQUFHeDJCLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUVvTCxJQUFJLENBQUMsSUFBSTlQLEVBQUUwRSxFQUFFOFYsY0FBYyxHQUFHLE9BQU94YSxJQUFtQixRQUFmQSxFQUFFQSxFQUFFeWEsYUFBcUIsT0FBT3phLEVBQUUra0IsTUFBTSxPQUFPL2tCLEVBQUUra0IsTUFBTSxPQUFPcmdCLE9BQU8sR0FBRyxLQUFLQSxFQUFFb0wsVUFBSyxJQUFTcEwsRUFBRXcyQixjQUFjQyxhQUFhLEdBQUcsSUFBYSxHQUFSejJCLEVBQUU0VixPQUFVLE9BQU81VixPQUFPLEdBQUcsT0FBT0EsRUFBRWtXLE1BQU0sQ0FBQ2xXLEVBQUVrVyxNQUFNUCxPQUFPM1YsRUFBRUEsRUFBRUEsRUFBRWtXLE1BQU0sU0FBUyxHQUFHbFcsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRW1XLFNBQVMsQ0FBQyxHQUFHLE9BQU9uVyxFQUFFMlYsUUFBUTNWLEVBQUUyVixTQUFTNVYsRUFBRSxPQUFPLEtBQUtDLEVBQUVBLEVBQUUyVixPQUFPM1YsRUFBRW1XLFFBQVFSLE9BQU8zVixFQUFFMlYsT0FBTzNWLEVBQUVBLEVBQUVtVyxRQUFRLE9BQU8sS0FBSyxJQUFJdWdCLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQ3BkLFNBQVNDLEdBQUc5MkIsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRXc3QixHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUd4N0IsRUFBRSs1QixZQUFZLFVBQVUvNUIsRUFBRWtILEtBQUssVUFBVWxILEVBQUUyWSxVQUFValUsRUFBRTFFLEVBQUVxYSxPQUFPNVYsRUFBRXpFLEVBQUVzYSxNQUFNLEVBQUUsT0FBTzdWLEVBQUVnMUIsWUFBWWgxQixFQUFFZzFCLFdBQVdDLFdBQVcxNUIsRUFBRXlFLEVBQUVnMUIsV0FBV3o1QixHQUFHeUUsRUFBRWsxQixZQUFZbDFCLEVBQUVnMUIsV0FBV3o1QixFQUFFLFNBQVN5N0IsR0FBR2gzQixFQUFFQyxHQUFHLE9BQU9ELEVBQUVxTCxLQUFLLEtBQUssRUFBRSxJQUFJOVAsRUFBRXlFLEVBQUV5QyxLQUF5RSxPQUFPLFFBQTNFeEMsRUFBRSxJQUFJQSxFQUFFZ1AsVUFBVTFULEVBQUV5TSxnQkFBZ0IvSCxFQUFFeUwsU0FBUzFELGNBQWMsS0FBSy9ILEtBQW1CRCxFQUFFa1UsVUFBVWpVLEdBQUUsR0FBTyxLQUFLLEVBQUUsT0FBb0QsUUFBN0NBLEVBQUUsS0FBS0QsRUFBRWkzQixjQUFjLElBQUloM0IsRUFBRWdQLFNBQVMsS0FBS2hQLEtBQVlELEVBQUVrVSxVQUFValUsR0FBRSxHQUFPLEtBQUssR0FBWSxRQUFRLE9BQU0sR0FDdmUsU0FBU2kzQixHQUFHbDNCLEdBQUcsR0FBRzYyQixHQUFHLENBQUMsSUFBSTUyQixFQUFFMjJCLEdBQUcsR0FBRzMyQixFQUFFLENBQUMsSUFBSTFFLEVBQUUwRSxFQUFFLElBQUkrMkIsR0FBR2gzQixFQUFFQyxHQUFHLENBQXFCLEtBQXBCQSxFQUFFb3RCLEdBQUc5eEIsRUFBRSt0QixnQkFBcUIwTixHQUFHaDNCLEVBQUVDLEdBQXVDLE9BQW5DRCxFQUFFNlYsT0FBZSxLQUFUN1YsRUFBRTZWLE1BQVksRUFBRWdoQixJQUFHLE9BQUdGLEdBQUczMkIsR0FBUzgyQixHQUFHSCxHQUFHcDdCLEdBQUdvN0IsR0FBRzMyQixFQUFFNDJCLEdBQUd2SixHQUFHcHRCLEVBQUUyTyxpQkFBaUI1TyxFQUFFNlYsT0FBZSxLQUFUN1YsRUFBRTZWLE1BQVksRUFBRWdoQixJQUFHLEVBQUdGLEdBQUczMkIsR0FBRyxTQUFTbTNCLEdBQUduM0IsR0FBRyxJQUFJQSxFQUFFQSxFQUFFNFYsT0FBTyxPQUFPNVYsR0FBRyxJQUFJQSxFQUFFcUwsS0FBSyxJQUFJckwsRUFBRXFMLEtBQUssS0FBS3JMLEVBQUVxTCxLQUFLckwsRUFBRUEsRUFBRTRWLE9BQU8rZ0IsR0FBRzMyQixFQUM1UyxTQUFTbzNCLEdBQUdwM0IsR0FBRyxHQUFHQSxJQUFJMjJCLEdBQUcsT0FBTSxFQUFHLElBQUlFLEdBQUcsT0FBT00sR0FBR24zQixHQUFHNjJCLElBQUcsR0FBRyxFQUFHLElBQUk1MkIsRUFBRUQsRUFBRXlDLEtBQUssR0FBRyxJQUFJekMsRUFBRXFMLEtBQUssU0FBU3BMLEdBQUcsU0FBU0EsSUFBSTZzQixHQUFHN3NCLEVBQUVELEVBQUV5MkIsZUFBZSxJQUFJeDJCLEVBQUUyMkIsR0FBRzMyQixHQUFHNjJCLEdBQUc5MkIsRUFBRUMsR0FBR0EsRUFBRW90QixHQUFHcHRCLEVBQUVxcEIsYUFBbUIsR0FBTjZOLEdBQUduM0IsR0FBTSxLQUFLQSxFQUFFcUwsSUFBSSxDQUFnRCxLQUE3QnJMLEVBQUUsUUFBcEJBLEVBQUVBLEVBQUUrVixlQUF5Qi9WLEVBQUVnVyxXQUFXLE1BQVcsTUFBTTdVLE1BQU1rQyxFQUFFLE1BQU1yRCxFQUFFLENBQWlCLElBQWhCQSxFQUFFQSxFQUFFc3BCLFlBQWdCcnBCLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWlQLFNBQVMsQ0FBQyxJQUFJMVQsRUFBRXlFLEVBQUVzZ0IsS0FBSyxHQUFHLE9BQU8va0IsRUFBRSxDQUFDLEdBQUcsSUFBSTBFLEVBQUUsQ0FBQzIyQixHQUFHdkosR0FBR3J0QixFQUFFc3BCLGFBQWEsTUFBTXRwQixFQUFFQyxRQUFRLE1BQU0xRSxHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBRzBFLElBQUlELEVBQUVBLEVBQUVzcEIsWUFBWXNOLEdBQUcsV0FBV0EsR0FBR0QsR0FBR3RKLEdBQUdydEIsRUFBRWtVLFVBQVVvVixhQUFhLEtBQUssT0FBTSxFQUN0ZixTQUFTK04sS0FBS1QsR0FBR0QsR0FBRyxLQUFLRSxJQUFHLEVBQUcsSUFBSVMsR0FBRyxHQUFHLFNBQVNDLEtBQUssSUFBSSxJQUFJdjNCLEVBQUUsRUFBRUEsRUFBRXMzQixHQUFHeDRCLE9BQU9rQixJQUFJczNCLEdBQUd0M0IsR0FBR3czQiw4QkFBOEIsS0FBS0YsR0FBR3g0QixPQUFPLEVBQUUsSUFBSTI0QixHQUFHcnVCLEVBQUduRix1QkFBdUJ5ekIsR0FBR3R1QixFQUFHbEYsd0JBQXdCeXpCLEdBQUcsRUFBRTd6QixHQUFFLEtBQUtDLEdBQUUsS0FBS0MsR0FBRSxLQUFLNHpCLElBQUcsRUFBR0MsSUFBRyxFQUFHLFNBQVNDLEtBQUssTUFBTTMyQixNQUFNa0MsRUFBRSxNQUFPLFNBQVMwMEIsR0FBRy8zQixFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJMUUsRUFBRSxFQUFFQSxFQUFFMEUsRUFBRW5CLFFBQVF2RCxFQUFFeUUsRUFBRWxCLE9BQU92RCxJQUFJLElBQUl3dEIsR0FBRy9vQixFQUFFekUsR0FBRzBFLEVBQUUxRSxJQUFJLE9BQU0sRUFBRyxPQUFNLEVBQzlYLFNBQVN5OEIsR0FBR2g0QixFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLEVBQUVLLEdBQXlILEdBQXRIczFCLEdBQUd0MUIsRUFBRXlCLEdBQUU3RCxFQUFFQSxFQUFFOFYsY0FBYyxLQUFLOVYsRUFBRW15QixZQUFZLEtBQUtueUIsRUFBRTR4QixNQUFNLEVBQUU0RixHQUFHaDJCLFFBQVEsT0FBT3pCLEdBQUcsT0FBT0EsRUFBRStWLGNBQWNraUIsR0FBR0MsR0FBR2w0QixFQUFFekUsRUFBRUMsRUFBRXdHLEdBQU02MUIsR0FBRyxDQUFDeDFCLEVBQUUsRUFBRSxFQUFFLENBQU8sR0FBTncxQixJQUFHLElBQVEsR0FBR3gxQixHQUFHLE1BQU1sQixNQUFNa0MsRUFBRSxNQUFNaEIsR0FBRyxFQUFFMkIsR0FBRUQsR0FBRSxLQUFLOUQsRUFBRW15QixZQUFZLEtBQUtxRixHQUFHaDJCLFFBQVEwMkIsR0FBR240QixFQUFFekUsRUFBRUMsRUFBRXdHLFNBQVM2MUIsSUFBa0UsR0FBOURKLEdBQUdoMkIsUUFBUTIyQixHQUFHbjRCLEVBQUUsT0FBTzhELElBQUcsT0FBT0EsR0FBRVQsS0FBS3EwQixHQUFHLEVBQUUzekIsR0FBRUQsR0FBRUQsR0FBRSxLQUFLOHpCLElBQUcsRUFBTTMzQixFQUFFLE1BQU1rQixNQUFNa0MsRUFBRSxNQUFNLE9BQU9yRCxFQUFFLFNBQVNxNEIsS0FBSyxJQUFJcjRCLEVBQUUsQ0FBQytWLGNBQWMsS0FBS3NjLFVBQVUsS0FBS2lHLFVBQVUsS0FBS0MsTUFBTSxLQUFLajFCLEtBQUssTUFBOEMsT0FBeEMsT0FBT1UsR0FBRUYsR0FBRWlTLGNBQWMvUixHQUFFaEUsRUFBRWdFLEdBQUVBLEdBQUVWLEtBQUt0RCxFQUFTZ0UsR0FDL2UsU0FBU3cwQixLQUFLLEdBQUcsT0FBT3owQixHQUFFLENBQUMsSUFBSS9ELEVBQUU4RCxHQUFFNlIsVUFBVTNWLEVBQUUsT0FBT0EsRUFBRUEsRUFBRStWLGNBQWMsVUFBVS9WLEVBQUUrRCxHQUFFVCxLQUFLLElBQUlyRCxFQUFFLE9BQU8rRCxHQUFFRixHQUFFaVMsY0FBYy9SLEdBQUVWLEtBQUssR0FBRyxPQUFPckQsRUFBRStELEdBQUUvRCxFQUFFOEQsR0FBRS9ELE1BQU0sQ0FBQyxHQUFHLE9BQU9BLEVBQUUsTUFBTW1CLE1BQU1rQyxFQUFFLE1BQVVyRCxFQUFFLENBQUMrVixlQUFQaFMsR0FBRS9ELEdBQXFCK1YsY0FBY3NjLFVBQVV0dUIsR0FBRXN1QixVQUFVaUcsVUFBVXYwQixHQUFFdTBCLFVBQVVDLE1BQU14MEIsR0FBRXcwQixNQUFNajFCLEtBQUssTUFBTSxPQUFPVSxHQUFFRixHQUFFaVMsY0FBYy9SLEdBQUVoRSxFQUFFZ0UsR0FBRUEsR0FBRVYsS0FBS3RELEVBQUUsT0FBT2dFLEdBQUUsU0FBU3kwQixHQUFHejRCLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ3ZZLFNBQVN5NEIsR0FBRzE0QixHQUFHLElBQUlDLEVBQUV1NEIsS0FBS2o5QixFQUFFMEUsRUFBRXM0QixNQUFNLEdBQUcsT0FBT2g5QixFQUFFLE1BQU00RixNQUFNa0MsRUFBRSxNQUFNOUgsRUFBRW85QixvQkFBb0IzNEIsRUFBRSxJQUFJeEUsRUFBRXVJLEdBQUUvQixFQUFFeEcsRUFBRTg4QixVQUFVajJCLEVBQUU5RyxFQUFFazNCLFFBQVEsR0FBRyxPQUFPcHdCLEVBQUUsQ0FBQyxHQUFHLE9BQU9MLEVBQUUsQ0FBQyxJQUFJRyxFQUFFSCxFQUFFc0IsS0FBS3RCLEVBQUVzQixLQUFLakIsRUFBRWlCLEtBQUtqQixFQUFFaUIsS0FBS25CLEVBQUUzRyxFQUFFODhCLFVBQVV0MkIsRUFBRUssRUFBRTlHLEVBQUVrM0IsUUFBUSxLQUFLLEdBQUcsT0FBT3p3QixFQUFFLENBQUNBLEVBQUVBLEVBQUVzQixLQUFLOUgsRUFBRUEsRUFBRTYyQixVQUFVLElBQUlud0IsRUFBRUMsRUFBRUUsRUFBRSxLQUFLSixFQUFFRCxFQUFFLEVBQUUsQ0FBQyxJQUFJN0csRUFBRThHLEVBQUU2d0IsS0FBSyxJQUFJNkUsR0FBR3g4QixLQUFLQSxFQUFFLE9BQU8rRyxJQUFJQSxFQUFFQSxFQUFFb0IsS0FBSyxDQUFDd3ZCLEtBQUssRUFBRThGLE9BQU8zMkIsRUFBRTIyQixPQUFPQyxhQUFhNTJCLEVBQUU0MkIsYUFBYUMsV0FBVzcyQixFQUFFNjJCLFdBQVd4MUIsS0FBSyxPQUFPOUgsRUFBRXlHLEVBQUU0MkIsZUFBZTc0QixFQUFFaUMsRUFBRTYyQixXQUFXOTRCLEVBQUV4RSxFQUFFeUcsRUFBRTIyQixZQUFZLENBQUMsSUFBSWo4QixFQUFFLENBQUNtMkIsS0FBSzMzQixFQUFFeTlCLE9BQU8zMkIsRUFBRTIyQixPQUFPQyxhQUFhNTJCLEVBQUU0MkIsYUFDOWZDLFdBQVc3MkIsRUFBRTYyQixXQUFXeDFCLEtBQUssTUFBTSxPQUFPcEIsR0FBR0MsRUFBRUQsRUFBRXZGLEVBQUUwRixFQUFFN0csR0FBRzBHLEVBQUVBLEVBQUVvQixLQUFLM0csRUFBRW1ILEdBQUUrdEIsT0FBTzEyQixFQUFFaTRCLElBQUlqNEIsRUFBRThHLEVBQUVBLEVBQUVxQixXQUFXLE9BQU9yQixHQUFHQSxJQUFJRCxHQUFHLE9BQU9FLEVBQUVHLEVBQUU3RyxFQUFFMEcsRUFBRW9CLEtBQUtuQixFQUFFNG1CLEdBQUd2dEIsRUFBRXlFLEVBQUU4VixpQkFBaUIrYixJQUFHLEdBQUk3eEIsRUFBRThWLGNBQWN2YSxFQUFFeUUsRUFBRW95QixVQUFVaHdCLEVBQUVwQyxFQUFFcTRCLFVBQVVwMkIsRUFBRTNHLEVBQUV3OUIsa0JBQWtCdjlCLEVBQUUsTUFBTSxDQUFDeUUsRUFBRThWLGNBQWN4YSxFQUFFeTlCLFVBQ3RRLFNBQVNDLEdBQUdqNUIsR0FBRyxJQUFJQyxFQUFFdTRCLEtBQUtqOUIsRUFBRTBFLEVBQUVzNEIsTUFBTSxHQUFHLE9BQU9oOUIsRUFBRSxNQUFNNEYsTUFBTWtDLEVBQUUsTUFBTTlILEVBQUVvOUIsb0JBQW9CMzRCLEVBQUUsSUFBSXhFLEVBQUVELEVBQUV5OUIsU0FBU2gzQixFQUFFekcsRUFBRWszQixRQUFRcHdCLEVBQUVwQyxFQUFFOFYsY0FBYyxHQUFHLE9BQU8vVCxFQUFFLENBQUN6RyxFQUFFazNCLFFBQVEsS0FBSyxJQUFJdHdCLEVBQUVILEVBQUVBLEVBQUVzQixLQUFLLEdBQUdqQixFQUFFckMsRUFBRXFDLEVBQUVGLEVBQUV5MkIsUUFBUXoyQixFQUFFQSxFQUFFbUIsV0FBV25CLElBQUlILEdBQUcrbUIsR0FBRzFtQixFQUFFcEMsRUFBRThWLGlCQUFpQitiLElBQUcsR0FBSTd4QixFQUFFOFYsY0FBYzFULEVBQUUsT0FBT3BDLEVBQUVxNEIsWUFBWXI0QixFQUFFb3lCLFVBQVVod0IsR0FBRzlHLEVBQUV3OUIsa0JBQWtCMTJCLEVBQUUsTUFBTSxDQUFDQSxFQUFFN0csR0FDblYsU0FBUzA5QixHQUFHbDVCLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUV5RSxFQUFFazVCLFlBQVkzOUIsRUFBRUEsRUFBRXlFLEVBQUVtNUIsU0FBUyxJQUFJcDNCLEVBQUUvQixFQUFFdTNCLDhCQUF5SSxHQUF4RyxPQUFPeDFCLEVBQUVoQyxFQUFFZ0MsSUFBSXhHLEdBQVV3RSxFQUFFQSxFQUFFcTVCLGtCQUFpQnI1QixHQUFHMjNCLEdBQUczM0IsS0FBS0EsS0FBRUMsRUFBRXUzQiw4QkFBOEJoOEIsRUFBRTg3QixHQUFHbDBCLEtBQUtuRCxLQUFNRCxFQUFFLE9BQU96RSxFQUFFMEUsRUFBRW01QixTQUFvQixNQUFYOUIsR0FBR2wwQixLQUFLbkQsR0FBU2tCLE1BQU1rQyxFQUFFLE1BQ3pQLFNBQVNpMkIsR0FBR3Q1QixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRXUzQixHQUFFLEdBQUcsT0FBT3YzQixFQUFFLE1BQU1iLE1BQU1rQyxFQUFFLE1BQU0sSUFBSWhCLEVBQUVwQyxFQUFFazVCLFlBQVloM0IsRUFBRUUsRUFBRXBDLEVBQUVtNUIsU0FBU2wzQixFQUFFdTFCLEdBQUdoMkIsUUFBUVEsRUFBRUMsRUFBRXdFLFVBQVMsV0FBVyxPQUFPd3lCLEdBQUdsM0IsRUFBRS9CLEVBQUUxRSxNQUFLSixFQUFFOEcsRUFBRSxHQUFHdEYsRUFBRXNGLEVBQUUsR0FBR0EsRUFBRStCLEdBQUUsSUFBSTdELEVBQUVILEVBQUUrVixjQUFjL1ksRUFBRW1ELEVBQUVVLEtBQUtKLEVBQUV6RCxFQUFFdzhCLFlBQVkzNUIsRUFBRU0sRUFBRTFCLE9BQU8wQixFQUFFQSxFQUFFczVCLFVBQVUsSUFBSTc1QixFQUFFa0UsR0FDdU8sT0FEck85RCxFQUFFK1YsY0FBYyxDQUFDbFYsS0FBSzdELEVBQUV5QixPQUFPd0IsRUFBRXc1QixVQUFVaitCLEdBQUcwRyxFQUFFa0UsV0FBVSxXQUFXcEosRUFBRXc4QixZQUFZaitCLEVBQUV5QixFQUFFMDhCLFlBQVl2K0IsRUFBRSxJQUFJNkUsRUFBRXFDLEVBQUVwQyxFQUFFbTVCLFNBQVMsSUFBSXJRLEdBQUc1bUIsRUFBRW5DLEdBQUcsQ0FBQ0EsRUFBRXpFLEVBQUUwRSxFQUFFbTVCLFNBQVNyUSxHQUFHcHNCLEVBQUVxRCxLQUFLN0UsRUFBRTZFLEdBQUdBLEVBQUUyekIsR0FBRy96QixHQUFHb0MsRUFBRXEzQixrQkFBa0JyNUIsRUFBRWdDLEVBQUVxWSxjQUFjcmEsRUFBRWdDLEVBQUVxM0IsaUJBQWlCcjNCLEVBQUUwWSxnQkFBZ0IxYSxFQUFFLElBQUksSUFBSXhFLEVBQzVmd0csRUFBRTJZLGNBQWN6WSxFQUFFbEMsRUFBRSxFQUFFa0MsR0FBRyxDQUFDLElBQUlELEVBQUUsR0FBR3dZLEdBQUd2WSxHQUFHeEMsRUFBRSxHQUFHdUMsRUFBRXpHLEVBQUV5RyxJQUFJakMsRUFBRWtDLElBQUl4QyxNQUFLLENBQUNuRSxFQUFFMEUsRUFBRXpFLElBQUkwRyxFQUFFa0UsV0FBVSxXQUFXLE9BQU81SyxFQUFFeUUsRUFBRW01QixTQUFRLFdBQVcsSUFBSXA1QixFQUFFaEQsRUFBRXc4QixZQUFZaitCLEVBQUV5QixFQUFFMDhCLFlBQVksSUFBSW4rQixFQUFFeUUsRUFBRUMsRUFBRW01QixVQUFVLElBQUk1OUIsRUFBRW00QixHQUFHL3pCLEdBQUdvQyxFQUFFcTNCLGtCQUFrQjc5QixFQUFFd0csRUFBRXFZLGFBQWEsTUFBTTlhLEdBQUdoRSxHQUFFLFdBQVcsTUFBTWdFLFdBQVMsQ0FBQ1UsRUFBRXpFLElBQUl1dEIsR0FBR3RvQixFQUFFbEYsSUFBSXd0QixHQUFHbHBCLEVBQUVJLElBQUk4b0IsR0FBRzVvQixFQUFFM0UsTUFBS3dFLEVBQUUsQ0FBQ3l5QixRQUFRLEtBQUt1RyxTQUFTLEtBQUtMLG9CQUFvQkYsR0FBR00sa0JBQWtCcDhCLElBQUtxOEIsU0FBUzc5QixFQUFFdytCLEdBQUdqOUIsS0FBSyxLQUFLb0gsR0FBRTlELEdBQUdpQyxFQUFFczJCLE1BQU12NEIsRUFBRWlDLEVBQUVxMkIsVUFBVSxLQUFLMzdCLEVBQUV1OEIsR0FBR2wzQixFQUFFL0IsRUFBRTFFLEdBQUcwRyxFQUFFOFQsY0FBYzlULEVBQUVvd0IsVUFBVTExQixHQUFVQSxFQUN0ZSxTQUFTaTlCLEdBQUc1NUIsRUFBRUMsRUFBRTFFLEdBQWMsT0FBTys5QixHQUFaZCxLQUFpQng0QixFQUFFQyxFQUFFMUUsR0FBRyxTQUFTcytCLEdBQUc3NUIsR0FBRyxJQUFJQyxFQUFFbzRCLEtBQW1MLE1BQTlLLG1CQUFvQnI0QixJQUFJQSxFQUFFQSxLQUFLQyxFQUFFOFYsY0FBYzlWLEVBQUVveUIsVUFBVXJ5QixFQUFvRkEsR0FBbEZBLEVBQUVDLEVBQUVzNEIsTUFBTSxDQUFDOUYsUUFBUSxLQUFLdUcsU0FBUyxLQUFLTCxvQkFBb0JGLEdBQUdNLGtCQUFrQi80QixJQUFPZzVCLFNBQVNXLEdBQUdqOUIsS0FBSyxLQUFLb0gsR0FBRTlELEdBQVMsQ0FBQ0MsRUFBRThWLGNBQWMvVixHQUNoUixTQUFTODVCLEdBQUc5NUIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQWtPLE9BQS9Od0UsRUFBRSxDQUFDcUwsSUFBSXJMLEVBQUV4RCxPQUFPeUQsRUFBRTg1QixRQUFReCtCLEVBQUV5K0IsS0FBS3grQixFQUFFOEgsS0FBSyxNQUFzQixRQUFoQnJELEVBQUU2RCxHQUFFc3VCLGNBQXNCbnlCLEVBQUUsQ0FBQyswQixXQUFXLE1BQU1seEIsR0FBRXN1QixZQUFZbnlCLEVBQUVBLEVBQUUrMEIsV0FBV2gxQixFQUFFc0QsS0FBS3RELEdBQW1CLFFBQWZ6RSxFQUFFMEUsRUFBRSswQixZQUFvQi8wQixFQUFFKzBCLFdBQVdoMUIsRUFBRXNELEtBQUt0RCxHQUFHeEUsRUFBRUQsRUFBRStILEtBQUsvSCxFQUFFK0gsS0FBS3RELEVBQUVBLEVBQUVzRCxLQUFLOUgsRUFBRXlFLEVBQUUrMEIsV0FBV2gxQixHQUFXQSxFQUFFLFNBQVNpNkIsR0FBR2o2QixHQUE0QixPQUFkQSxFQUFFLENBQUN5QixRQUFRekIsR0FBaEJxNEIsS0FBNEJ0aUIsY0FBYy9WLEVBQUUsU0FBU2s2QixLQUFLLE9BQU8xQixLQUFLemlCLGNBQWMsU0FBU29rQixHQUFHbjZCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLElBQUl3RyxFQUFFcTJCLEtBQUt2MEIsR0FBRStSLE9BQU83VixFQUFFZ0MsRUFBRStULGNBQWMrakIsR0FBRyxFQUFFNzVCLEVBQUUxRSxPQUFFLE9BQU8sSUFBU0MsRUFBRSxLQUFLQSxHQUNqYyxTQUFTNCtCLEdBQUdwNkIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsSUFBSXdHLEVBQUV3MkIsS0FBS2g5QixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJNkcsT0FBRSxFQUFPLEdBQUcsT0FBTzBCLEdBQUUsQ0FBQyxJQUFJNUIsRUFBRTRCLEdBQUVnUyxjQUEwQixHQUFaMVQsRUFBRUYsRUFBRTQzQixRQUFXLE9BQU92K0IsR0FBR3U4QixHQUFHdjhCLEVBQUUyRyxFQUFFNjNCLE1BQW1CLFlBQVpGLEdBQUc3NUIsRUFBRTFFLEVBQUU4RyxFQUFFN0csR0FBV3NJLEdBQUUrUixPQUFPN1YsRUFBRWdDLEVBQUUrVCxjQUFjK2pCLEdBQUcsRUFBRTc1QixFQUFFMUUsRUFBRThHLEVBQUU3RyxHQUFHLFNBQVM2K0IsR0FBR3I2QixFQUFFQyxHQUFHLE9BQU9rNkIsR0FBRyxJQUFJLEVBQUVuNkIsRUFBRUMsR0FBRyxTQUFTcTZCLEdBQUd0NkIsRUFBRUMsR0FBRyxPQUFPbTZCLEdBQUcsSUFBSSxFQUFFcDZCLEVBQUVDLEdBQUcsU0FBU3M2QixHQUFHdjZCLEVBQUVDLEdBQUcsT0FBT202QixHQUFHLEVBQUUsRUFBRXA2QixFQUFFQyxHQUFHLFNBQVN1NkIsR0FBR3g2QixFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsUUFBVSxNQUFPQSxHQUFxQkQsRUFBRUEsSUFBSUMsRUFBRXdCLFFBQVF6QixFQUFFLFdBQVdDLEVBQUV3QixRQUFRLFlBQXRFLEVBQ3hZLFNBQVNnNUIsR0FBR3o2QixFQUFFQyxFQUFFMUUsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRTB2QixPQUFPLENBQUNqckIsSUFBSSxLQUFZbzZCLEdBQUcsRUFBRSxFQUFFSSxHQUFHOTlCLEtBQUssS0FBS3VELEVBQUVELEdBQUd6RSxHQUFHLFNBQVNtL0IsTUFBTSxTQUFTQyxHQUFHMzZCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVpOUIsS0FBS3Y0QixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJekUsRUFBRUQsRUFBRXdhLGNBQWMsT0FBRyxPQUFPdmEsR0FBRyxPQUFPeUUsR0FBRzgzQixHQUFHOTNCLEVBQUV6RSxFQUFFLElBQVdBLEVBQUUsSUFBR0QsRUFBRXdhLGNBQWMsQ0FBQy9WLEVBQUVDLEdBQVVELEdBQUUsU0FBUzQ2QixHQUFHNTZCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVpOUIsS0FBS3Y0QixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJekUsRUFBRUQsRUFBRXdhLGNBQWMsT0FBRyxPQUFPdmEsR0FBRyxPQUFPeUUsR0FBRzgzQixHQUFHOTNCLEVBQUV6RSxFQUFFLElBQVdBLEVBQUUsSUFBR3dFLEVBQUVBLElBQUl6RSxFQUFFd2EsY0FBYyxDQUFDL1YsRUFBRUMsR0FBVUQsR0FDelosU0FBUzY2QixHQUFHNzZCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVtMUIsS0FBS0UsR0FBRyxHQUFHcjFCLEVBQUUsR0FBR0EsR0FBRSxXQUFXeUUsR0FBRSxNQUFNNHdCLEdBQUcsR0FBR3IxQixFQUFFLEdBQUdBLEdBQUUsV0FBVyxJQUFJQSxFQUFFbThCLEdBQUd2ekIsV0FBV3V6QixHQUFHdnpCLFdBQVcsRUFBRSxJQUFJbkUsR0FBRSxHQUFJQyxJQUFWLFFBQXNCeTNCLEdBQUd2ekIsV0FBVzVJLE1BQzVKLFNBQVNvK0IsR0FBRzM1QixFQUFFQyxFQUFFMUUsR0FBRyxJQUFJQyxFQUFFazRCLEtBQUsxeEIsRUFBRTJ4QixHQUFHM3pCLEdBQUdxQyxFQUFFLENBQUN5d0IsS0FBSzl3QixFQUFFNDJCLE9BQU9yOUIsRUFBRXM5QixhQUFhLEtBQUtDLFdBQVcsS0FBS3gxQixLQUFLLE1BQU1uQixFQUFFbEMsRUFBRXd5QixRQUE2RSxHQUFyRSxPQUFPdHdCLEVBQUVFLEVBQUVpQixLQUFLakIsR0FBR0EsRUFBRWlCLEtBQUtuQixFQUFFbUIsS0FBS25CLEVBQUVtQixLQUFLakIsR0FBR3BDLEVBQUV3eUIsUUFBUXB3QixFQUFFRixFQUFFbkMsRUFBRTJWLFVBQWEzVixJQUFJOEQsSUFBRyxPQUFPM0IsR0FBR0EsSUFBSTJCLEdBQUUrekIsR0FBR0QsSUFBRyxNQUFPLENBQUMsR0FBRyxJQUFJNTNCLEVBQUU2eEIsUUFBUSxPQUFPMXZCLEdBQUcsSUFBSUEsRUFBRTB2QixRQUFpQyxRQUF4QjF2QixFQUFFbEMsRUFBRTA0QixxQkFBOEIsSUFBSSxJQUFJejJCLEVBQUVqQyxFQUFFODRCLGtCQUFrQjkyQixFQUFFRSxFQUFFRCxFQUFFM0csR0FBbUMsR0FBaEM4RyxFQUFFdzJCLGFBQWExMkIsRUFBRUUsRUFBRXkyQixXQUFXNzJCLEVBQUs4bUIsR0FBRzltQixFQUFFQyxHQUFHLE9BQU8sTUFBTS9HLElBQWF5NEIsR0FBRzV6QixFQUFFZ0MsRUFBRXhHLElBQzlaLElBQUk0OEIsR0FBRyxDQUFDMEMsWUFBWS9JLEdBQUc5ckIsWUFBWTZ4QixHQUFHNXhCLFdBQVc0eEIsR0FBRzF4QixVQUFVMHhCLEdBQUd6eEIsb0JBQW9CeXhCLEdBQUd4eEIsZ0JBQWdCd3hCLEdBQUd2eEIsUUFBUXV4QixHQUFHdHhCLFdBQVdzeEIsR0FBR3J4QixPQUFPcXhCLEdBQUdweEIsU0FBU294QixHQUFHM3hCLGNBQWMyeEIsR0FBR2lELGlCQUFpQmpELEdBQUdrRCxjQUFjbEQsR0FBR21ELGlCQUFpQm5ELEdBQUdvRCxvQkFBb0JwRCxHQUFHcUQsMEJBQXlCLEdBQUlsRCxHQUFHLENBQUM2QyxZQUFZL0ksR0FBRzlyQixZQUFZLFNBQVNqRyxFQUFFQyxHQUE0QyxPQUF6Q280QixLQUFLdGlCLGNBQWMsQ0FBQy9WLE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxHQUFHa0csV0FBVzZyQixHQUFHM3JCLFVBQVVpMEIsR0FBR2gwQixvQkFBb0IsU0FBU3JHLEVBQUVDLEVBQUUxRSxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFMHZCLE9BQU8sQ0FBQ2pyQixJQUFJLEtBQVltNkIsR0FBRyxFQUFFLEVBQUVLLEdBQUc5OUIsS0FBSyxLQUN2ZnVELEVBQUVELEdBQUd6RSxJQUFJK0ssZ0JBQWdCLFNBQVN0RyxFQUFFQyxHQUFHLE9BQU9rNkIsR0FBRyxFQUFFLEVBQUVuNkIsRUFBRUMsSUFBSXNHLFFBQVEsU0FBU3ZHLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUU4OEIsS0FBcUQsT0FBaERwNEIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUl6RSxFQUFFd2EsY0FBYyxDQUFDL1YsRUFBRUMsR0FBVUQsR0FBR3dHLFdBQVcsU0FBU3hHLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUU2OEIsS0FBdUssT0FBbEtwNEIsT0FBRSxJQUFTMUUsRUFBRUEsRUFBRTBFLEdBQUdBLEVBQUV6RSxFQUFFdWEsY0FBY3ZhLEVBQUU2MkIsVUFBVXB5QixFQUFtRkQsR0FBakZBLEVBQUV4RSxFQUFFKzhCLE1BQU0sQ0FBQzlGLFFBQVEsS0FBS3VHLFNBQVMsS0FBS0wsb0JBQW9CMzRCLEVBQUUrNEIsa0JBQWtCOTRCLElBQU8rNEIsU0FBU1csR0FBR2o5QixLQUFLLEtBQUtvSCxHQUFFOUQsR0FBUyxDQUFDeEUsRUFBRXVhLGNBQWMvVixJQUFJeUcsT0FBT3d6QixHQUFHdnpCLFNBQVNtekIsR0FBRzF6QixjQUFjdTBCLEdBQUdLLGlCQUFpQixTQUFTLzZCLEdBQUcsSUFBSUMsRUFBRTQ1QixHQUFHNzVCLEdBQUd6RSxFQUFFMEUsRUFBRSxHQUFHekUsRUFBRXlFLEVBQUUsR0FDNVosT0FEK1pvNkIsSUFBRyxXQUFXLElBQUlwNkIsRUFBRXkzQixHQUFHdnpCLFdBQzlldXpCLEdBQUd2ekIsV0FBVyxFQUFFLElBQUkzSSxFQUFFd0UsR0FBTixRQUFpQjAzQixHQUFHdnpCLFdBQVdsRSxLQUFJLENBQUNELElBQVd6RSxHQUFHeS9CLGNBQWMsV0FBVyxJQUFJaDdCLEVBQUU2NUIsSUFBRyxHQUFJNTVCLEVBQUVELEVBQUUsR0FBOEIsT0FBTmk2QixHQUFyQmo2QixFQUFFNjZCLEdBQUduK0IsS0FBSyxLQUFLc0QsRUFBRSxLQUFnQixDQUFDQSxFQUFFQyxJQUFJZzdCLGlCQUFpQixTQUFTajdCLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUU2OEIsS0FBa0YsT0FBN0U3OEIsRUFBRXVhLGNBQWMsQ0FBQ2xWLEtBQUssQ0FBQzI0QixZQUFZdjVCLEVBQUV5NUIsWUFBWSxNQUFNajdCLE9BQU91QixFQUFFeTVCLFVBQVVsK0IsR0FBVSs5QixHQUFHOTlCLEVBQUV3RSxFQUFFQyxFQUFFMUUsSUFBSTIvQixvQkFBb0IsV0FBVyxHQUFHckUsR0FBRyxDQUFDLElBQUk3MkIsR0FBRSxFQUFHQyxFQXpEbEQsU0FBWUQsR0FBRyxNQUFNLENBQUN3QyxTQUFTMEgsRUFBR2xILFNBQVNoRCxFQUFFMk8sUUFBUTNPLEdBeUREbzdCLEVBQUcsV0FBaUQsTUFBdENwN0IsSUFBSUEsR0FBRSxFQUFHekUsRUFBRSxNQUFNaXlCLE1BQU14cUIsU0FBUyxNQUFZN0IsTUFBTWtDLEVBQUUsU0FBUzlILEVBQUVzK0IsR0FBRzU1QixHQUFHLEdBQzFaLE9BRDZaLElBQVksRUFBUDZELEdBQUV6SCxRQUFVeUgsR0FBRStSLE9BQU8sSUFBSWlrQixHQUFHLEdBQUUsV0FBV3YrQixFQUFFLE1BQU1peUIsTUFBTXhxQixTQUFTLFlBQ2hmLEVBQU8sT0FBYy9DLEVBQW1DLE9BQU40NUIsR0FBM0I1NUIsRUFBRSxNQUFNdXRCLE1BQU14cUIsU0FBUyxLQUFpQi9DLEdBQUdrN0IsMEJBQXlCLEdBQUlqRCxHQUFHLENBQUM0QyxZQUFZL0ksR0FBRzlyQixZQUFZMDBCLEdBQUd6MEIsV0FBVzZyQixHQUFHM3JCLFVBQVVrMEIsR0FBR2owQixvQkFBb0JvMEIsR0FBR24wQixnQkFBZ0JpMEIsR0FBR2gwQixRQUFRcTBCLEdBQUdwMEIsV0FBV2t5QixHQUFHanlCLE9BQU95ekIsR0FBR3h6QixTQUFTLFdBQVcsT0FBT2d5QixHQUFHRCxLQUFLdHlCLGNBQWN1MEIsR0FBR0ssaUJBQWlCLFNBQVMvNkIsR0FBRyxJQUFJQyxFQUFFeTRCLEdBQUdELElBQUlsOUIsRUFBRTBFLEVBQUUsR0FBR3pFLEVBQUV5RSxFQUFFLEdBQTZGLE9BQTFGcTZCLElBQUcsV0FBVyxJQUFJcjZCLEVBQUV5M0IsR0FBR3Z6QixXQUFXdXpCLEdBQUd2ekIsV0FBVyxFQUFFLElBQUkzSSxFQUFFd0UsR0FBTixRQUFpQjAzQixHQUFHdnpCLFdBQVdsRSxLQUFJLENBQUNELElBQVd6RSxHQUFHeS9CLGNBQWMsV0FBVyxJQUFJaDdCLEVBQUUwNEIsR0FBR0QsSUFBSSxHQUFHLE1BQU0sQ0FBQ3lCLEtBQUt6NEIsUUFDOWV6QixJQUFJaTdCLGlCQUFpQnJCLEdBQUdzQixvQkFBb0IsV0FBVyxPQUFPeEMsR0FBR0QsSUFBSSxJQUFJMEMsMEJBQXlCLEdBQUloRCxHQUFHLENBQUMyQyxZQUFZL0ksR0FBRzlyQixZQUFZMDBCLEdBQUd6MEIsV0FBVzZyQixHQUFHM3JCLFVBQVVrMEIsR0FBR2owQixvQkFBb0JvMEIsR0FBR24wQixnQkFBZ0JpMEIsR0FBR2gwQixRQUFRcTBCLEdBQUdwMEIsV0FBV3l5QixHQUFHeHlCLE9BQU95ekIsR0FBR3h6QixTQUFTLFdBQVcsT0FBT3V5QixHQUFHUixLQUFLdHlCLGNBQWN1MEIsR0FBR0ssaUJBQWlCLFNBQVMvNkIsR0FBRyxJQUFJQyxFQUFFZzVCLEdBQUdSLElBQUlsOUIsRUFBRTBFLEVBQUUsR0FBR3pFLEVBQUV5RSxFQUFFLEdBQTZGLE9BQTFGcTZCLElBQUcsV0FBVyxJQUFJcjZCLEVBQUV5M0IsR0FBR3Z6QixXQUFXdXpCLEdBQUd2ekIsV0FBVyxFQUFFLElBQUkzSSxFQUFFd0UsR0FBTixRQUFpQjAzQixHQUFHdnpCLFdBQVdsRSxLQUFJLENBQUNELElBQVd6RSxHQUFHeS9CLGNBQWMsV0FBVyxJQUFJaDdCLEVBQUVpNUIsR0FBR1IsSUFBSSxHQUFHLE1BQU0sQ0FBQ3lCLEtBQUt6NEIsUUFDcmZ6QixJQUFJaTdCLGlCQUFpQnJCLEdBQUdzQixvQkFBb0IsV0FBVyxPQUFPakMsR0FBR1IsSUFBSSxJQUFJMEMsMEJBQXlCLEdBQUlFLEdBQUdqeUIsRUFBR2hGLGtCQUFrQjB0QixJQUFHLEVBQUcsU0FBU3dKLEdBQUd0N0IsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUd5RSxFQUFFa1csTUFBTSxPQUFPblcsRUFBRTQxQixHQUFHMzFCLEVBQUUsS0FBSzFFLEVBQUVDLEdBQUdtNkIsR0FBRzExQixFQUFFRCxFQUFFbVcsTUFBTTVhLEVBQUVDLEdBQUcsU0FBUysvQixHQUFHdjdCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csR0FBR3pHLEVBQUVBLEVBQUV5RCxPQUFPLElBQUlxRCxFQUFFcEMsRUFBRTJCLElBQThCLE9BQTFCOHZCLEdBQUd6eEIsRUFBRStCLEdBQUd4RyxFQUFFdzhCLEdBQUdoNEIsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUU2RyxFQUFFTCxHQUFNLE9BQU9oQyxHQUFJOHhCLElBQTBFN3hCLEVBQUU0VixPQUFPLEVBQUV5bEIsR0FBR3Q3QixFQUFFQyxFQUFFekUsRUFBRXdHLEdBQVUvQixFQUFFa1csUUFBaEdsVyxFQUFFbXlCLFlBQVlweUIsRUFBRW95QixZQUFZbnlCLEVBQUU0VixRQUFRLElBQUk3VixFQUFFNnhCLFFBQVE3dkIsRUFBRXc1QixHQUFHeDdCLEVBQUVDLEVBQUUrQixJQUN4VyxTQUFTeTVCLEdBQUd6N0IsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxFQUFFSyxHQUFHLEdBQUcsT0FBT3JDLEVBQUUsQ0FBQyxJQUFJbUMsRUFBRTVHLEVBQUVrSCxLQUFLLE1BQUcsbUJBQW9CTixHQUFJdTVCLEdBQUd2NUIsU0FBSSxJQUFTQSxFQUFFSSxjQUFjLE9BQU9oSCxFQUFFeUssY0FBUyxJQUFTekssRUFBRWdILGVBQXNEdkMsRUFBRXUxQixHQUFHaDZCLEVBQUVrSCxLQUFLLEtBQUtqSCxFQUFFeUUsRUFBRUEsRUFBRTVELEtBQUtnRyxJQUFLVCxJQUFJM0IsRUFBRTJCLElBQUk1QixFQUFFNFYsT0FBTzNWLEVBQVNBLEVBQUVrVyxNQUFNblcsSUFBdkdDLEVBQUVvTCxJQUFJLEdBQUdwTCxFQUFFd0MsS0FBS04sRUFBRXc1QixHQUFHMzdCLEVBQUVDLEVBQUVrQyxFQUFFM0csRUFBRXdHLEVBQUVLLElBQW9GLE9BQVZGLEVBQUVuQyxFQUFFbVcsTUFBUyxJQUFLblUsRUFBRUssS0FBS0wsRUFBRUcsRUFBRXMwQixlQUEwQmw3QixFQUFFLFFBQWRBLEVBQUVBLEVBQUV5SyxTQUFtQnpLLEVBQUUwdEIsSUFBS2puQixFQUFFeEcsSUFBSXdFLEVBQUU0QixNQUFNM0IsRUFBRTJCLEtBQVk0NUIsR0FBR3g3QixFQUFFQyxFQUFFb0MsSUFBR3BDLEVBQUU0VixPQUFPLEdBQUU3VixFQUFFbzFCLEdBQUdqekIsRUFBRTNHLElBQUtvRyxJQUFJM0IsRUFBRTJCLElBQUk1QixFQUFFNFYsT0FBTzNWLEVBQVNBLEVBQUVrVyxNQUFNblcsR0FDbGIsU0FBUzI3QixHQUFHMzdCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csRUFBRUssR0FBRyxHQUFHLE9BQU9yQyxHQUFHaXBCLEdBQUdqcEIsRUFBRXkyQixjQUFjajdCLElBQUl3RSxFQUFFNEIsTUFBTTNCLEVBQUUyQixJQUFJLElBQUdrd0IsSUFBRyxFQUFHLElBQUt6dkIsRUFBRUwsR0FBcUMsT0FBTy9CLEVBQUU0eEIsTUFBTTd4QixFQUFFNnhCLE1BQU0ySixHQUFHeDdCLEVBQUVDLEVBQUVvQyxHQUFoRSxJQUFhLE1BQVJyQyxFQUFFNlYsU0FBZWljLElBQUcsR0FBMEMsT0FBTzhKLEdBQUc1N0IsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUU2RyxHQUNuTCxTQUFTdzVCLEdBQUc3N0IsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRXlFLEVBQUVnM0IsYUFBYWoxQixFQUFFeEcsRUFBRTRHLFNBQVNDLEVBQUUsT0FBT3JDLEVBQUVBLEVBQUUrVixjQUFjLEtBQUssR0FBRyxXQUFXdmEsRUFBRWEsTUFBTSxrQ0FBa0NiLEVBQUVhLEtBQUssR0FBRyxJQUFZLEVBQVA0RCxFQUFFNUQsTUFBUTRELEVBQUU4VixjQUFjLENBQUMrbEIsVUFBVSxHQUFHQyxHQUFHOTdCLEVBQUUxRSxPQUFRLElBQUcsSUFBTyxXQUFGQSxHQUE4RSxPQUFPeUUsRUFBRSxPQUFPcUMsRUFBRUEsRUFBRXk1QixVQUFVdmdDLEVBQUVBLEVBQUUwRSxFQUFFNHhCLE1BQU01eEIsRUFBRXd4QixXQUFXLFdBQVd4eEIsRUFBRThWLGNBQWMsQ0FBQytsQixVQUFVOTdCLEdBQUcrN0IsR0FBRzk3QixFQUFFRCxHQUFHLEtBQXhLQyxFQUFFOFYsY0FBYyxDQUFDK2xCLFVBQVUsR0FBR0MsR0FBRzk3QixFQUFFLE9BQU9vQyxFQUFFQSxFQUFFeTVCLFVBQVV2Z0MsUUFBMEgsT0FBTzhHLEdBQUc3RyxFQUFFNkcsRUFBRXk1QixVQUFVdmdDLEVBQUUwRSxFQUFFOFYsY0FBYyxNQUFNdmEsRUFBRUQsRUFBRXdnQyxHQUFHOTdCLEVBQUV6RSxHQUFlLE9BQVo4L0IsR0FBR3Q3QixFQUFFQyxFQUFFK0IsRUFBRXpHLEdBQVUwRSxFQUFFa1csTUFDMWUsU0FBUzZsQixHQUFHaDhCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUUwRSxFQUFFMkIsS0FBTyxPQUFPNUIsR0FBRyxPQUFPekUsR0FBRyxPQUFPeUUsR0FBR0EsRUFBRTRCLE1BQU1yRyxLQUFFMEUsRUFBRTRWLE9BQU8sS0FBSSxTQUFTK2xCLEdBQUc1N0IsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLElBQUlLLEVBQUVpc0IsR0FBRy95QixHQUFHMHlCLEdBQUdyckIsR0FBRW5CLFFBQTRDLE9BQXBDWSxFQUFFNnJCLEdBQUdqdUIsRUFBRW9DLEdBQUdxdkIsR0FBR3p4QixFQUFFK0IsR0FBR3pHLEVBQUV5OEIsR0FBR2g0QixFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRTZHLEVBQUVMLEdBQU0sT0FBT2hDLEdBQUk4eEIsSUFBMEU3eEIsRUFBRTRWLE9BQU8sRUFBRXlsQixHQUFHdDdCLEVBQUVDLEVBQUUxRSxFQUFFeUcsR0FBVS9CLEVBQUVrVyxRQUFoR2xXLEVBQUVteUIsWUFBWXB5QixFQUFFb3lCLFlBQVlueUIsRUFBRTRWLFFBQVEsSUFBSTdWLEVBQUU2eEIsUUFBUTd2QixFQUFFdzVCLEdBQUd4N0IsRUFBRUMsRUFBRStCLElBQzlQLFNBQVNpNkIsR0FBR2o4QixFQUFFQyxFQUFFMUUsRUFBRUMsRUFBRXdHLEdBQUcsR0FBR3NzQixHQUFHL3lCLEdBQUcsQ0FBQyxJQUFJOEcsR0FBRSxFQUFHdXNCLEdBQUczdUIsUUFBUW9DLEdBQUUsRUFBVyxHQUFScXZCLEdBQUd6eEIsRUFBRStCLEdBQU0sT0FBTy9CLEVBQUVpVSxVQUFVLE9BQU9sVSxJQUFJQSxFQUFFMlYsVUFBVSxLQUFLMVYsRUFBRTBWLFVBQVUsS0FBSzFWLEVBQUU0VixPQUFPLEdBQUdrZSxHQUFHOXpCLEVBQUUxRSxFQUFFQyxHQUFHNjRCLEdBQUdwMEIsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHeEcsR0FBRSxPQUFRLEdBQUcsT0FBT3dFLEVBQUUsQ0FBQyxJQUFJbUMsRUFBRWxDLEVBQUVpVSxVQUFVaFMsRUFBRWpDLEVBQUV3MkIsY0FBY3QwQixFQUFFeEIsTUFBTXVCLEVBQUUsSUFBSUQsRUFBRUUsRUFBRXZCLFFBQVF6RixFQUFFSSxFQUFFeTRCLFlBQVkscUJBQWtCNzRCLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEVBQUVBLEVBQUU0MkIsR0FBRzUyQixHQUF5QkEsRUFBRSt5QixHQUFHanVCLEVBQTFCOUUsRUFBRW16QixHQUFHL3lCLEdBQUcweUIsR0FBR3JyQixHQUFFbkIsU0FBbUIsSUFBSTlFLEVBQUVwQixFQUFFKzRCLHlCQUF5Qm4wQixFQUFFLG1CQUFvQnhELEdBQUcsbUJBQW9Cd0YsRUFBRW95Qix3QkFBd0JwMEIsR0FBRyxtQkFBb0JnQyxFQUFFaXlCLGtDQUNwZCxtQkFBb0JqeUIsRUFBRWd5Qiw0QkFBNEJqeUIsSUFBSTFHLEdBQUd5RyxJQUFJOUcsSUFBSSs0QixHQUFHajBCLEVBQUVrQyxFQUFFM0csRUFBRUwsR0FBRysyQixJQUFHLEVBQUcsSUFBSWwxQixFQUFFaUQsRUFBRThWLGNBQWM1VCxFQUFFOHhCLE1BQU1qM0IsRUFBRW0yQixHQUFHbHpCLEVBQUV6RSxFQUFFMkcsRUFBRUgsR0FBR0MsRUFBRWhDLEVBQUU4VixjQUFjN1QsSUFBSTFHLEdBQUd3QixJQUFJaUYsR0FBR1ksR0FBRXBCLFNBQVN5d0IsSUFBSSxtQkFBb0J2MUIsSUFBSTQyQixHQUFHdHpCLEVBQUUxRSxFQUFFb0IsRUFBRW5CLEdBQUd5RyxFQUFFaEMsRUFBRThWLGdCQUFnQjdULEVBQUVnd0IsSUFBSTJCLEdBQUc1ekIsRUFBRTFFLEVBQUUyRyxFQUFFMUcsRUFBRXdCLEVBQUVpRixFQUFFOUcsS0FBS2dGLEdBQUcsbUJBQW9CZ0MsRUFBRXF5QiwyQkFBMkIsbUJBQW9CcnlCLEVBQUVzeUIscUJBQXFCLG1CQUFvQnR5QixFQUFFc3lCLG9CQUFvQnR5QixFQUFFc3lCLHFCQUFxQixtQkFBb0J0eUIsRUFBRXF5QiwyQkFBMkJyeUIsRUFBRXF5Qiw2QkFBNkIsbUJBQ3plcnlCLEVBQUV1eUIsb0JBQW9CejBCLEVBQUU0VixPQUFPLEtBQUssbUJBQW9CMVQsRUFBRXV5QixvQkFBb0J6MEIsRUFBRTRWLE9BQU8sR0FBRzVWLEVBQUV3MkIsY0FBY2o3QixFQUFFeUUsRUFBRThWLGNBQWM5VCxHQUFHRSxFQUFFeEIsTUFBTW5GLEVBQUUyRyxFQUFFOHhCLE1BQU1oeUIsRUFBRUUsRUFBRXZCLFFBQVF6RixFQUFFSyxFQUFFMEcsSUFBSSxtQkFBb0JDLEVBQUV1eUIsb0JBQW9CejBCLEVBQUU0VixPQUFPLEdBQUdyYSxHQUFFLE9BQVEsQ0FBQzJHLEVBQUVsQyxFQUFFaVUsVUFBVXllLEdBQUczeUIsRUFBRUMsR0FBR2lDLEVBQUVqQyxFQUFFdzJCLGNBQWN0N0IsRUFBRThFLEVBQUV3QyxPQUFPeEMsRUFBRXExQixZQUFZcHpCLEVBQUUrdUIsR0FBR2h4QixFQUFFd0MsS0FBS1AsR0FBR0MsRUFBRXhCLE1BQU14RixFQUFFZ0YsRUFBRUYsRUFBRWczQixhQUFhajZCLEVBQUVtRixFQUFFdkIsUUFBd0Isc0JBQWhCcUIsRUFBRTFHLEVBQUV5NEIsYUFBWSxjQUFrQi94QixLQUFHLE9BQU9BLEVBQUVBLEVBQUU4dkIsR0FBRzl2QixHQUF5QkEsRUFBRWlzQixHQUFHanVCLEVBQTFCZ0MsRUFBRXFzQixHQUFHL3lCLEdBQUcweUIsR0FBR3JyQixHQUFFbkIsU0FBbUIsSUFBSWhCLEVBQUVsRixFQUFFKzRCLDBCQUEwQjMzQixFQUFFLG1CQUFvQjhELEdBQ25mLG1CQUFvQjBCLEVBQUVveUIsMEJBQTBCLG1CQUFvQnB5QixFQUFFaXlCLGtDQUFrQyxtQkFBb0JqeUIsRUFBRWd5Qiw0QkFBNEJqeUIsSUFBSS9CLEdBQUduRCxJQUFJaUYsSUFBSWl5QixHQUFHajBCLEVBQUVrQyxFQUFFM0csRUFBRXlHLEdBQUdpd0IsSUFBRyxFQUFHbDFCLEVBQUVpRCxFQUFFOFYsY0FBYzVULEVBQUU4eEIsTUFBTWozQixFQUFFbTJCLEdBQUdsekIsRUFBRXpFLEVBQUUyRyxFQUFFSCxHQUFHLElBQUluQyxFQUFFSSxFQUFFOFYsY0FBYzdULElBQUkvQixHQUFHbkQsSUFBSTZDLEdBQUdnRCxHQUFFcEIsU0FBU3l3QixJQUFJLG1CQUFvQnp4QixJQUFJOHlCLEdBQUd0ekIsRUFBRTFFLEVBQUVrRixFQUFFakYsR0FBR3FFLEVBQUVJLEVBQUU4VixnQkFBZ0I1YSxFQUFFKzJCLElBQUkyQixHQUFHNXpCLEVBQUUxRSxFQUFFSixFQUFFSyxFQUFFd0IsRUFBRTZDLEVBQUVvQyxLQUFLdEYsR0FBRyxtQkFBb0J3RixFQUFFKzVCLDRCQUE0QixtQkFBb0IvNUIsRUFBRWc2QixzQkFBc0IsbUJBQW9CaDZCLEVBQUVnNkIscUJBQXFCaDZCLEVBQUVnNkIsb0JBQW9CM2dDLEVBQzFnQnFFLEVBQUVvQyxHQUFHLG1CQUFvQkUsRUFBRSs1Qiw0QkFBNEIvNUIsRUFBRSs1QiwyQkFBMkIxZ0MsRUFBRXFFLEVBQUVvQyxJQUFJLG1CQUFvQkUsRUFBRWk2QixxQkFBcUJuOEIsRUFBRTRWLE9BQU8sR0FBRyxtQkFBb0IxVCxFQUFFb3lCLDBCQUEwQnQwQixFQUFFNFYsT0FBTyxPQUFPLG1CQUFvQjFULEVBQUVpNkIsb0JBQW9CbDZCLElBQUlsQyxFQUFFeTJCLGVBQWV6NUIsSUFBSWdELEVBQUUrVixnQkFBZ0I5VixFQUFFNFYsT0FBTyxHQUFHLG1CQUFvQjFULEVBQUVveUIseUJBQXlCcnlCLElBQUlsQyxFQUFFeTJCLGVBQWV6NUIsSUFBSWdELEVBQUUrVixnQkFBZ0I5VixFQUFFNFYsT0FBTyxLQUFLNVYsRUFBRXcyQixjQUFjajdCLEVBQUV5RSxFQUFFOFYsY0FBY2xXLEdBQUdzQyxFQUFFeEIsTUFBTW5GLEVBQUUyRyxFQUFFOHhCLE1BQU1wMEIsRUFBRXNDLEVBQUV2QixRQUFRcUIsRUFBRXpHLEVBQUVMLElBQUksbUJBQW9CZ0gsRUFBRWk2QixvQkFDN2ZsNkIsSUFBSWxDLEVBQUV5MkIsZUFBZXo1QixJQUFJZ0QsRUFBRStWLGdCQUFnQjlWLEVBQUU0VixPQUFPLEdBQUcsbUJBQW9CMVQsRUFBRW95Qix5QkFBeUJyeUIsSUFBSWxDLEVBQUV5MkIsZUFBZXo1QixJQUFJZ0QsRUFBRStWLGdCQUFnQjlWLEVBQUU0VixPQUFPLEtBQUtyYSxHQUFFLEdBQUksT0FBTzZnQyxHQUFHcjhCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFNkcsRUFBRUwsR0FDekwsU0FBU3E2QixHQUFHcjhCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csRUFBRUssR0FBRzI1QixHQUFHaDhCLEVBQUVDLEdBQUcsSUFBSWtDLEVBQUUsSUFBYSxHQUFSbEMsRUFBRTRWLE9BQVUsSUFBSXJhLElBQUkyRyxFQUFFLE9BQU9ILEdBQUc4c0IsR0FBRzd1QixFQUFFMUUsR0FBRSxHQUFJaWdDLEdBQUd4N0IsRUFBRUMsRUFBRW9DLEdBQUc3RyxFQUFFeUUsRUFBRWlVLFVBQVVtbkIsR0FBRzU1QixRQUFReEIsRUFBRSxJQUFJaUMsRUFBRUMsR0FBRyxtQkFBb0I1RyxFQUFFK2dDLHlCQUF5QixLQUFLOWdDLEVBQUV3RCxTQUF3SSxPQUEvSGlCLEVBQUU0VixPQUFPLEVBQUUsT0FBTzdWLEdBQUdtQyxHQUFHbEMsRUFBRWtXLE1BQU13ZixHQUFHMTFCLEVBQUVELEVBQUVtVyxNQUFNLEtBQUs5VCxHQUFHcEMsRUFBRWtXLE1BQU13ZixHQUFHMTFCLEVBQUUsS0FBS2lDLEVBQUVHLElBQUlpNUIsR0FBR3Q3QixFQUFFQyxFQUFFaUMsRUFBRUcsR0FBR3BDLEVBQUU4VixjQUFjdmEsRUFBRXk0QixNQUFNanlCLEdBQUc4c0IsR0FBRzd1QixFQUFFMUUsR0FBRSxHQUFXMEUsRUFBRWtXLE1BQU0sU0FBU29tQixHQUFHdjhCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWtVLFVBQVVqVSxFQUFFdThCLGVBQWUvTixHQUFHenVCLEVBQUVDLEVBQUV1OEIsZUFBZXY4QixFQUFFdThCLGlCQUFpQnY4QixFQUFFVyxTQUFTWCxFQUFFVyxTQUFTNnRCLEdBQUd6dUIsRUFBRUMsRUFBRVcsU0FBUSxHQUFJczFCLEdBQUdsMkIsRUFBRUMsRUFBRW9ZLGVBQzdkLElBUzBWb2tCLEdBQU1DLEdBQUdDLEdBVC9WQyxHQUFHLENBQUM1bUIsV0FBVyxLQUFLNm1CLFVBQVUsR0FDbEMsU0FBU0MsR0FBRzk4QixFQUFFQyxFQUFFMUUsR0FBRyxJQUFzQzRHLEVBQWxDM0csRUFBRXlFLEVBQUVnM0IsYUFBYWoxQixFQUFFd0IsR0FBRS9CLFFBQVFZLEdBQUUsRUFBNk0sT0FBdk1GLEVBQUUsSUFBYSxHQUFSbEMsRUFBRTRWLFVBQWExVCxHQUFFLE9BQU9uQyxHQUFHLE9BQU9BLEVBQUUrVixnQkFBaUIsSUFBTyxFQUFGL1QsSUFBTUcsR0FBR0UsR0FBRSxFQUFHcEMsRUFBRTRWLFFBQVEsSUFBSSxPQUFPN1YsR0FBRyxPQUFPQSxFQUFFK1Ysb0JBQWUsSUFBU3ZhLEVBQUV1aEMsV0FBVSxJQUFLdmhDLEVBQUV3aEMsNkJBQTZCaDdCLEdBQUcsR0FBR0wsR0FBRTZCLEdBQUksRUFBRnhCLEdBQVEsT0FBT2hDLFFBQUcsSUFBU3hFLEVBQUV1aEMsVUFBVTdGLEdBQUdqM0IsR0FBR0QsRUFBRXhFLEVBQUU0RyxTQUFTSixFQUFFeEcsRUFBRXVoQyxTQUFZMTZCLEdBQVNyQyxFQUFFaTlCLEdBQUdoOUIsRUFBRUQsRUFBRWdDLEVBQUV6RyxHQUFHMEUsRUFBRWtXLE1BQU1KLGNBQWMsQ0FBQytsQixVQUFVdmdDLEdBQUcwRSxFQUFFOFYsY0FBYzZtQixHQUFHNThCLEdBQUssaUJBQWtCeEUsRUFBRTBoQywyQkFBaUNsOUIsRUFBRWk5QixHQUFHaDlCLEVBQUVELEVBQUVnQyxFQUFFekcsR0FBRzBFLEVBQUVrVyxNQUFNSixjQUFjLENBQUMrbEIsVUFBVXZnQyxHQUMvZjBFLEVBQUU4VixjQUFjNm1CLEdBQUczOEIsRUFBRTR4QixNQUFNLFNBQVM3eEIsS0FBRXpFLEVBQUU0aEMsR0FBRyxDQUFDOWdDLEtBQUssVUFBVStGLFNBQVNwQyxHQUFHQyxFQUFFNUQsS0FBS2QsRUFBRSxPQUFRcWEsT0FBTzNWLEVBQVNBLEVBQUVrVyxNQUFNNWEsS0FBWXlFLEVBQUUrVixjQUFrQjFULEdBQVM3RyxFQUFFNGhDLEdBQUdwOUIsRUFBRUMsRUFBRXpFLEVBQUU0RyxTQUFTNUcsRUFBRXVoQyxTQUFTeGhDLEdBQUc4RyxFQUFFcEMsRUFBRWtXLE1BQU1uVSxFQUFFaEMsRUFBRW1XLE1BQU1KLGNBQWMxVCxFQUFFMFQsY0FBYyxPQUFPL1QsRUFBRSxDQUFDODVCLFVBQVV2Z0MsR0FBRyxDQUFDdWdDLFVBQVU5NUIsRUFBRTg1QixVQUFVdmdDLEdBQUc4RyxFQUFFb3ZCLFdBQVd6eEIsRUFBRXl4QixZQUFZbDJCLEVBQUUwRSxFQUFFOFYsY0FBYzZtQixHQUFHcGhDLElBQUVELEVBQUU4aEMsR0FBR3I5QixFQUFFQyxFQUFFekUsRUFBRTRHLFNBQVM3RyxHQUFHMEUsRUFBRThWLGNBQWMsS0FBWXhhLElBQ2xRLFNBQVMwaEMsR0FBR2o5QixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRWhDLEVBQUUzRCxLQUFLZ0csRUFBRXJDLEVBQUVtVyxNQUF1SyxPQUFqS2xXLEVBQUUsQ0FBQzVELEtBQUssU0FBUytGLFNBQVNuQyxHQUFHLElBQU8sRUFBRitCLElBQU0sT0FBT0ssR0FBR0EsRUFBRW92QixXQUFXLEVBQUVwdkIsRUFBRTQwQixhQUFhaDNCLEdBQUdvQyxFQUFFODZCLEdBQUdsOUIsRUFBRStCLEVBQUUsRUFBRSxNQUFNekcsRUFBRW02QixHQUFHbjZCLEVBQUV5RyxFQUFFeEcsRUFBRSxNQUFNNkcsRUFBRXVULE9BQU81VixFQUFFekUsRUFBRXFhLE9BQU81VixFQUFFcUMsRUFBRStULFFBQVE3YSxFQUFFeUUsRUFBRW1XLE1BQU05VCxFQUFTOUcsRUFDclYsU0FBUzhoQyxHQUFHcjlCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLElBQUl3RyxFQUFFaEMsRUFBRW1XLE1BQWlMLE9BQTNLblcsRUFBRWdDLEVBQUVvVSxRQUFRN2EsRUFBRTY1QixHQUFHcHpCLEVBQUUsQ0FBQzNGLEtBQUssVUFBVStGLFNBQVM3RyxJQUFJLElBQVksRUFBUDBFLEVBQUU1RCxRQUFVZCxFQUFFczJCLE1BQU1yMkIsR0FBR0QsRUFBRXFhLE9BQU8zVixFQUFFMUUsRUFBRTZhLFFBQVEsS0FBSyxPQUFPcFcsSUFBSUEsRUFBRWkxQixXQUFXLEtBQUtqMUIsRUFBRTZWLE1BQU0sRUFBRTVWLEVBQUVpMUIsWUFBWWoxQixFQUFFKzBCLFdBQVdoMUIsR0FBVUMsRUFBRWtXLE1BQU01YSxFQUM3TixTQUFTNmhDLEdBQUdwOUIsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLElBQUlLLEVBQUVwQyxFQUFFNUQsS0FBSzhGLEVBQUVuQyxFQUFFbVcsTUFBTW5XLEVBQUVtQyxFQUFFaVUsUUFBUSxJQUFJbFUsRUFBRSxDQUFDN0YsS0FBSyxTQUFTK0YsU0FBUzdHLEdBQW9TLE9BQWpTLElBQU8sRUFBRjhHLElBQU1wQyxFQUFFa1csUUFBUWhVLElBQUc1RyxFQUFFMEUsRUFBRWtXLE9BQVFzYixXQUFXLEVBQUVsMkIsRUFBRTA3QixhQUFhLzBCLEVBQWlCLFFBQWZDLEVBQUU1RyxFQUFFeTVCLGFBQXFCLzBCLEVBQUVpMUIsWUFBWTM1QixFQUFFMjVCLFlBQVlqMUIsRUFBRSswQixXQUFXN3lCLEVBQUVBLEVBQUU4eUIsV0FBVyxNQUFNaDFCLEVBQUVpMUIsWUFBWWoxQixFQUFFKzBCLFdBQVcsTUFBTXo1QixFQUFFNjVCLEdBQUdqekIsRUFBRUQsR0FBRyxPQUFPbEMsRUFBRXhFLEVBQUU0NUIsR0FBR3AxQixFQUFFeEUsSUFBSUEsRUFBRWs2QixHQUFHbDZCLEVBQUU2RyxFQUFFTCxFQUFFLE9BQVE2VCxPQUFPLEVBQUdyYSxFQUFFb2EsT0FBTzNWLEVBQUUxRSxFQUFFcWEsT0FBTzNWLEVBQUUxRSxFQUFFNmEsUUFBUTVhLEVBQUV5RSxFQUFFa1csTUFBTTVhLEVBQVNDLEVBQUUsU0FBUzhoQyxHQUFHdDlCLEVBQUVDLEdBQUdELEVBQUU2eEIsT0FBTzV4QixFQUFFLElBQUkxRSxFQUFFeUUsRUFBRTJWLFVBQVUsT0FBT3BhLElBQUlBLEVBQUVzMkIsT0FBTzV4QixHQUFHdXhCLEdBQUd4eEIsRUFBRTRWLE9BQU8zVixHQUN0ZCxTQUFTczlCLEdBQUd2OUIsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxFQUFFSyxHQUFHLElBQUlGLEVBQUVuQyxFQUFFK1YsY0FBYyxPQUFPNVQsRUFBRW5DLEVBQUUrVixjQUFjLENBQUN5bkIsWUFBWXY5QixFQUFFdzlCLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUtuaUMsRUFBRW9pQyxLQUFLcmlDLEVBQUVzaUMsU0FBUzc3QixFQUFFZ3pCLFdBQVczeUIsSUFBSUYsRUFBRXE3QixZQUFZdjlCLEVBQUVrQyxFQUFFczdCLFVBQVUsS0FBS3Q3QixFQUFFdTdCLG1CQUFtQixFQUFFdjdCLEVBQUV3N0IsS0FBS25pQyxFQUFFMkcsRUFBRXk3QixLQUFLcmlDLEVBQUU0RyxFQUFFMDdCLFNBQVM3N0IsRUFBRUcsRUFBRTZ5QixXQUFXM3lCLEdBQ3ZRLFNBQVN5N0IsR0FBRzk5QixFQUFFQyxFQUFFMUUsR0FBRyxJQUFJQyxFQUFFeUUsRUFBRWczQixhQUFhajFCLEVBQUV4RyxFQUFFazdCLFlBQVlyMEIsRUFBRTdHLEVBQUVvaUMsS0FBc0MsR0FBakN0QyxHQUFHdDdCLEVBQUVDLEVBQUV6RSxFQUFFNEcsU0FBUzdHLEdBQWtCLElBQU8sR0FBdEJDLEVBQUVnSSxHQUFFL0IsVUFBcUJqRyxFQUFJLEVBQUZBLEVBQUksRUFBRXlFLEVBQUU0VixPQUFPLE9BQU8sQ0FBQyxHQUFHLE9BQU83VixHQUFHLElBQWEsR0FBUkEsRUFBRTZWLE9BQVU3VixFQUFFLElBQUlBLEVBQUVDLEVBQUVrVyxNQUFNLE9BQU9uVyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFcUwsSUFBSSxPQUFPckwsRUFBRStWLGVBQWV1bkIsR0FBR3Q5QixFQUFFekUsUUFBUSxHQUFHLEtBQUt5RSxFQUFFcUwsSUFBSWl5QixHQUFHdDlCLEVBQUV6RSxRQUFRLEdBQUcsT0FBT3lFLEVBQUVtVyxNQUFNLENBQUNuVyxFQUFFbVcsTUFBTVAsT0FBTzVWLEVBQUVBLEVBQUVBLEVBQUVtVyxNQUFNLFNBQVMsR0FBR25XLElBQUlDLEVBQUUsTUFBTUQsRUFBRSxLQUFLLE9BQU9BLEVBQUVvVyxTQUFTLENBQUMsR0FBRyxPQUFPcFcsRUFBRTRWLFFBQVE1VixFQUFFNFYsU0FBUzNWLEVBQUUsTUFBTUQsRUFBRUEsRUFBRUEsRUFBRTRWLE9BQU81VixFQUFFb1csUUFBUVIsT0FBTzVWLEVBQUU0VixPQUFPNVYsRUFBRUEsRUFBRW9XLFFBQVE1YSxHQUFHLEVBQVMsR0FBUG1HLEdBQUU2QixHQUFFaEksR0FBTSxJQUFZLEVBQVB5RSxFQUFFNUQsTUFBUTRELEVBQUU4VixjQUN6ZSxVQUFVLE9BQU8vVCxHQUFHLElBQUssV0FBcUIsSUFBVnpHLEVBQUUwRSxFQUFFa1csTUFBVW5VLEVBQUUsS0FBSyxPQUFPekcsR0FBaUIsUUFBZHlFLEVBQUV6RSxFQUFFb2EsWUFBb0IsT0FBTzZnQixHQUFHeDJCLEtBQUtnQyxFQUFFekcsR0FBR0EsRUFBRUEsRUFBRTZhLFFBQVksUUFBSjdhLEVBQUV5RyxJQUFZQSxFQUFFL0IsRUFBRWtXLE1BQU1sVyxFQUFFa1csTUFBTSxPQUFPblUsRUFBRXpHLEVBQUU2YSxRQUFRN2EsRUFBRTZhLFFBQVEsTUFBTW1uQixHQUFHdDlCLEdBQUUsRUFBRytCLEVBQUV6RyxFQUFFOEcsRUFBRXBDLEVBQUUrMEIsWUFBWSxNQUFNLElBQUssWUFBNkIsSUFBakJ6NUIsRUFBRSxLQUFLeUcsRUFBRS9CLEVBQUVrVyxNQUFVbFcsRUFBRWtXLE1BQU0sS0FBSyxPQUFPblUsR0FBRyxDQUFlLEdBQUcsUUFBakJoQyxFQUFFZ0MsRUFBRTJULFlBQXVCLE9BQU82Z0IsR0FBR3gyQixHQUFHLENBQUNDLEVBQUVrVyxNQUFNblUsRUFBRSxNQUFNaEMsRUFBRWdDLEVBQUVvVSxRQUFRcFUsRUFBRW9VLFFBQVE3YSxFQUFFQSxFQUFFeUcsRUFBRUEsRUFBRWhDLEVBQUV1OUIsR0FBR3Q5QixHQUFFLEVBQUcxRSxFQUFFLEtBQUs4RyxFQUFFcEMsRUFBRSswQixZQUFZLE1BQU0sSUFBSyxXQUFXdUksR0FBR3Q5QixHQUFFLEVBQUcsS0FBSyxVQUFLLEVBQU9BLEVBQUUrMEIsWUFBWSxNQUFNLFFBQVEvMEIsRUFBRThWLGNBQWMsS0FBSyxPQUFPOVYsRUFBRWtXLE1BQy9mLFNBQVNxbEIsR0FBR3g3QixFQUFFQyxFQUFFMUUsR0FBeUQsR0FBdEQsT0FBT3lFLElBQUlDLEVBQUUweEIsYUFBYTN4QixFQUFFMnhCLGNBQWN5QixJQUFJbnpCLEVBQUU0eEIsTUFBUyxJQUFLdDJCLEVBQUUwRSxFQUFFd3hCLFlBQVksQ0FBQyxHQUFHLE9BQU96eEIsR0FBR0MsRUFBRWtXLFFBQVFuVyxFQUFFbVcsTUFBTSxNQUFNaFYsTUFBTWtDLEVBQUUsTUFBTSxHQUFHLE9BQU9wRCxFQUFFa1csTUFBTSxDQUE0QyxJQUFqQzVhLEVBQUU2NUIsR0FBWnAxQixFQUFFQyxFQUFFa1csTUFBYW5XLEVBQUVpM0IsY0FBY2gzQixFQUFFa1csTUFBTTVhLEVBQU1BLEVBQUVxYSxPQUFPM1YsRUFBRSxPQUFPRCxFQUFFb1csU0FBU3BXLEVBQUVBLEVBQUVvVyxTQUFRN2EsRUFBRUEsRUFBRTZhLFFBQVFnZixHQUFHcDFCLEVBQUVBLEVBQUVpM0IsZUFBZ0JyaEIsT0FBTzNWLEVBQUUxRSxFQUFFNmEsUUFBUSxLQUFLLE9BQU9uVyxFQUFFa1csTUFBTSxPQUFPLEtBSzVQLFNBQVM0bkIsR0FBRy85QixFQUFFQyxHQUFHLElBQUk0MkIsR0FBRyxPQUFPNzJCLEVBQUU2OUIsVUFBVSxJQUFLLFNBQVM1OUIsRUFBRUQsRUFBRTQ5QixLQUFLLElBQUksSUFBSXJpQyxFQUFFLEtBQUssT0FBTzBFLEdBQUcsT0FBT0EsRUFBRTBWLFlBQVlwYSxFQUFFMEUsR0FBR0EsRUFBRUEsRUFBRW1XLFFBQVEsT0FBTzdhLEVBQUV5RSxFQUFFNDlCLEtBQUssS0FBS3JpQyxFQUFFNmEsUUFBUSxLQUFLLE1BQU0sSUFBSyxZQUFZN2EsRUFBRXlFLEVBQUU0OUIsS0FBSyxJQUFJLElBQUlwaUMsRUFBRSxLQUFLLE9BQU9ELEdBQUcsT0FBT0EsRUFBRW9hLFlBQVluYSxFQUFFRCxHQUFHQSxFQUFFQSxFQUFFNmEsUUFBUSxPQUFPNWEsRUFBRXlFLEdBQUcsT0FBT0QsRUFBRTQ5QixLQUFLNTlCLEVBQUU0OUIsS0FBSyxLQUFLNTlCLEVBQUU0OUIsS0FBS3huQixRQUFRLEtBQUs1YSxFQUFFNGEsUUFBUSxNQUM3WixTQUFTNG5CLEdBQUdoK0IsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRXlFLEVBQUVnM0IsYUFBYSxPQUFPaDNCLEVBQUVvTCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPLEtBQUssS0FBSyxFQUFFLE9BQU9pakIsR0FBR3J1QixFQUFFd0MsT0FBTytyQixLQUFLLEtBQUssS0FBSyxFQUFzTCxPQUFwTDZILEtBQUszMEIsR0FBRW1CLElBQUduQixHQUFFa0IsSUFBRzIwQixNQUFLLzdCLEVBQUV5RSxFQUFFaVUsV0FBWXNvQixpQkFBaUJoaEMsRUFBRW9GLFFBQVFwRixFQUFFZ2hDLGVBQWVoaEMsRUFBRWdoQyxlQUFlLE1BQVMsT0FBT3g4QixHQUFHLE9BQU9BLEVBQUVtVyxRQUFNaWhCLEdBQUduM0IsR0FBR0EsRUFBRTRWLE9BQU8sRUFBRXJhLEVBQUU0YyxVQUFVblksRUFBRTRWLE9BQU8sTUFBa0IsS0FBSyxLQUFLLEVBQUUwZ0IsR0FBR3QyQixHQUFHLElBQUkrQixFQUFFaTBCLEdBQUdELEdBQUd2MEIsU0FBa0IsR0FBVGxHLEVBQUUwRSxFQUFFd0MsS0FBUSxPQUFPekMsR0FBRyxNQUFNQyxFQUFFaVUsVUFBVXdvQixHQUFHMThCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFLd0UsRUFBRTRCLE1BQU0zQixFQUFFMkIsTUFBTTNCLEVBQUU0VixPQUFPLFNBQVMsQ0FBQyxJQUFJcmEsRUFBRSxDQUFDLEdBQUcsT0FDN2Z5RSxFQUFFaVUsVUFBVSxNQUFNL1MsTUFBTWtDLEVBQUUsTUFBTSxPQUFPLEtBQXNCLEdBQWpCckQsRUFBRWkyQixHQUFHSCxHQUFHcjBCLFNBQVkyMUIsR0FBR24zQixHQUFHLENBQUN6RSxFQUFFeUUsRUFBRWlVLFVBQVUzWSxFQUFFMEUsRUFBRXdDLEtBQUssSUFBSUosRUFBRXBDLEVBQUV3MkIsY0FBOEIsT0FBaEJqN0IsRUFBRWt5QixJQUFJenRCLEVBQUV6RSxFQUFFbXlCLElBQUl0ckIsRUFBUzlHLEdBQUcsSUFBSyxTQUFTaUcsR0FBRSxTQUFTaEcsR0FBR2dHLEdBQUUsUUFBUWhHLEdBQUcsTUFBTSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssUUFBUWdHLEdBQUUsT0FBT2hHLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUl3RSxFQUFFLEVBQUVBLEVBQUUrcUIsR0FBR2pzQixPQUFPa0IsSUFBSXdCLEdBQUV1cEIsR0FBRy9xQixHQUFHeEUsR0FBRyxNQUFNLElBQUssU0FBU2dHLEdBQUUsUUFBUWhHLEdBQUcsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT2dHLEdBQUUsUUFBUWhHLEdBQUdnRyxHQUFFLE9BQU9oRyxHQUFHLE1BQU0sSUFBSyxVQUFVZ0csR0FBRSxTQUFTaEcsR0FBRyxNQUFNLElBQUssUUFBUXFSLEdBQUdyUixFQUFFNkcsR0FBR2IsR0FBRSxVQUFVaEcsR0FBRyxNQUFNLElBQUssU0FBU0EsRUFBRW1SLGNBQzVmLENBQUNzeEIsY0FBYzU3QixFQUFFNjdCLFVBQVUxOEIsR0FBRSxVQUFVaEcsR0FBRyxNQUFNLElBQUssV0FBV3NTLEdBQUd0UyxFQUFFNkcsR0FBR2IsR0FBRSxVQUFVaEcsR0FBa0IsSUFBSSxJQUFJMkcsS0FBdkJtUixHQUFHL1gsRUFBRThHLEdBQUdyQyxFQUFFLEtBQWtCcUMsRUFBRUEsRUFBRXRGLGVBQWVvRixLQUFLSCxFQUFFSyxFQUFFRixHQUFHLGFBQWFBLEVBQUUsaUJBQWtCSCxFQUFFeEcsRUFBRXlTLGNBQWNqTSxJQUFJaEMsRUFBRSxDQUFDLFdBQVdnQyxJQUFJLGlCQUFrQkEsR0FBR3hHLEVBQUV5UyxjQUFjLEdBQUdqTSxJQUFJaEMsRUFBRSxDQUFDLFdBQVcsR0FBR2dDLElBQUlvRixFQUFHckssZUFBZW9GLElBQUksTUFBTUgsR0FBRyxhQUFhRyxHQUFHWCxHQUFFLFNBQVNoRyxJQUFJLE9BQU9ELEdBQUcsSUFBSyxRQUFRb1EsRUFBR25RLEdBQUcyUixHQUFHM1IsRUFBRTZHLEdBQUUsR0FBSSxNQUFNLElBQUssV0FBV3NKLEVBQUduUSxHQUFHd1MsR0FBR3hTLEdBQUcsTUFBTSxJQUFLLFNBQVMsSUFBSyxTQUFTLE1BQU0sUUFBUSxtQkFBb0I2RyxFQUFFODdCLFVBQVUzaUMsRUFBRTRpQyxRQUN0ZjNSLElBQUlqeEIsRUFBRXdFLEVBQUVDLEVBQUVteUIsWUFBWTUyQixFQUFFLE9BQU9BLElBQUl5RSxFQUFFNFYsT0FBTyxPQUFPLENBQWlaLE9BQWhaMVQsRUFBRSxJQUFJSCxFQUFFaU4sU0FBU2pOLEVBQUVBLEVBQUVvTCxjQUFjcE4sSUFBSWtPLEtBQVVsTyxFQUFFbU8sR0FBRzVTLElBQUl5RSxJQUFJa08sR0FBUSxXQUFXM1MsSUFBR3lFLEVBQUVtQyxFQUFFb0QsY0FBYyxRQUFTbUosVUFBVSxxQkFBdUIxTyxFQUFFQSxFQUFFNk8sWUFBWTdPLEVBQUU0TyxhQUFhLGlCQUFrQnBULEVBQUVnWSxHQUFHeFQsRUFBRW1DLEVBQUVvRCxjQUFjaEssRUFBRSxDQUFDaVksR0FBR2hZLEVBQUVnWSxNQUFNeFQsRUFBRW1DLEVBQUVvRCxjQUFjaEssR0FBRyxXQUFXQSxJQUFJNEcsRUFBRW5DLEVBQUV4RSxFQUFFMGlDLFNBQVMvN0IsRUFBRSs3QixVQUFTLEVBQUcxaUMsRUFBRTZpQyxPQUFPbDhCLEVBQUVrOEIsS0FBSzdpQyxFQUFFNmlDLFFBQVFyK0IsRUFBRW1DLEVBQUVtOEIsZ0JBQWdCdCtCLEVBQUV6RSxHQUFHeUUsRUFBRTB0QixJQUFJenRCLEVBQUVELEVBQUUydEIsSUFBSW55QixFQUFFaWhDLEdBQUd6OEIsRUFBRUMsR0FBU0EsRUFBRWlVLFVBQVVsVSxFQUFFbUMsRUFBRW9SLEdBQUdoWSxFQUFFQyxHQUFVRCxHQUFHLElBQUssU0FBU2lHLEdBQUUsU0FBU3hCLEdBQUd3QixHQUFFLFFBQVF4QixHQUNwZmdDLEVBQUV4RyxFQUFFLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVFnRyxHQUFFLE9BQU94QixHQUFHZ0MsRUFBRXhHLEVBQUUsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUl3RyxFQUFFLEVBQUVBLEVBQUUrb0IsR0FBR2pzQixPQUFPa0QsSUFBSVIsR0FBRXVwQixHQUFHL29CLEdBQUdoQyxHQUFHZ0MsRUFBRXhHLEVBQUUsTUFBTSxJQUFLLFNBQVNnRyxHQUFFLFFBQVF4QixHQUFHZ0MsRUFBRXhHLEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT2dHLEdBQUUsUUFBUXhCLEdBQUd3QixHQUFFLE9BQU94QixHQUFHZ0MsRUFBRXhHLEVBQUUsTUFBTSxJQUFLLFVBQVVnRyxHQUFFLFNBQVN4QixHQUFHZ0MsRUFBRXhHLEVBQUUsTUFBTSxJQUFLLFFBQVFxUixHQUFHN00sRUFBRXhFLEdBQUd3RyxFQUFFd0ssR0FBR3hNLEVBQUV4RSxHQUFHZ0csR0FBRSxVQUFVeEIsR0FBRyxNQUFNLElBQUssU0FBU2dDLEVBQUVxTCxHQUFHck4sRUFBRXhFLEdBQUcsTUFBTSxJQUFLLFNBQVN3RSxFQUFFMk0sY0FBYyxDQUFDc3hCLGNBQWN6aUMsRUFBRTBpQyxVQUFVbDhCLEVBQUUxRyxFQUFFLEdBQUdFLEVBQUUsQ0FBQ1csV0FBTSxJQUFTcUYsR0FBRSxVQUFVeEIsR0FBRyxNQUFNLElBQUssV0FBVzhOLEdBQUc5TixFQUFFeEUsR0FBR3dHLEVBQ3BmNEwsR0FBRzVOLEVBQUV4RSxHQUFHZ0csR0FBRSxVQUFVeEIsR0FBRyxNQUFNLFFBQVFnQyxFQUFFeEcsRUFBRThYLEdBQUcvWCxFQUFFeUcsR0FBRyxJQUFJRSxFQUFFRixFQUFFLElBQUlLLEtBQUtILEVBQUUsR0FBR0EsRUFBRW5GLGVBQWVzRixHQUFHLENBQUMsSUFBSUosRUFBRUMsRUFBRUcsR0FBRyxVQUFVQSxFQUFFMlAsR0FBR2hTLEVBQUVpQyxHQUFHLDRCQUE0QkksRUFBdUIsT0FBcEJKLEVBQUVBLEVBQUVBLEVBQUU4cUIsWUFBTyxJQUFnQnplLEdBQUd0TyxFQUFFaUMsR0FBSSxhQUFhSSxFQUFFLGlCQUFrQkosR0FBRyxhQUFhMUcsR0FBRyxLQUFLMEcsSUFBSThNLEdBQUcvTyxFQUFFaUMsR0FBRyxpQkFBa0JBLEdBQUc4TSxHQUFHL08sRUFBRSxHQUFHaUMsR0FBRyxtQ0FBbUNJLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUkrRSxFQUFHckssZUFBZXNGLEdBQUcsTUFBTUosR0FBRyxhQUFhSSxHQUFHYixHQUFFLFNBQVN4QixHQUFHLE1BQU1pQyxHQUFHNEcsRUFBRzdJLEVBQUVxQyxFQUFFSixFQUFFRSxJQUFJLE9BQU81RyxHQUFHLElBQUssUUFBUW9RLEVBQUczTCxHQUFHbU4sR0FBR25OLEVBQUV4RSxHQUFFLEdBQ25mLE1BQU0sSUFBSyxXQUFXbVEsRUFBRzNMLEdBQUdnTyxHQUFHaE8sR0FBRyxNQUFNLElBQUssU0FBUyxNQUFNeEUsRUFBRVcsT0FBTzZELEVBQUVpSixhQUFhLFFBQVEsR0FBR3VDLEVBQUdoUSxFQUFFVyxRQUFRLE1BQU0sSUFBSyxTQUFTNkQsRUFBRWsrQixXQUFXMWlDLEVBQUUwaUMsU0FBbUIsT0FBVjc3QixFQUFFN0csRUFBRVcsT0FBY29SLEdBQUd2TixJQUFJeEUsRUFBRTBpQyxTQUFTNzdCLEdBQUUsR0FBSSxNQUFNN0csRUFBRWtSLGNBQWNhLEdBQUd2TixJQUFJeEUsRUFBRTBpQyxTQUFTMWlDLEVBQUVrUixjQUFhLEdBQUksTUFBTSxRQUFRLG1CQUFvQjFLLEVBQUVtOEIsVUFBVW4rQixFQUFFbytCLFFBQVEzUixJQUFJRyxHQUFHcnhCLEVBQUVDLEtBQUt5RSxFQUFFNFYsT0FBTyxHQUFHLE9BQU81VixFQUFFMkIsTUFBTTNCLEVBQUU0VixPQUFPLEtBQUssT0FBTyxLQUFLLEtBQUssRUFBRSxHQUFHN1YsR0FBRyxNQUFNQyxFQUFFaVUsVUFBVXlvQixHQUFHMzhCLEVBQUVDLEVBQUVELEVBQUV5MkIsY0FBY2o3QixPQUFPLENBQUMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT3lFLEVBQUVpVSxVQUFVLE1BQU0vUyxNQUFNa0MsRUFBRSxNQUMvZTlILEVBQUUwNkIsR0FBR0QsR0FBR3YwQixTQUFTdzBCLEdBQUdILEdBQUdyMEIsU0FBUzIxQixHQUFHbjNCLElBQUl6RSxFQUFFeUUsRUFBRWlVLFVBQVUzWSxFQUFFMEUsRUFBRXcyQixjQUFjajdCLEVBQUVreUIsSUFBSXp0QixFQUFFekUsRUFBRTBULFlBQVkzVCxJQUFJMEUsRUFBRTRWLE9BQU8sTUFBS3JhLEdBQUcsSUFBSUQsRUFBRTBULFNBQVMxVCxFQUFFQSxFQUFFNlIsZUFBZW14QixlQUFlL2lDLElBQUtreUIsSUFBSXp0QixFQUFFQSxFQUFFaVUsVUFBVTFZLEdBQUcsT0FBTyxLQUFLLEtBQUssR0FBMEIsT0FBdkJrRyxHQUFFOEIsSUFBR2hJLEVBQUV5RSxFQUFFOFYsY0FBaUIsSUFBYSxHQUFSOVYsRUFBRTRWLFFBQWlCNVYsRUFBRTR4QixNQUFNdDJCLEVBQUUwRSxJQUFFekUsRUFBRSxPQUFPQSxFQUFFRCxHQUFFLEVBQUcsT0FBT3lFLE9BQUUsSUFBU0MsRUFBRXcyQixjQUFjc0csVUFBVTNGLEdBQUduM0IsR0FBRzFFLEVBQUUsT0FBT3lFLEVBQUUrVixjQUFpQnZhLElBQUlELEdBQUcsSUFBWSxFQUFQMEUsRUFBRTVELFFBQVcsT0FBTzJELElBQUcsSUFBS0MsRUFBRXcyQixjQUFjdUcsNEJBQTRCLElBQWUsRUFBVng1QixHQUFFL0IsU0FBVyxJQUFJKzhCLEtBQUlBLEdBQUUsSUFBVyxJQUFJQSxJQUFHLElBQUlBLEtBQUVBLEdBQ3JmLEdBQUUsT0FBT2pGLElBQUcsSUFBUSxVQUFIbkcsS0FBZSxJQUFRLFVBQUhxTCxLQUFlQyxHQUFHbkYsR0FBRW9GLE9BQU1uakMsR0FBR0QsS0FBRTBFLEVBQUU0VixPQUFPLEdBQVMsTUFBSyxLQUFLLEVBQUUsT0FBT3dnQixLQUFXLE9BQU9yMkIsR0FBRzJyQixHQUFHMXJCLEVBQUVpVSxVQUFVbUUsZUFBZSxLQUFLLEtBQUssR0FBRyxPQUFPa1osR0FBR3R4QixHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9xdUIsR0FBR3J1QixFQUFFd0MsT0FBTytyQixLQUFLLEtBQUssS0FBSyxHQUEwQixHQUF2QjlzQixHQUFFOEIsSUFBd0IsUUFBckJoSSxFQUFFeUUsRUFBRThWLGVBQTBCLE9BQU8sS0FBc0MsR0FBakMxVCxFQUFFLElBQWEsR0FBUnBDLEVBQUU0VixPQUEyQixRQUFqQjFULEVBQUUzRyxFQUFFaWlDLFdBQXNCLEdBQUdwN0IsRUFBRTA3QixHQUFHdmlDLEdBQUUsT0FBUSxDQUFDLEdBQUcsSUFBSWdqQyxJQUFHLE9BQU94K0IsR0FBRyxJQUFhLEdBQVJBLEVBQUU2VixPQUFVLElBQUk3VixFQUFFQyxFQUFFa1csTUFBTSxPQUFPblcsR0FBRyxDQUFTLEdBQUcsUUFBWG1DLEVBQUVxMEIsR0FBR3gyQixJQUFlLENBQ2pXLElBRGtXQyxFQUFFNFYsT0FBTyxHQUFHa29CLEdBQUd2aUMsR0FBRSxHQUFvQixRQUFoQjZHLEVBQUVGLEVBQUVpd0IsZUFBdUJueUIsRUFBRW15QixZQUFZL3ZCLEVBQUVwQyxFQUFFNFYsT0FBTyxHQUNuZixPQUFPcmEsRUFBRXc1QixhQUFhLzBCLEVBQUVpMUIsWUFBWSxNQUFNajFCLEVBQUUrMEIsV0FBV3g1QixFQUFFdzVCLFdBQVd4NUIsRUFBRUQsRUFBTUEsRUFBRTBFLEVBQUVrVyxNQUFNLE9BQU81YSxHQUFPeUUsRUFBRXhFLEdBQU42RyxFQUFFOUcsR0FBUXNhLE9BQU8sRUFBRXhULEVBQUU0eUIsV0FBVyxLQUFLNXlCLEVBQUU2eUIsWUFBWSxLQUFLN3lCLEVBQUUyeUIsV0FBVyxLQUFtQixRQUFkN3lCLEVBQUVFLEVBQUVzVCxZQUFvQnRULEVBQUVvdkIsV0FBVyxFQUFFcHZCLEVBQUV3dkIsTUFBTTd4QixFQUFFcUMsRUFBRThULE1BQU0sS0FBSzlULEVBQUVvMEIsY0FBYyxLQUFLcDBCLEVBQUUwVCxjQUFjLEtBQUsxVCxFQUFFK3ZCLFlBQVksS0FBSy92QixFQUFFc3ZCLGFBQWEsS0FBS3R2QixFQUFFNlIsVUFBVSxPQUFPN1IsRUFBRW92QixXQUFXdHZCLEVBQUVzdkIsV0FBV3B2QixFQUFFd3ZCLE1BQU0xdkIsRUFBRTB2QixNQUFNeHZCLEVBQUU4VCxNQUFNaFUsRUFBRWdVLE1BQU05VCxFQUFFbzBCLGNBQWN0MEIsRUFBRXMwQixjQUFjcDBCLEVBQUUwVCxjQUFjNVQsRUFBRTRULGNBQWMxVCxFQUFFK3ZCLFlBQVlqd0IsRUFBRWl3QixZQUFZL3ZCLEVBQUVJLEtBQUtOLEVBQUVNLEtBQUt6QyxFQUFFbUMsRUFBRXd2QixhQUNwZnR2QixFQUFFc3ZCLGFBQWEsT0FBTzN4QixFQUFFLEtBQUssQ0FBQzZ4QixNQUFNN3hCLEVBQUU2eEIsTUFBTUQsYUFBYTV4QixFQUFFNHhCLGVBQWVyMkIsRUFBRUEsRUFBRTZhLFFBQTJCLE9BQW5CelUsR0FBRTZCLEdBQVksRUFBVkEsR0FBRS9CLFFBQVUsR0FBVXhCLEVBQUVrVyxNQUFNblcsRUFBRUEsRUFBRW9XLFFBQVEsT0FBTzVhLEVBQUVvaUMsTUFBTTM2QixLQUFJMjdCLEtBQUszK0IsRUFBRTRWLE9BQU8sR0FBR3hULEdBQUUsRUFBRzA3QixHQUFHdmlDLEdBQUUsR0FBSXlFLEVBQUU0eEIsTUFBTSxjQUFjLENBQUMsSUFBSXh2QixFQUFFLEdBQVcsUUFBUnJDLEVBQUV3MkIsR0FBR3IwQixLQUFhLEdBQUdsQyxFQUFFNFYsT0FBTyxHQUFHeFQsR0FBRSxFQUFtQixRQUFoQjlHLEVBQUV5RSxFQUFFb3lCLGVBQXVCbnlCLEVBQUVteUIsWUFBWTcyQixFQUFFMEUsRUFBRTRWLE9BQU8sR0FBR2tvQixHQUFHdmlDLEdBQUUsR0FBSSxPQUFPQSxFQUFFb2lDLE1BQU0sV0FBV3BpQyxFQUFFcWlDLFdBQVcxN0IsRUFBRXdULFlBQVlraEIsR0FBRyxPQUFtQyxRQUE1QjUyQixFQUFFQSxFQUFFKzBCLFdBQVd4NUIsRUFBRXc1QixjQUFzQi8wQixFQUFFZzFCLFdBQVcsTUFBTSxVQUFVLEVBQUVoeUIsS0FBSXpILEVBQUVraUMsbUJBQW1Ca0IsSUFBSSxhQUFhcmpDLElBQUkwRSxFQUFFNFYsT0FDamYsR0FBR3hULEdBQUUsRUFBRzA3QixHQUFHdmlDLEdBQUUsR0FBSXlFLEVBQUU0eEIsTUFBTSxVQUFVcjJCLEVBQUVnaUMsYUFBYXI3QixFQUFFaVUsUUFBUW5XLEVBQUVrVyxNQUFNbFcsRUFBRWtXLE1BQU1oVSxJQUFhLFFBQVQ1RyxFQUFFQyxFQUFFbWlDLE1BQWNwaUMsRUFBRTZhLFFBQVFqVSxFQUFFbEMsRUFBRWtXLE1BQU1oVSxFQUFFM0csRUFBRW1pQyxLQUFLeDdCLEdBQUcsT0FBTyxPQUFPM0csRUFBRW9pQyxNQUFNcmlDLEVBQUVDLEVBQUVvaUMsS0FBS3BpQyxFQUFFaWlDLFVBQVVsaUMsRUFBRUMsRUFBRW9pQyxLQUFLcmlDLEVBQUU2YSxRQUFRNWEsRUFBRXc1QixXQUFXLzBCLEVBQUUrMEIsV0FBV3g1QixFQUFFa2lDLG1CQUFtQno2QixLQUFJMUgsRUFBRTZhLFFBQVEsS0FBS25XLEVBQUV1RCxHQUFFL0IsUUFBUUUsR0FBRTZCLEdBQUVuQixFQUFJLEVBQUZwQyxFQUFJLEVBQUksRUFBRkEsR0FBSzFFLEdBQUcsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9zakMsS0FBSyxPQUFPNytCLEdBQUcsT0FBT0EsRUFBRStWLGdCQUFpQixPQUFPOVYsRUFBRThWLGdCQUFnQixrQ0FBa0N2YSxFQUFFYSxPQUFPNEQsRUFBRTRWLE9BQU8sR0FBRyxLQUFLLE1BQU0xVSxNQUFNa0MsRUFBRSxJQUFJcEQsRUFBRW9MLE1BQ2hkLFNBQVN5ekIsR0FBRzkrQixHQUFHLE9BQU9BLEVBQUVxTCxLQUFLLEtBQUssRUFBRWlqQixHQUFHdHVCLEVBQUV5QyxPQUFPK3JCLEtBQUssSUFBSXZ1QixFQUFFRCxFQUFFNlYsTUFBTSxPQUFTLEtBQUY1VixHQUFRRCxFQUFFNlYsT0FBUyxLQUFINVYsRUFBUSxHQUFHRCxHQUFHLEtBQUssS0FBSyxFQUFnQyxHQUE5QnEyQixLQUFLMzBCLEdBQUVtQixJQUFHbkIsR0FBRWtCLElBQUcyMEIsS0FBa0IsSUFBTyxJQUFwQnQzQixFQUFFRCxFQUFFNlYsUUFBb0IsTUFBTTFVLE1BQU1rQyxFQUFFLE1BQXlCLE9BQW5CckQsRUFBRTZWLE9BQVMsS0FBSDVWLEVBQVEsR0FBVUQsRUFBRSxLQUFLLEVBQUUsT0FBT3UyQixHQUFHdjJCLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzBCLEdBQUU4QixJQUFlLE1BQVp2RCxFQUFFRCxFQUFFNlYsUUFBYzdWLEVBQUU2VixPQUFTLEtBQUg1VixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzBCLEdBQUU4QixJQUFHLEtBQUssS0FBSyxFQUFFLE9BQU82eUIsS0FBSyxLQUFLLEtBQUssR0FBRyxPQUFPOUUsR0FBR3Z4QixHQUFHLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPNitCLEtBQUssS0FBSyxRQUFRLE9BQU8sTUFDcmEsU0FBU0UsR0FBRy8rQixFQUFFQyxHQUFHLElBQUksSUFBSTFFLEVBQUUsR0FBR0MsRUFBRXlFLEVBQUUsR0FBRzFFLEdBQUc2UCxFQUFHNVAsR0FBR0EsRUFBRUEsRUFBRW9hLGFBQWFwYSxHQUFHLElBQUl3RyxFQUFFekcsRUFBRSxNQUFNOEcsR0FBR0wsRUFBRSw2QkFBNkJLLEVBQUUyOEIsUUFBUSxLQUFLMzhCLEVBQUVxSSxNQUFNLE1BQU0sQ0FBQ3ZPLE1BQU02RCxFQUFFdkIsT0FBT3dCLEVBQUV5SyxNQUFNMUksR0FBRyxTQUFTaTlCLEdBQUdqL0IsRUFBRUMsR0FBRyxJQUFJOEcsUUFBUUMsTUFBTS9HLEVBQUU5RCxPQUFPLE1BQU1aLEdBQUcweEIsWUFBVyxXQUFXLE1BQU0xeEIsTUFsQjNQa2hDLEdBQUcsU0FBU3o4QixFQUFFQyxHQUFHLElBQUksSUFBSTFFLEVBQUUwRSxFQUFFa1csTUFBTSxPQUFPNWEsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRThQLEtBQUssSUFBSTlQLEVBQUU4UCxJQUFJckwsRUFBRThPLFlBQVl2VCxFQUFFMlksZ0JBQWdCLEdBQUcsSUFBSTNZLEVBQUU4UCxLQUFLLE9BQU85UCxFQUFFNGEsTUFBTSxDQUFDNWEsRUFBRTRhLE1BQU1QLE9BQU9yYSxFQUFFQSxFQUFFQSxFQUFFNGEsTUFBTSxTQUFTLEdBQUc1YSxJQUFJMEUsRUFBRSxNQUFNLEtBQUssT0FBTzFFLEVBQUU2YSxTQUFTLENBQUMsR0FBRyxPQUFPN2EsRUFBRXFhLFFBQVFyYSxFQUFFcWEsU0FBUzNWLEVBQUUsT0FBTzFFLEVBQUVBLEVBQUVxYSxPQUFPcmEsRUFBRTZhLFFBQVFSLE9BQU9yYSxFQUFFcWEsT0FBT3JhLEVBQUVBLEVBQUU2YSxVQUNoU3NtQixHQUFHLFNBQVMxOEIsRUFBRUMsRUFBRTFFLEVBQUVDLEdBQUcsSUFBSXdHLEVBQUVoQyxFQUFFeTJCLGNBQWMsR0FBR3owQixJQUFJeEcsRUFBRSxDQUFDd0UsRUFBRUMsRUFBRWlVLFVBQVUraEIsR0FBR0gsR0FBR3IwQixTQUFTLElBQXlVVSxFQUFyVUUsRUFBRSxLQUFLLE9BQU85RyxHQUFHLElBQUssUUFBUXlHLEVBQUV3SyxHQUFHeE0sRUFBRWdDLEdBQUd4RyxFQUFFZ1IsR0FBR3hNLEVBQUV4RSxHQUFHNkcsRUFBRSxHQUFHLE1BQU0sSUFBSyxTQUFTTCxFQUFFcUwsR0FBR3JOLEVBQUVnQyxHQUFHeEcsRUFBRTZSLEdBQUdyTixFQUFFeEUsR0FBRzZHLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU0wsRUFBRTFHLEVBQUUsR0FBRzBHLEVBQUUsQ0FBQzdGLFdBQU0sSUFBU1gsRUFBRUYsRUFBRSxHQUFHRSxFQUFFLENBQUNXLFdBQU0sSUFBU2tHLEVBQUUsR0FBRyxNQUFNLElBQUssV0FBV0wsRUFBRTRMLEdBQUc1TixFQUFFZ0MsR0FBR3hHLEVBQUVvUyxHQUFHNU4sRUFBRXhFLEdBQUc2RyxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQkwsRUFBRW04QixTQUFTLG1CQUFvQjNpQyxFQUFFMmlDLFVBQVVuK0IsRUFBRW8rQixRQUFRM1IsSUFBeUIsSUFBSXR4QixLQUF6Qm1ZLEdBQUcvWCxFQUFFQyxHQUFTRCxFQUFFLEtBQWN5RyxFQUFFLElBQUl4RyxFQUFFdUIsZUFBZTVCLElBQUk2RyxFQUFFakYsZUFBZTVCLElBQUksTUFBTTZHLEVBQUU3RyxHQUFHLEdBQUcsVUFDM2VBLEVBQUUsQ0FBQyxJQUFJK0csRUFBRUYsRUFBRTdHLEdBQUcsSUFBSWdILEtBQUtELEVBQUVBLEVBQUVuRixlQUFlb0YsS0FBSzVHLElBQUlBLEVBQUUsSUFBSUEsRUFBRTRHLEdBQUcsUUFBUSw0QkFBNEJoSCxHQUFHLGFBQWFBLEdBQUcsbUNBQW1DQSxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJaU0sRUFBR3JLLGVBQWU1QixHQUFHa0gsSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUllLEtBQUtqSSxFQUFFLE9BQU8sSUFBSUEsS0FBS0ssRUFBRSxDQUFDLElBQUl5RyxFQUFFekcsRUFBRUwsR0FBeUIsR0FBdEIrRyxFQUFFLE1BQU1GLEVBQUVBLEVBQUU3RyxRQUFHLEVBQVVLLEVBQUV1QixlQUFlNUIsSUFBSThHLElBQUlDLElBQUksTUFBTUQsR0FBRyxNQUFNQyxHQUFHLEdBQUcsVUFBVS9HLEVBQUUsR0FBRytHLEVBQUUsQ0FBQyxJQUFJQyxLQUFLRCxHQUFHQSxFQUFFbkYsZUFBZW9GLElBQUlGLEdBQUdBLEVBQUVsRixlQUFlb0YsS0FBSzVHLElBQUlBLEVBQUUsSUFBSUEsRUFBRTRHLEdBQUcsSUFBSSxJQUFJQSxLQUFLRixFQUFFQSxFQUFFbEYsZUFBZW9GLElBQUlELEVBQUVDLEtBQUtGLEVBQUVFLEtBQUs1RyxJQUNsZkEsRUFBRSxJQUFJQSxFQUFFNEcsR0FBR0YsRUFBRUUsU0FBUzVHLElBQUk4RyxJQUFJQSxFQUFFLElBQUlBLEVBQUVlLEtBQUtqSSxFQUFFSSxJQUFJQSxFQUFFMEcsTUFBTSw0QkFBNEI5RyxHQUFHOEcsRUFBRUEsRUFBRUEsRUFBRThxQixZQUFPLEVBQU83cUIsRUFBRUEsRUFBRUEsRUFBRTZxQixZQUFPLEVBQU8sTUFBTTlxQixHQUFHQyxJQUFJRCxJQUFJSSxFQUFFQSxHQUFHLElBQUllLEtBQUtqSSxFQUFFOEcsSUFBSSxhQUFhOUcsRUFBRSxpQkFBa0I4RyxHQUFHLGlCQUFrQkEsSUFBSUksRUFBRUEsR0FBRyxJQUFJZSxLQUFLakksRUFBRSxHQUFHOEcsR0FBRyxtQ0FBbUM5RyxHQUFHLDZCQUE2QkEsSUFBSWlNLEVBQUdySyxlQUFlNUIsSUFBSSxNQUFNOEcsR0FBRyxhQUFhOUcsR0FBR3FHLEdBQUUsU0FBU3hCLEdBQUdxQyxHQUFHSCxJQUFJRCxJQUFJSSxFQUFFLEtBQUsscUJBQWtCSixFQUFsQixjQUFrQkEsS0FBRyxPQUFPQSxHQUFHQSxFQUFFTyxXQUFXMEgsRUFBR2pJLEVBQUVlLFlBQVlYLEVBQUVBLEdBQUcsSUFBSWUsS0FBS2pJLEVBQUU4RyxJQUFJMUcsSUFBSThHLEVBQUVBLEdBQUcsSUFBSWUsS0FBSyxRQUMvZTdILEdBQUcsSUFBSUosRUFBRWtILEdBQUtwQyxFQUFFbXlCLFlBQVlqM0IsS0FBRThFLEVBQUU0VixPQUFPLEtBQUk4bUIsR0FBRyxTQUFTMzhCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHRCxJQUFJQyxJQUFJeUUsRUFBRTRWLE9BQU8sSUFjZ0wsSUFBSXFwQixHQUFHLG1CQUFvQkMsUUFBUUEsUUFBUWxvQixJQUFJLFNBQVNtb0IsR0FBR3AvQixFQUFFQyxFQUFFMUUsSUFBR0EsRUFBRXEzQixJQUFJLEVBQUVyM0IsSUFBSzhQLElBQUksRUFBRTlQLEVBQUV3M0IsUUFBUSxDQUFDc00sUUFBUSxNQUFNLElBQUk3akMsRUFBRXlFLEVBQUU5RCxNQUFzRCxPQUFoRFosRUFBRXkzQixTQUFTLFdBQVdzTSxLQUFLQSxJQUFHLEVBQUdDLEdBQUcvakMsR0FBR3lqQyxHQUFHai9CLEVBQUVDLElBQVcxRSxFQUNwYixTQUFTaWtDLEdBQUd4L0IsRUFBRUMsRUFBRTFFLElBQUdBLEVBQUVxM0IsSUFBSSxFQUFFcjNCLElBQUs4UCxJQUFJLEVBQUUsSUFBSTdQLEVBQUV3RSxFQUFFeUMsS0FBSzY1Qix5QkFBeUIsR0FBRyxtQkFBb0I5Z0MsRUFBRSxDQUFDLElBQUl3RyxFQUFFL0IsRUFBRTlELE1BQU1aLEVBQUV3M0IsUUFBUSxXQUFtQixPQUFSa00sR0FBR2ovQixFQUFFQyxHQUFVekUsRUFBRXdHLElBQUksSUFBSUssRUFBRXJDLEVBQUVrVSxVQUE4TyxPQUFwTyxPQUFPN1IsR0FBRyxtQkFBb0JBLEVBQUVvOUIsb0JBQW9CbGtDLEVBQUV5M0IsU0FBUyxXQUFXLG1CQUFvQngzQixJQUFJLE9BQU9ra0MsR0FBR0EsR0FBRyxJQUFJdjRCLElBQUksQ0FBQ3pHLE9BQU9nL0IsR0FBR240QixJQUFJN0csTUFBTXUrQixHQUFHai9CLEVBQUVDLElBQUksSUFBSTFFLEVBQUUwRSxFQUFFeUssTUFBTWhLLEtBQUsrK0Isa0JBQWtCeC9CLEVBQUU5RCxNQUFNLENBQUN3akMsZUFBZSxPQUFPcGtDLEVBQUVBLEVBQUUsT0FBY0EsRUFBRSxJQUFJcWtDLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRMTRCLElBQ3hjLFNBQVMyNEIsR0FBRzkvQixHQUFHLElBQUlDLEVBQUVELEVBQUU0QixJQUFJLEdBQUcsT0FBTzNCLEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxNQUFNLE1BQU0xRSxHQUFHd2tDLEdBQUcvL0IsRUFBRXpFLFFBQVEwRSxFQUFFd0IsUUFBUSxLQUFLLFNBQVN1K0IsR0FBR2hnQyxFQUFFQyxHQUFHLE9BQU9BLEVBQUVvTCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEtBQUssRUFBRSxHQUFXLElBQVJwTCxFQUFFNFYsT0FBVyxPQUFPN1YsRUFBRSxDQUFDLElBQUl6RSxFQUFFeUUsRUFBRXkyQixjQUFjajdCLEVBQUV3RSxFQUFFK1YsY0FBNEI5VixHQUFkRCxFQUFFQyxFQUFFaVUsV0FBY3FnQix3QkFBd0J0MEIsRUFBRXExQixjQUFjcjFCLEVBQUV3QyxLQUFLbEgsRUFBRTAxQixHQUFHaHhCLEVBQUV3QyxLQUFLbEgsR0FBR0MsR0FBR3dFLEVBQUVpZ0Msb0NBQW9DaGdDLEVBQUUsT0FBTyxLQUFLLEVBQTZDLFlBQW5DLElBQVJBLEVBQUU0VixPQUFXdVgsR0FBR250QixFQUFFaVUsVUFBVW1FLGdCQUFzQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxNQUFNbFgsTUFBTWtDLEVBQUUsTUFDNWUsU0FBUzY4QixHQUFHbGdDLEVBQUVDLEVBQUUxRSxHQUFHLE9BQU9BLEVBQUU4UCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBZ0QsR0FBRyxRQUFoQ3BMLEVBQUUsUUFBbEJBLEVBQUUxRSxFQUFFNjJCLGFBQXVCbnlCLEVBQUUrMEIsV0FBVyxNQUFpQixDQUFDaDFCLEVBQUVDLEVBQUVBLEVBQUVxRCxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQVcsRUFBTnRELEVBQUVxTCxLQUFPLENBQUMsSUFBSTdQLEVBQUV3RSxFQUFFeEQsT0FBT3dELEVBQUUrNUIsUUFBUXYrQixJQUFJd0UsRUFBRUEsRUFBRXNELFdBQVd0RCxJQUFJQyxHQUFnRCxHQUFHLFFBQWhDQSxFQUFFLFFBQWxCQSxFQUFFMUUsRUFBRTYyQixhQUF1Qm55QixFQUFFKzBCLFdBQVcsTUFBaUIsQ0FBQ2gxQixFQUFFQyxFQUFFQSxFQUFFcUQsS0FBSyxFQUFFLENBQUMsSUFBSXRCLEVBQUVoQyxFQUFFeEUsRUFBRXdHLEVBQUVzQixLQUFhLElBQU8sR0FBZnRCLEVBQUVBLEVBQUVxSixPQUFlLElBQU8sRUFBRnJKLEtBQU9tK0IsR0FBRzVrQyxFQUFFeUUsR0FBR29nQyxHQUFHN2tDLEVBQUV5RSxJQUFJQSxFQUFFeEUsUUFBUXdFLElBQUlDLEdBQUcsT0FBTyxLQUFLLEVBQ3RSLE9BRHdSRCxFQUFFekUsRUFBRTJZLFVBQWtCLEVBQVIzWSxFQUFFc2EsUUFBVSxPQUFPNVYsRUFBRUQsRUFBRTAwQixxQkFBcUJsNUIsRUFBRUQsRUFBRSs1QixjQUFjLzVCLEVBQUVrSCxLQUFLeEMsRUFBRXcyQixjQUFjeEYsR0FBRzExQixFQUFFa0gsS0FBS3hDLEVBQUV3MkIsZUFBZXoyQixFQUFFbzhCLG1CQUFtQjVnQyxFQUN4Z0J5RSxFQUFFOFYsY0FBYy9WLEVBQUVpZ0MsNENBQXVELFFBQWhCaGdDLEVBQUUxRSxFQUFFNjJCLGNBQXNCaUIsR0FBRzkzQixFQUFFMEUsRUFBRUQsSUFBVSxLQUFLLEVBQWtCLEdBQUcsUUFBbkJDLEVBQUUxRSxFQUFFNjJCLGFBQXdCLENBQVEsR0FBUHB5QixFQUFFLEtBQVEsT0FBT3pFLEVBQUU0YSxNQUFNLE9BQU81YSxFQUFFNGEsTUFBTTlLLEtBQUssS0FBSyxFQUFFckwsRUFBRXpFLEVBQUU0YSxNQUFNakMsVUFBVSxNQUFNLEtBQUssRUFBRWxVLEVBQUV6RSxFQUFFNGEsTUFBTWpDLFVBQVVtZixHQUFHOTNCLEVBQUUwRSxFQUFFRCxHQUFHLE9BQU8sS0FBSyxFQUEyRSxPQUF6RUEsRUFBRXpFLEVBQUUyWSxlQUFVLE9BQU9qVSxHQUFXLEVBQVIxRSxFQUFFc2EsT0FBUytXLEdBQUdyeEIsRUFBRWtILEtBQUtsSCxFQUFFazdCLGdCQUFnQnoyQixFQUFFcWdDLFNBQWUsS0FBSyxFQUFTLEtBQUssRUFBUyxLQUFLLEdBQUcsT0FBTyxLQUFLLEdBQ3pZLFlBRDRZLE9BQU85a0MsRUFBRXdhLGdCQUFnQnhhLEVBQUVBLEVBQUVvYSxVQUFVLE9BQU9wYSxJQUFJQSxFQUFFQSxFQUFFd2EsY0FBYyxPQUFPeGEsSUFBSUEsRUFBRUEsRUFBRXlhLFdBQVcsT0FBT3phLEdBQUd1ZCxHQUFHdmQsT0FDaGYsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxNQUFNNEYsTUFBTWtDLEVBQUUsTUFDNUUsU0FBU2k5QixHQUFHdGdDLEVBQUVDLEdBQUcsSUFBSSxJQUFJMUUsRUFBRXlFLElBQUksQ0FBQyxHQUFHLElBQUl6RSxFQUFFOFAsSUFBSSxDQUFDLElBQUk3UCxFQUFFRCxFQUFFMlksVUFBVSxHQUFHalUsRUFBWSxtQkFBVnpFLEVBQUVBLEVBQUV5VyxPQUE0QkUsWUFBWTNXLEVBQUUyVyxZQUFZLFVBQVUsT0FBTyxhQUFhM1csRUFBRStrQyxRQUFRLFdBQVcsQ0FBQy9rQyxFQUFFRCxFQUFFMlksVUFBVSxJQUFJbFMsRUFBRXpHLEVBQUVrN0IsY0FBY3hrQixNQUFNalEsRUFBRSxNQUFTQSxHQUFhQSxFQUFFakYsZUFBZSxXQUFXaUYsRUFBRXUrQixRQUFRLEtBQUsva0MsRUFBRXlXLE1BQU1zdUIsUUFBUXh1QixHQUFHLFVBQVUvUCxTQUFTLEdBQUcsSUFBSXpHLEVBQUU4UCxJQUFJOVAsRUFBRTJZLFVBQVVoRixVQUFValAsRUFBRSxHQUFHMUUsRUFBRWs3QixtQkFBbUIsSUFBSSxLQUFLbDdCLEVBQUU4UCxLQUFLLEtBQUs5UCxFQUFFOFAsS0FBSyxPQUFPOVAsRUFBRXdhLGVBQWV4YSxJQUFJeUUsSUFBSSxPQUFPekUsRUFBRTRhLE1BQU0sQ0FBQzVhLEVBQUU0YSxNQUFNUCxPQUFPcmEsRUFBRUEsRUFBRUEsRUFBRTRhLE1BQU0sU0FBUyxHQUFHNWEsSUFDdGZ5RSxFQUFFLE1BQU0sS0FBSyxPQUFPekUsRUFBRTZhLFNBQVMsQ0FBQyxHQUFHLE9BQU83YSxFQUFFcWEsUUFBUXJhLEVBQUVxYSxTQUFTNVYsRUFBRSxPQUFPekUsRUFBRUEsRUFBRXFhLE9BQU9yYSxFQUFFNmEsUUFBUVIsT0FBT3JhLEVBQUVxYSxPQUFPcmEsRUFBRUEsRUFBRTZhLFNBQ2pILFNBQVNvcUIsR0FBR3hnQyxFQUFFQyxHQUFHLEdBQUcrdUIsSUFBSSxtQkFBb0JBLEdBQUd5UixxQkFBcUIsSUFBSXpSLEdBQUd5UixxQkFBcUIxUixHQUFHOXVCLEdBQUcsTUFBTW9DLElBQUksT0FBT3BDLEVBQUVvTCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQW1CLEdBQUcsUUFBbkJyTCxFQUFFQyxFQUFFbXlCLGNBQXlDLFFBQWZweUIsRUFBRUEsRUFBRWcxQixZQUFxQixDQUFDLElBQUl6NUIsRUFBRXlFLEVBQUVBLEVBQUVzRCxLQUFLLEVBQUUsQ0FBQyxJQUFJOUgsRUFBRUQsRUFBRXlHLEVBQUV4RyxFQUFFdStCLFFBQWdCLEdBQVJ2K0IsRUFBRUEsRUFBRTZQLFNBQU8sSUFBU3JKLEVBQUUsR0FBRyxJQUFPLEVBQUZ4RyxHQUFLMmtDLEdBQUdsZ0MsRUFBRTFFLE9BQU8sQ0FBQ0MsRUFBRXlFLEVBQUUsSUFBSStCLElBQUksTUFBTUssR0FBRzA5QixHQUFHdmtDLEVBQUU2RyxJQUFJOUcsRUFBRUEsRUFBRStILFdBQVcvSCxJQUFJeUUsR0FBRyxNQUFNLEtBQUssRUFBc0IsR0FBcEI4L0IsR0FBRzcvQixHQUFvQixtQkFBakJELEVBQUVDLEVBQUVpVSxXQUFtQ3dzQixxQkFBcUIsSUFBSTFnQyxFQUFFVyxNQUFNVixFQUFFdzJCLGNBQWN6MkIsRUFBRWkwQixNQUFNaDBCLEVBQUU4VixjQUFjL1YsRUFBRTBnQyx1QkFBdUIsTUFBTXIrQixHQUFHMDlCLEdBQUc5L0IsRUFDL2dCb0MsR0FBRyxNQUFNLEtBQUssRUFBRXk5QixHQUFHNy9CLEdBQUcsTUFBTSxLQUFLLEVBQUUwZ0MsR0FBRzNnQyxFQUFFQyxJQUFJLFNBQVMyZ0MsR0FBRzVnQyxHQUFHQSxFQUFFMlYsVUFBVSxLQUFLM1YsRUFBRW1XLE1BQU0sS0FBS25XLEVBQUUyeEIsYUFBYSxLQUFLM3hCLEVBQUVrMUIsWUFBWSxLQUFLbDFCLEVBQUVnMUIsV0FBVyxLQUFLaDFCLEVBQUV5MkIsY0FBYyxLQUFLejJCLEVBQUUrVixjQUFjLEtBQUsvVixFQUFFaTNCLGFBQWEsS0FBS2ozQixFQUFFNFYsT0FBTyxLQUFLNVYsRUFBRW95QixZQUFZLEtBQUssU0FBU3lPLEdBQUc3Z0MsR0FBRyxPQUFPLElBQUlBLEVBQUVxTCxLQUFLLElBQUlyTCxFQUFFcUwsS0FBSyxJQUFJckwsRUFBRXFMLElBQ25TLFNBQVN5MUIsR0FBRzlnQyxHQUFHQSxFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFRCxFQUFFNFYsT0FBTyxPQUFPM1YsR0FBRyxDQUFDLEdBQUc0Z0MsR0FBRzVnQyxHQUFHLE1BQU1ELEVBQUVDLEVBQUVBLEVBQUUyVixPQUFPLE1BQU16VSxNQUFNa0MsRUFBRSxNQUFPLElBQUk5SCxFQUFFMEUsRUFBZ0IsT0FBZEEsRUFBRTFFLEVBQUUyWSxVQUFpQjNZLEVBQUU4UCxLQUFLLEtBQUssRUFBRSxJQUFJN1AsR0FBRSxFQUFHLE1BQU0sS0FBSyxFQUErQixLQUFLLEVBQUV5RSxFQUFFQSxFQUFFb1ksY0FBYzdjLEdBQUUsRUFBRyxNQUFNLFFBQVEsTUFBTTJGLE1BQU1rQyxFQUFFLE1BQWUsR0FBUjlILEVBQUVzYSxRQUFXOUcsR0FBRzlPLEVBQUUsSUFBSTFFLEVBQUVzYSxRQUFRLElBQUk3VixFQUFFQyxFQUFFLElBQUkxRSxFQUFFeUUsSUFBSSxDQUFDLEtBQUssT0FBT3pFLEVBQUU2YSxTQUFTLENBQUMsR0FBRyxPQUFPN2EsRUFBRXFhLFFBQVFpckIsR0FBR3RsQyxFQUFFcWEsUUFBUSxDQUFDcmEsRUFBRSxLQUFLLE1BQU15RSxFQUFFekUsRUFBRUEsRUFBRXFhLE9BQWlDLElBQTFCcmEsRUFBRTZhLFFBQVFSLE9BQU9yYSxFQUFFcWEsT0FBV3JhLEVBQUVBLEVBQUU2YSxRQUFRLElBQUk3YSxFQUFFOFAsS0FBSyxJQUFJOVAsRUFBRThQLEtBQUssS0FBSzlQLEVBQUU4UCxLQUFLLENBQUMsR0FBVyxFQUFSOVAsRUFBRXNhLE1BQVEsU0FBUzVWLEVBQUUsR0FBRyxPQUMvZTFFLEVBQUU0YSxPQUFPLElBQUk1YSxFQUFFOFAsSUFBSSxTQUFTcEwsRUFBTzFFLEVBQUU0YSxNQUFNUCxPQUFPcmEsRUFBRUEsRUFBRUEsRUFBRTRhLE1BQU0sS0FBYSxFQUFSNWEsRUFBRXNhLE9BQVMsQ0FBQ3RhLEVBQUVBLEVBQUUyWSxVQUFVLE1BQU1sVSxHQUFHeEUsRUFDdEcsU0FBU3VsQyxFQUFHL2dDLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUV3RSxFQUFFcUwsSUFBSXJKLEVBQUUsSUFBSXhHLEdBQUcsSUFBSUEsRUFBRSxHQUFHd0csRUFBRWhDLEVBQUVnQyxFQUFFaEMsRUFBRWtVLFVBQVVsVSxFQUFFa1UsVUFBVWtYLFNBQVNuckIsRUFBRSxJQUFJMUUsRUFBRTBULFNBQVMxVCxFQUFFcVksV0FBV290QixhQUFhaGhDLEVBQUVDLEdBQUcxRSxFQUFFeWxDLGFBQWFoaEMsRUFBRUMsSUFBSSxJQUFJMUUsRUFBRTBULFVBQVVoUCxFQUFFMUUsRUFBRXFZLFlBQWFvdEIsYUFBYWhoQyxFQUFFekUsSUFBSzBFLEVBQUUxRSxHQUFJdVQsWUFBWTlPLEdBQTRCLFFBQXhCekUsRUFBRUEsRUFBRTBsQywyQkFBOEIsSUFBUzFsQyxHQUFHLE9BQU8wRSxFQUFFbStCLFVBQVVuK0IsRUFBRW0rQixRQUFRM1IsVUFBVSxHQUFHLElBQUlqeEIsR0FBYyxRQUFWd0UsRUFBRUEsRUFBRW1XLE9BQWdCLElBQUk0cUIsRUFBRy9nQyxFQUFFQyxFQUFFMUUsR0FBR3lFLEVBQUVBLEVBQUVvVyxRQUFRLE9BQU9wVyxHQUFHK2dDLEVBQUcvZ0MsRUFBRUMsRUFBRTFFLEdBQUd5RSxFQUFFQSxFQUFFb1csUUFEdFMycUIsQ0FBRy9nQyxFQUFFekUsRUFBRTBFLEdBRS9HLFNBQVNpaEMsRUFBR2xoQyxFQUFFQyxFQUFFMUUsR0FBRyxJQUFJQyxFQUFFd0UsRUFBRXFMLElBQUlySixFQUFFLElBQUl4RyxHQUFHLElBQUlBLEVBQUUsR0FBR3dHLEVBQUVoQyxFQUFFZ0MsRUFBRWhDLEVBQUVrVSxVQUFVbFUsRUFBRWtVLFVBQVVrWCxTQUFTbnJCLEVBQUUxRSxFQUFFeWxDLGFBQWFoaEMsRUFBRUMsR0FBRzFFLEVBQUV1VCxZQUFZOU8sUUFBUSxHQUFHLElBQUl4RSxHQUFjLFFBQVZ3RSxFQUFFQSxFQUFFbVcsT0FBZ0IsSUFBSStxQixFQUFHbGhDLEVBQUVDLEVBQUUxRSxHQUFHeUUsRUFBRUEsRUFBRW9XLFFBQVEsT0FBT3BXLEdBQUdraEMsRUFBR2xoQyxFQUFFQyxFQUFFMUUsR0FBR3lFLEVBQUVBLEVBQUVvVyxRQUZuRzhxQixDQUFHbGhDLEVBQUV6RSxFQUFFMEUsR0FHekgsU0FBUzBnQyxHQUFHM2dDLEVBQUVDLEdBQUcsSUFBSSxJQUFhK0IsRUFBRUssRUFBWDlHLEVBQUUwRSxFQUFFekUsR0FBRSxJQUFTLENBQUMsSUFBSUEsRUFBRSxDQUFDQSxFQUFFRCxFQUFFcWEsT0FBTzVWLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBT3hFLEVBQUUsTUFBTTJGLE1BQU1rQyxFQUFFLE1BQW9CLE9BQWRyQixFQUFFeEcsRUFBRTBZLFVBQWlCMVksRUFBRTZQLEtBQUssS0FBSyxFQUFFaEosR0FBRSxFQUFHLE1BQU1yQyxFQUFFLEtBQUssRUFBaUMsS0FBSyxFQUFFZ0MsRUFBRUEsRUFBRXFXLGNBQWNoVyxHQUFFLEVBQUcsTUFBTXJDLEVBQUV4RSxFQUFFQSxFQUFFb2EsT0FBT3BhLEdBQUUsRUFBRyxHQUFHLElBQUlELEVBQUU4UCxLQUFLLElBQUk5UCxFQUFFOFAsSUFBSSxDQUFDckwsRUFBRSxJQUFJLElBQUltQyxFQUFFbkMsRUFBRWtDLEVBQUUzRyxFQUFFMEcsRUFBRUMsSUFBSSxHQUFHcytCLEdBQUdyK0IsRUFBRUYsR0FBRyxPQUFPQSxFQUFFa1UsT0FBTyxJQUFJbFUsRUFBRW9KLElBQUlwSixFQUFFa1UsTUFBTVAsT0FBTzNULEVBQUVBLEVBQUVBLEVBQUVrVSxVQUFVLENBQUMsR0FBR2xVLElBQUlDLEVBQUUsTUFBTWxDLEVBQUUsS0FBSyxPQUFPaUMsRUFBRW1VLFNBQVMsQ0FBQyxHQUFHLE9BQU9uVSxFQUFFMlQsUUFBUTNULEVBQUUyVCxTQUFTMVQsRUFBRSxNQUFNbEMsRUFBRWlDLEVBQUVBLEVBQUUyVCxPQUFPM1QsRUFBRW1VLFFBQVFSLE9BQU8zVCxFQUFFMlQsT0FBTzNULEVBQUVBLEVBQUVtVSxRQUFRL1QsR0FBR0YsRUFBRUgsRUFBRUUsRUFBRTNHLEVBQUUyWSxVQUNyZixJQUFJL1IsRUFBRThNLFNBQVM5TSxFQUFFeVIsV0FBVy9FLFlBQVkzTSxHQUFHQyxFQUFFME0sWUFBWTNNLElBQUlGLEVBQUU2TSxZQUFZdFQsRUFBRTJZLGdCQUFnQixHQUFHLElBQUkzWSxFQUFFOFAsS0FBSyxHQUFHLE9BQU85UCxFQUFFNGEsTUFBTSxDQUFDblUsRUFBRXpHLEVBQUUyWSxVQUFVbUUsY0FBY2hXLEdBQUUsRUFBRzlHLEVBQUU0YSxNQUFNUCxPQUFPcmEsRUFBRUEsRUFBRUEsRUFBRTRhLE1BQU0sZUFBZSxHQUFHcXFCLEdBQUd4Z0MsRUFBRXpFLEdBQUcsT0FBT0EsRUFBRTRhLE1BQU0sQ0FBQzVhLEVBQUU0YSxNQUFNUCxPQUFPcmEsRUFBRUEsRUFBRUEsRUFBRTRhLE1BQU0sU0FBUyxHQUFHNWEsSUFBSTBFLEVBQUUsTUFBTSxLQUFLLE9BQU8xRSxFQUFFNmEsU0FBUyxDQUFDLEdBQUcsT0FBTzdhLEVBQUVxYSxRQUFRcmEsRUFBRXFhLFNBQVMzVixFQUFFLE9BQWtCLEtBQVgxRSxFQUFFQSxFQUFFcWEsUUFBYXZLLE1BQU03UCxHQUFFLEdBQUlELEVBQUU2YSxRQUFRUixPQUFPcmEsRUFBRXFhLE9BQU9yYSxFQUFFQSxFQUFFNmEsU0FDbFosU0FBUytxQixHQUFHbmhDLEVBQUVDLEdBQUcsT0FBT0EsRUFBRW9MLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJOVAsRUFBRTBFLEVBQUVteUIsWUFBeUMsR0FBRyxRQUFoQzcyQixFQUFFLE9BQU9BLEVBQUVBLEVBQUV5NUIsV0FBVyxNQUFpQixDQUFDLElBQUl4NUIsRUFBRUQsRUFBRUEsRUFBRStILEtBQUssR0FBRyxJQUFXLEVBQU45SCxFQUFFNlAsT0FBU3JMLEVBQUV4RSxFQUFFdStCLFFBQVF2K0IsRUFBRXUrQixhQUFRLE9BQU8sSUFBUy81QixHQUFHQSxLQUFLeEUsRUFBRUEsRUFBRThILFdBQVc5SCxJQUFJRCxHQUFHLE9BQU8sS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFnQixHQUFHLE9BQWpCQSxFQUFFMEUsRUFBRWlVLFdBQXFCLENBQUMxWSxFQUFFeUUsRUFBRXcyQixjQUFjLElBQUl6MEIsRUFBRSxPQUFPaEMsRUFBRUEsRUFBRXkyQixjQUFjajdCLEVBQUV3RSxFQUFFQyxFQUFFd0MsS0FBSyxJQUFJSixFQUFFcEMsRUFBRW15QixZQUErQixHQUFuQm55QixFQUFFbXlCLFlBQVksS0FBUSxPQUFPL3ZCLEVBQUUsQ0FBZ0YsSUFBL0U5RyxFQUFFb3lCLElBQUlueUIsRUFBRSxVQUFVd0UsR0FBRyxVQUFVeEUsRUFBRWlILE1BQU0sTUFBTWpILEVBQUVDLE1BQU11UixHQUFHelIsRUFBRUMsR0FBRytYLEdBQUd2VCxFQUFFZ0MsR0FBRy9CLEVBQUVzVCxHQUFHdlQsRUFBRXhFLEdBQU93RyxFQUFFLEVBQUVBLEVBQUVLLEVBQUV2RCxPQUFPa0QsR0FDbGYsRUFBRSxDQUFDLElBQUlHLEVBQUVFLEVBQUVMLEdBQUdFLEVBQUVHLEVBQUVMLEVBQUUsR0FBRyxVQUFVRyxFQUFFNlAsR0FBR3pXLEVBQUUyRyxHQUFHLDRCQUE0QkMsRUFBRW1NLEdBQUcvUyxFQUFFMkcsR0FBRyxhQUFhQyxFQUFFNE0sR0FBR3hULEVBQUUyRyxHQUFHMkcsRUFBR3ROLEVBQUU0RyxFQUFFRCxFQUFFakMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUWlOLEdBQUcxUixFQUFFQyxHQUFHLE1BQU0sSUFBSyxXQUFXdVMsR0FBR3hTLEVBQUVDLEdBQUcsTUFBTSxJQUFLLFNBQVN3RSxFQUFFekUsRUFBRW9SLGNBQWNzeEIsWUFBWTFpQyxFQUFFb1IsY0FBY3N4QixjQUFjemlDLEVBQUUwaUMsU0FBbUIsT0FBVjc3QixFQUFFN0csRUFBRVcsT0FBY29SLEdBQUdoUyxJQUFJQyxFQUFFMGlDLFNBQVM3N0IsR0FBRSxHQUFJckMsTUFBTXhFLEVBQUUwaUMsV0FBVyxNQUFNMWlDLEVBQUVrUixhQUFhYSxHQUFHaFMsSUFBSUMsRUFBRTBpQyxTQUFTMWlDLEVBQUVrUixjQUFhLEdBQUlhLEdBQUdoUyxJQUFJQyxFQUFFMGlDLFNBQVMxaUMsRUFBRTBpQyxTQUFTLEdBQUcsSUFBRyxNQUFPLE9BQU8sS0FBSyxFQUFFLEdBQUcsT0FBT2orQixFQUFFaVUsVUFBVSxNQUFNL1MsTUFBTWtDLEVBQUUsTUFDL2MsWUFEcWRwRCxFQUFFaVUsVUFBVWhGLFVBQ2pmalAsRUFBRXcyQixlQUFxQixLQUFLLEVBQThELGFBQTVEbDdCLEVBQUUwRSxFQUFFaVUsV0FBWWtFLFVBQVU3YyxFQUFFNmMsU0FBUSxFQUFHVSxHQUFHdmQsRUFBRThjLGlCQUF1QixLQUFLLEdBQUcsT0FBTyxLQUFLLEdBQXlELE9BQXRELE9BQU9wWSxFQUFFOFYsZ0JBQWdCcXJCLEdBQUduK0IsS0FBSXE5QixHQUFHcmdDLEVBQUVrVyxPQUFNLFNBQUtrckIsR0FBR3BoQyxHQUFVLEtBQUssR0FBUyxZQUFOb2hDLEdBQUdwaEMsR0FBVSxLQUFLLEdBQUcsT0FBTyxLQUFLLEdBQUcsS0FBSyxHQUFnQyxZQUE3QnFnQyxHQUFHcmdDLEVBQUUsT0FBT0EsRUFBRThWLGVBQXNCLE1BQU01VSxNQUFNa0MsRUFBRSxNQUFPLFNBQVNnK0IsR0FBR3JoQyxHQUFHLElBQUlDLEVBQUVELEVBQUVveUIsWUFBWSxHQUFHLE9BQU9ueUIsRUFBRSxDQUFDRCxFQUFFb3lCLFlBQVksS0FBSyxJQUFJNzJCLEVBQUV5RSxFQUFFa1UsVUFBVSxPQUFPM1ksSUFBSUEsRUFBRXlFLEVBQUVrVSxVQUFVLElBQUkwckIsSUFBSTMvQixFQUFFOUIsU0FBUSxTQUFTOEIsR0FBRyxJQUFJekUsRUFBRThsQyxHQUFHNWtDLEtBQUssS0FBS3NELEVBQUVDLEdBQUcxRSxFQUFFZ3dCLElBQUl0ckIsS0FBSzFFLEVBQUVnTSxJQUFJdEgsR0FBR0EsRUFBRTJELEtBQUtwSSxFQUFFQSxRQUNuZSxTQUFTK2xDLEdBQUd2aEMsRUFBRUMsR0FBRyxPQUFPLE9BQU9ELElBQXNCLFFBQWxCQSxFQUFFQSxFQUFFK1YsZ0JBQXdCLE9BQU8vVixFQUFFZ1csY0FBK0IsUUFBbEIvVixFQUFFQSxFQUFFOFYsZ0JBQXdCLE9BQU85VixFQUFFK1YsWUFBZSxJQUFJd3JCLEdBQUd0bUIsS0FBS3VtQixLQUFLQyxHQUFHdDRCLEVBQUduRix1QkFBdUIwOUIsR0FBR3Y0QixFQUFHaEYsa0JBQWtCdzlCLEdBQUUsRUFBRXJJLEdBQUUsS0FBS3NJLEdBQUUsS0FBS2xELEdBQUUsRUFBRW1ELEdBQUcsRUFBRUMsR0FBR2hVLEdBQUcsR0FBR3lRLEdBQUUsRUFBRXdELEdBQUcsS0FBS0MsR0FBRyxFQUFFN08sR0FBRyxFQUFFcUwsR0FBRyxFQUFFeUQsR0FBRyxFQUFFQyxHQUFHLEtBQUtmLEdBQUcsRUFBRXhDLEdBQUd3RCxJQUFTLFNBQVNDLEtBQUt6RCxHQUFHMzdCLEtBQUksSUFBSSxJQThCc0ZxL0IsR0E5QmxGQyxHQUFFLEtBQUtqRCxJQUFHLEVBQUdDLEdBQUcsS0FBS0csR0FBRyxLQUFLOEMsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsSUFBRyxFQUFHLFNBQVMxUCxLQUFLLE9BQU8sSUFBTyxHQUFGa08sSUFBTTMrQixNQUFLLElBQUkrL0IsR0FBR0EsR0FBR0EsR0FBRy8vQixLQUMzZSxTQUFTMHdCLEdBQUczekIsR0FBWSxHQUFHLElBQU8sR0FBbkJBLEVBQUVBLEVBQUUzRCxPQUFrQixPQUFPLEVBQUUsR0FBRyxJQUFPLEVBQUYyRCxHQUFLLE9BQU8sS0FBSzB3QixLQUFLLEVBQUUsRUFBa0IsR0FBaEIsSUFBSXVTLEtBQUtBLEdBQUdoQixJQUFPLElBQUlqUixHQUFHN3NCLFdBQVcsQ0FBQyxJQUFJKytCLEtBQUtBLEdBQUcsT0FBT2YsR0FBR0EsR0FBRzluQixhQUFhLEdBQUdyYSxFQUFFaWpDLEdBQUcsSUFBSWhqQyxFQUFFLFNBQVNpakMsR0FBc0QsT0FBN0MsS0FBTmpqQyxJQUFJQSxLQUE4QixLQUFQQSxHQUFiRCxFQUFFLFNBQVNBLElBQU9BLEtBQVVDLEVBQUUsT0FBY0EsRUFBNEQsT0FBMURELEVBQUUwd0IsS0FBSyxJQUFPLEVBQUZrUixLQUFNLEtBQUs1aEMsRUFBRUEsRUFBRTZhLEdBQUcsR0FBR29vQixJQUFhampDLEVBQUU2YSxHQUFWN2EsRUF0SzNRLFNBQVlBLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sRUFBRSxRQUFRLE9BQU8sR0FzS3VKcWpDLENBQUdyakMsR0FBVWlqQyxJQUFZampDLEVBQ25ULFNBQVM0ekIsR0FBRzV6QixFQUFFQyxFQUFFMUUsR0FBRyxHQUFHLEdBQUd1bkMsR0FBRyxNQUFNQSxHQUFHLEVBQUVDLEdBQUcsS0FBSzVoQyxNQUFNa0MsRUFBRSxNQUFnQixHQUFHLFFBQWJyRCxFQUFFc2pDLEdBQUd0akMsRUFBRUMsSUFBZSxPQUFPLEtBQUsrYSxHQUFHaGIsRUFBRUMsRUFBRTFFLEdBQUd5RSxJQUFJdTVCLEtBQUlrRixJQUFJeCtCLEVBQUUsSUFBSXUrQixJQUFHRSxHQUFHMStCLEVBQUUyK0IsS0FBSSxJQUFJbmpDLEVBQUVrMUIsS0FBSyxJQUFJendCLEVBQUUsSUFBTyxFQUFGMmhDLEtBQU0sSUFBTyxHQUFGQSxJQUFNMkIsR0FBR3ZqQyxJQUFJd2pDLEdBQUd4akMsRUFBRXpFLEdBQUcsSUFBSXFtQyxLQUFJUyxLQUFLdlIsUUFBUSxJQUFPLEVBQUY4USxLQUFNLEtBQUtwbUMsR0FBRyxLQUFLQSxJQUFJLE9BQU9xbkMsR0FBR0EsR0FBRyxJQUFJMTdCLElBQUksQ0FBQ25ILElBQUk2aUMsR0FBR3Q3QixJQUFJdkgsSUFBSXdqQyxHQUFHeGpDLEVBQUV6RSxJQUFJNG1DLEdBQUduaUMsRUFBRSxTQUFTc2pDLEdBQUd0akMsRUFBRUMsR0FBR0QsRUFBRTZ4QixPQUFPNXhCLEVBQUUsSUFBSTFFLEVBQUV5RSxFQUFFMlYsVUFBcUMsSUFBM0IsT0FBT3BhLElBQUlBLEVBQUVzMkIsT0FBTzV4QixHQUFHMUUsRUFBRXlFLEVBQU1BLEVBQUVBLEVBQUU0VixPQUFPLE9BQU81VixHQUFHQSxFQUFFeXhCLFlBQVl4eEIsRUFBZ0IsUUFBZDFFLEVBQUV5RSxFQUFFMlYsYUFBcUJwYSxFQUFFazJCLFlBQVl4eEIsR0FBRzFFLEVBQUV5RSxFQUFFQSxFQUFFQSxFQUFFNFYsT0FBTyxPQUFPLElBQUlyYSxFQUFFOFAsSUFBSTlQLEVBQUUyWSxVQUFVLEtBQ3plLFNBQVNzdkIsR0FBR3hqQyxFQUFFQyxHQUFHLElBQUksSUFBSTFFLEVBQUV5RSxFQUFFeWpDLGFBQWFqb0MsRUFBRXdFLEVBQUV1YSxlQUFldlksRUFBRWhDLEVBQUV3YSxZQUFZblksRUFBRXJDLEVBQUUwakMsZ0JBQWdCdmhDLEVBQUVuQyxFQUFFcWEsYUFBYSxFQUFFbFksR0FBRyxDQUFDLElBQUlELEVBQUUsR0FBR3VZLEdBQUd0WSxHQUFHRixFQUFFLEdBQUdDLEVBQUUvRyxFQUFFa0gsRUFBRUgsR0FBRyxJQUFJLElBQUkvRyxHQUFHLEdBQUcsSUFBSzhHLEVBQUV6RyxJQUFJLElBQUt5RyxFQUFFRCxHQUFHLENBQUM3RyxFQUFFOEUsRUFBRWthLEdBQUdsWSxHQUFHLElBQUl0RixFQUFFMEUsR0FBRWdCLEVBQUVILEdBQUcsSUFBSXZGLEVBQUV4QixFQUFFLElBQUksR0FBR3dCLEVBQUV4QixFQUFFLEtBQUssUUFBUUEsR0FBRzhFLElBQUlELEVBQUVzYSxjQUFjclksR0FBR0UsSUFBSUYsRUFBd0IsR0FBdEJ6RyxFQUFFNGUsR0FBR3BhLEVBQUVBLElBQUl1NUIsR0FBRW9GLEdBQUUsR0FBRzErQixFQUFFb0IsR0FBSyxJQUFJN0YsRUFBRSxPQUFPRCxJQUFJQSxJQUFJNjBCLElBQUlqQixHQUFHNXpCLEdBQUd5RSxFQUFFeWpDLGFBQWEsS0FBS3pqQyxFQUFFMmpDLGlCQUFpQixPQUFPLENBQUMsR0FBRyxPQUFPcG9DLEVBQUUsQ0FBQyxHQUFHeUUsRUFBRTJqQyxtQkFBbUIxakMsRUFBRSxPQUFPMUUsSUFBSTYwQixJQUFJakIsR0FBRzV6QixHQUFHLEtBQUswRSxHQUFHMUUsRUFBRWdvQyxHQUFHN21DLEtBQUssS0FBS3NELEdBQUcsT0FBT3N3QixJQUFJQSxHQUFHLENBQUMvMEIsR0FBR2cxQixHQUFHckIsR0FBR1UsR0FBR21CLEtBQUtULEdBQUdsdEIsS0FBSzdILEdBQ3JmQSxFQUFFNjBCLElBQUksS0FBS253QixFQUFFMUUsRUFBRXMxQixHQUFHLEdBQUcwUyxHQUFHN21DLEtBQUssS0FBS3NELElBQWF6RSxFQUFFczFCLEdBQVZ0MUIsRUF6SytGLFNBQVl5RSxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxHQUFHLEtBQUssRUFBRSxPQUFPLEdBQUcsUUFBUSxNQUFNbUIsTUFBTWtDLEVBQUUsSUFBSXJELEtBeUt4VDRqQyxDQUFHM2pDLEdBQVU0akMsR0FBR25uQyxLQUFLLEtBQUtzRCxJQUFLQSxFQUFFMmpDLGlCQUFpQjFqQyxFQUFFRCxFQUFFeWpDLGFBQWFsb0MsR0FDNUcsU0FBU3NvQyxHQUFHN2pDLEdBQWlCLEdBQWRnakMsSUFBSSxFQUFFRSxHQUFHRCxHQUFHLEVBQUssSUFBTyxHQUFGckIsSUFBTSxNQUFNemdDLE1BQU1rQyxFQUFFLE1BQU0sSUFBSXBELEVBQUVELEVBQUV5akMsYUFBYSxHQUFHSyxNQUFNOWpDLEVBQUV5akMsZUFBZXhqQyxFQUFFLE9BQU8sS0FBSyxJQUFJMUUsRUFBRTZlLEdBQUdwYSxFQUFFQSxJQUFJdTVCLEdBQUVvRixHQUFFLEdBQUcsR0FBRyxJQUFJcGpDLEVBQUUsT0FBTyxLQUFLLElBQUlDLEVBQUVELEVBQU15RyxFQUFFNC9CLEdBQUVBLElBQUcsR0FBRyxJQUFJdi9CLEVBQUUwaEMsS0FBa0MsSUFBMUJ4SyxLQUFJdjVCLEdBQUcyK0IsS0FBSW5qQyxJQUFFNm1DLEtBQUsyQixHQUFHaGtDLEVBQUV4RSxNQUFNLElBQUl5b0MsS0FBSyxNQUFNLE1BQU0vaEMsR0FBR2dpQyxHQUFHbGtDLEVBQUVrQyxHQUFnRSxHQUFwRG92QixLQUFLb1EsR0FBR2pnQyxRQUFRWSxFQUFFdS9CLEdBQUU1L0IsRUFBRSxPQUFPNi9CLEdBQUVybUMsRUFBRSxHQUFHKzlCLEdBQUUsS0FBS29GLEdBQUUsRUFBRW5qQyxFQUFFZ2pDLElBQU0sSUFBS3lELEdBQUd4RCxJQUFJdUYsR0FBR2hrQyxFQUFFLFFBQVEsR0FBRyxJQUFJeEUsRUFBRSxDQUF5RixHQUF4RixJQUFJQSxJQUFJb21DLElBQUcsR0FBRzVoQyxFQUFFb1ksVUFBVXBZLEVBQUVvWSxTQUFRLEVBQUdnVixHQUFHcHRCLEVBQUVxWSxnQkFBd0IsS0FBUjljLEVBQUVxZixHQUFHNWEsTUFBV3hFLEVBQUUyb0MsR0FBR25rQyxFQUFFekUsS0FBUSxJQUFJQyxFQUFFLE1BQU15RSxFQUFFK2hDLEdBQUdnQyxHQUFHaGtDLEVBQUUsR0FBRzArQixHQUFHMStCLEVBQUV6RSxHQUFHaW9DLEdBQUd4akMsRUFBRWlELE1BQUtoRCxFQUMzYyxPQUQ2Y0QsRUFBRW9rQyxhQUNyZnBrQyxFQUFFeUIsUUFBUWtVLFVBQVUzVixFQUFFcWtDLGNBQWM5b0MsRUFBU0MsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0yRixNQUFNa0MsRUFBRSxNQUFNLEtBQUssRUFBRWloQyxHQUFHdGtDLEdBQUcsTUFBTSxLQUFLLEVBQVUsR0FBUjArQixHQUFHMStCLEVBQUV6RSxJQUFTLFNBQUZBLEtBQWNBLEdBQWlCLElBQWJDLEVBQUU0bEMsR0FBRyxJQUFJbitCLE1BQVUsQ0FBQyxHQUFHLElBQUltWCxHQUFHcGEsRUFBRSxHQUFHLE1BQXlCLEtBQW5CZ0MsRUFBRWhDLEVBQUV1YSxnQkFBcUJoZixLQUFLQSxFQUFFLENBQUNtNEIsS0FBSzF6QixFQUFFd2EsYUFBYXhhLEVBQUV1YSxlQUFldlksRUFBRSxNQUFNaEMsRUFBRXVrQyxjQUFjdlgsR0FBR3NYLEdBQUc1bkMsS0FBSyxLQUFLc0QsR0FBR3hFLEdBQUcsTUFBTThvQyxHQUFHdGtDLEdBQUcsTUFBTSxLQUFLLEVBQVUsR0FBUjArQixHQUFHMStCLEVBQUV6RSxJQUFTLFFBQUZBLEtBQWFBLEVBQUUsTUFBcUIsSUFBZkMsRUFBRXdFLEVBQUVpYixXQUFlalosR0FBRyxFQUFFLEVBQUV6RyxHQUFHLENBQUMsSUFBSTRHLEVBQUUsR0FBR3NZLEdBQUdsZixHQUFHOEcsRUFBRSxHQUFHRixHQUFFQSxFQUFFM0csRUFBRTJHLElBQUtILElBQUlBLEVBQUVHLEdBQUc1RyxJQUFJOEcsRUFDalosR0FEbVo5RyxFQUFFeUcsRUFDbFosSUFENFp6RyxHQUFHLEtBQVhBLEVBQUUwSCxLQUFJMUgsR0FBVyxJQUFJLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS0EsRUFBRSxLQUFLLElBQUlBLEVBQUUsSUFBSSxLQUNsZkEsRUFBRSxLQUFLLEtBQUtpbUMsR0FBR2ptQyxFQUFFLE9BQU9BLEdBQVUsQ0FBQ3lFLEVBQUV1a0MsY0FBY3ZYLEdBQUdzWCxHQUFHNW5DLEtBQUssS0FBS3NELEdBQUd6RSxHQUFHLE1BQU0rb0MsR0FBR3RrQyxHQUFHLE1BQU0sS0FBSyxFQUFFc2tDLEdBQUd0a0MsR0FBRyxNQUFNLFFBQVEsTUFBTW1CLE1BQU1rQyxFQUFFLE9BQWtCLE9BQVZtZ0MsR0FBR3hqQyxFQUFFaUQsTUFBWWpELEVBQUV5akMsZUFBZXhqQyxFQUFFNGpDLEdBQUdubkMsS0FBSyxLQUFLc0QsR0FBRyxLQUFLLFNBQVMwK0IsR0FBRzErQixFQUFFQyxHQUF1RCxJQUFwREEsSUFBSWlpQyxHQUFHamlDLElBQUl3K0IsR0FBR3orQixFQUFFdWEsZ0JBQWdCdGEsRUFBRUQsRUFBRXdhLGNBQWN2YSxFQUFNRCxFQUFFQSxFQUFFMGpDLGdCQUFnQixFQUFFempDLEdBQUcsQ0FBQyxJQUFJMUUsRUFBRSxHQUFHa2YsR0FBR3hhLEdBQUd6RSxFQUFFLEdBQUdELEVBQUV5RSxFQUFFekUsSUFBSSxFQUFFMEUsSUFBSXpFLEdBQzFVLFNBQVMrbkMsR0FBR3ZqQyxHQUFHLEdBQUcsSUFBTyxHQUFGNGhDLElBQU0sTUFBTXpnQyxNQUFNa0MsRUFBRSxNQUFXLEdBQUx5Z0MsS0FBUTlqQyxJQUFJdTVCLElBQUcsSUFBS3Y1QixFQUFFc2EsYUFBYXFrQixJQUFHLENBQUMsSUFBSTErQixFQUFFMCtCLEdBQU1wakMsRUFBRTRvQyxHQUFHbmtDLEVBQUVDLEdBQUcsSUFBS2dpQyxHQUFHeEQsTUFBZ0JsakMsRUFBRTRvQyxHQUFHbmtDLEVBQWZDLEVBQUVtYSxHQUFHcGEsRUFBRUMsVUFBNkIxRSxFQUFFNG9DLEdBQUdua0MsRUFBZkMsRUFBRW1hLEdBQUdwYSxFQUFFLElBQWdILEdBQW5HLElBQUlBLEVBQUVxTCxLQUFLLElBQUk5UCxJQUFJcW1DLElBQUcsR0FBRzVoQyxFQUFFb1ksVUFBVXBZLEVBQUVvWSxTQUFRLEVBQUdnVixHQUFHcHRCLEVBQUVxWSxnQkFBd0IsS0FBUnBZLEVBQUUyYSxHQUFHNWEsTUFBV3pFLEVBQUU0b0MsR0FBR25rQyxFQUFFQyxLQUFRLElBQUkxRSxFQUFFLE1BQU1BLEVBQUV5bUMsR0FBR2dDLEdBQUdoa0MsRUFBRSxHQUFHMCtCLEdBQUcxK0IsRUFBRUMsR0FBR3VqQyxHQUFHeGpDLEVBQUVpRCxNQUFLMUgsRUFBdUUsT0FBckV5RSxFQUFFb2tDLGFBQWFwa0MsRUFBRXlCLFFBQVFrVSxVQUFVM1YsRUFBRXFrQyxjQUFjcGtDLEVBQUVxa0MsR0FBR3RrQyxHQUFHd2pDLEdBQUd4akMsRUFBRWlELE1BQVksS0FDblIsU0FBU3VoQyxHQUFHeGtDLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVxbUMsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBTzVoQyxFQUFFQyxHQUFiLFFBQTRCLEtBQUoyaEMsR0FBRXJtQyxLQUFVOG1DLEtBQUt2UixPQUFPLFNBQVMyVCxHQUFHemtDLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVxbUMsR0FBRUEsS0FBSSxFQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPNWhDLEVBQUVDLEdBQWIsUUFBNEIsS0FBSjJoQyxHQUFFcm1DLEtBQVU4bUMsS0FBS3ZSLE9BQU8sU0FBU2lMLEdBQUcvN0IsRUFBRUMsR0FBRzBCLEdBQUVvZ0MsR0FBR0QsSUFBSUEsSUFBSTdoQyxFQUFFZ2lDLElBQUloaUMsRUFBRSxTQUFTNCtCLEtBQUtpRCxHQUFHQyxHQUFHdGdDLFFBQVFDLEdBQUVxZ0MsSUFDNVYsU0FBU2lDLEdBQUdoa0MsRUFBRUMsR0FBR0QsRUFBRW9rQyxhQUFhLEtBQUtwa0MsRUFBRXFrQyxjQUFjLEVBQUUsSUFBSTlvQyxFQUFFeUUsRUFBRXVrQyxjQUFpRCxJQUFsQyxJQUFJaHBDLElBQUl5RSxFQUFFdWtDLGVBQWUsRUFBRXJYLEdBQUczeEIsSUFBTyxPQUFPc21DLEdBQUUsSUFBSXRtQyxFQUFFc21DLEdBQUVqc0IsT0FBTyxPQUFPcmEsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsRUFBRTZQLEtBQUssS0FBSyxFQUE2QixPQUEzQjdQLEVBQUVBLEVBQUVpSCxLQUFLOHJCLG9CQUF3Q0MsS0FBSyxNQUFNLEtBQUssRUFBRTZILEtBQUszMEIsR0FBRW1CLElBQUduQixHQUFFa0IsSUFBRzIwQixLQUFLLE1BQU0sS0FBSyxFQUFFaEIsR0FBRy82QixHQUFHLE1BQU0sS0FBSyxFQUFFNjZCLEtBQUssTUFBTSxLQUFLLEdBQWMsS0FBSyxHQUFHMzBCLEdBQUU4QixJQUFHLE1BQU0sS0FBSyxHQUFHK3RCLEdBQUcvMUIsR0FBRyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUdxakMsS0FBS3RqQyxFQUFFQSxFQUFFcWEsT0FBTzJqQixHQUFFdjVCLEVBQUU2aEMsR0FBRXpNLEdBQUdwMUIsRUFBRXlCLFFBQVEsTUFBTWs5QixHQUFFbUQsR0FBR0csR0FBR2hpQyxFQUFFdStCLEdBQUUsRUFBRXdELEdBQUcsS0FBS0UsR0FBR3pELEdBQUdyTCxHQUFHLEVBQ3ZjLFNBQVM4USxHQUFHbGtDLEVBQUVDLEdBQUcsT0FBRSxDQUFDLElBQUkxRSxFQUFFc21DLEdBQUUsSUFBdUIsR0FBbkJ2USxLQUFLbUcsR0FBR2gyQixRQUFRMjJCLEdBQU1SLEdBQUcsQ0FBQyxJQUFJLElBQUlwOEIsRUFBRXNJLEdBQUVpUyxjQUFjLE9BQU92YSxHQUFHLENBQUMsSUFBSXdHLEVBQUV4RyxFQUFFKzhCLE1BQU0sT0FBT3YyQixJQUFJQSxFQUFFeXdCLFFBQVEsTUFBTWozQixFQUFFQSxFQUFFOEgsS0FBS3MwQixJQUFHLEVBQXlDLEdBQXRDRCxHQUFHLEVBQUUzekIsR0FBRUQsR0FBRUQsR0FBRSxLQUFLK3pCLElBQUcsRUFBRzhKLEdBQUdsZ0MsUUFBUSxLQUFRLE9BQU9sRyxHQUFHLE9BQU9BLEVBQUVxYSxPQUFPLENBQUM0b0IsR0FBRSxFQUFFd0QsR0FBRy9oQyxFQUFFNGhDLEdBQUUsS0FBSyxNQUFNN2hDLEVBQUUsQ0FBQyxJQUFJcUMsRUFBRXJDLEVBQUVtQyxFQUFFNUcsRUFBRXFhLE9BQU8xVCxFQUFFM0csRUFBRTBHLEVBQUVoQyxFQUFvRCxHQUFsREEsRUFBRTArQixHQUFFejhCLEVBQUUyVCxPQUFPLEtBQUszVCxFQUFFZ3pCLFlBQVloekIsRUFBRTh5QixXQUFXLEtBQVEsT0FBTy95QixHQUFHLHFCQUFrQkEsRUFBbEIsY0FBa0JBLEtBQUcsbUJBQW9CQSxFQUFFMkIsS0FBSyxDQUFDLElBQUl6SSxFQUFFOEcsRUFBRSxHQUFHLElBQVksRUFBUEMsRUFBRTdGLE1BQVEsQ0FBQyxJQUFJTSxFQUFFdUYsRUFBRXlULFVBQVVoWixHQUFHdUYsRUFBRWt3QixZQUFZejFCLEVBQUV5MUIsWUFBWWx3QixFQUFFNlQsY0FBY3BaLEVBQUVvWixjQUFjN1QsRUFBRTJ2QixNQUFNbDFCLEVBQUVrMUIsUUFDcGYzdkIsRUFBRWt3QixZQUFZLEtBQUtsd0IsRUFBRTZULGNBQWMsTUFBTSxJQUFJNVYsRUFBRSxJQUFlLEVBQVZxRCxHQUFFL0IsU0FBV3pFLEVBQUVtRixFQUFFLEVBQUUsQ0FBQyxJQUFJMUIsRUFBRSxHQUFHQSxFQUFFLEtBQUt6RCxFQUFFcU8sSUFBSSxDQUFDLElBQUl4TCxFQUFFN0MsRUFBRStZLGNBQWMsR0FBRyxPQUFPbFcsRUFBRVksRUFBRSxPQUFPWixFQUFFbVcsZUFBcUIsQ0FBQyxJQUFJcFcsRUFBRTVDLEVBQUV5NUIsY0FBY2gyQixPQUFFLElBQVNiLEVBQUVtOUIsWUFBWSxJQUFLbjlCLEVBQUVvOUIsNkJBQThCNzhCLElBQVMsR0FBR00sRUFBRSxDQUFDLElBQUlWLEVBQUUvQyxFQUFFbzFCLFlBQVksR0FBRyxPQUFPcnlCLEVBQUUsQ0FBQyxJQUFJTixFQUFFLElBQUkwSCxJQUFJMUgsRUFBRThILElBQUlwTSxHQUFHNkIsRUFBRW8xQixZQUFZM3lCLE9BQU9NLEVBQUV3SCxJQUFJcE0sR0FBRyxHQUFHLElBQVksRUFBUDZCLEVBQUVYLE1BQVEsQ0FBMkMsR0FBMUNXLEVBQUU2WSxPQUFPLEdBQUczVCxFQUFFMlQsT0FBTyxNQUFNM1QsRUFBRTJULFFBQVEsS0FBUSxJQUFJM1QsRUFBRW1KLElBQUksR0FBRyxPQUFPbkosRUFBRXlULFVBQVV6VCxFQUFFbUosSUFBSSxPQUFPLENBQUMsSUFBSWpQLEVBQUV3MkIsSUFBSSxFQUFFLEdBQUd4MkIsRUFBRWlQLElBQUksRUFBRTRuQixHQUFHL3dCLEVBQUU5RixHQUFHOEYsRUFBRTJ2QixPQUFPLEVBQUUsTUFBTTd4QixFQUFFaUMsT0FDNWYsRUFBT0MsRUFBRWpDLEVBQUUsSUFBSVYsRUFBRThDLEVBQUVxaUMsVUFBK0csR0FBckcsT0FBT25sQyxHQUFHQSxFQUFFOEMsRUFBRXFpQyxVQUFVLElBQUl4RixHQUFHajlCLEVBQUUsSUFBSWtGLElBQUk1SCxFQUFFeUwsSUFBSTdQLEVBQUU4RyxTQUFnQixLQUFYQSxFQUFFMUMsRUFBRXhELElBQUlaLE1BQWdCOEcsRUFBRSxJQUFJa0YsSUFBSTVILEVBQUV5TCxJQUFJN1AsRUFBRThHLEtBQVNBLEVBQUVzcEIsSUFBSXJwQixHQUFHLENBQUNELEVBQUVzRixJQUFJckYsR0FBRyxJQUFJeEMsRUFBRWlsQyxHQUFHam9DLEtBQUssS0FBSzJGLEVBQUVsSCxFQUFFK0csR0FBRy9HLEVBQUV5SSxLQUFLbEUsRUFBRUEsR0FBRzFDLEVBQUU2WSxPQUFPLEtBQUs3WSxFQUFFNjBCLE1BQU01eEIsRUFBRSxNQUFNRCxFQUFFaEQsRUFBRUEsRUFBRTRZLGFBQWEsT0FBTzVZLEdBQUdpRixFQUFFZCxPQUFPb0ssRUFBR3JKLEVBQUVPLE9BQU8scUJBQXFCLHlMQUF5TCxJQUFJKzdCLEtBQUlBLEdBQUUsR0FBR3Y4QixFQUFFODhCLEdBQUc5OEIsRUFBRUMsR0FBR2xGLEVBQ3BmbUYsRUFBRSxFQUFFLENBQUMsT0FBT25GLEVBQUVxTyxLQUFLLEtBQUssRUFBRWhKLEVBQUVKLEVBQUVqRixFQUFFNlksT0FBTyxLQUFLNVYsSUFBSUEsRUFBRWpELEVBQUU2MEIsT0FBTzV4QixFQUFrQml6QixHQUFHbDJCLEVBQWJvaUMsR0FBR3BpQyxFQUFFcUYsRUFBRXBDLElBQVcsTUFBTUQsRUFBRSxLQUFLLEVBQUVxQyxFQUFFSixFQUFFLElBQUlrQixFQUFFbkcsRUFBRXlGLEtBQUtnQixFQUFFekcsRUFBRWtYLFVBQVUsR0FBRyxJQUFhLEdBQVJsWCxFQUFFNlksU0FBWSxtQkFBb0IxUyxFQUFFbTVCLDBCQUEwQixPQUFPNzRCLEdBQUcsbUJBQW9CQSxFQUFFZzhCLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHblUsSUFBSTluQixLQUFLLENBQUN6RyxFQUFFNlksT0FBTyxLQUFLNVYsSUFBSUEsRUFBRWpELEVBQUU2MEIsT0FBTzV4QixFQUFrQml6QixHQUFHbDJCLEVBQWJ3aUMsR0FBR3hpQyxFQUFFcUYsRUFBRXBDLElBQVcsTUFBTUQsR0FBR2hELEVBQUVBLEVBQUU0WSxhQUFhLE9BQU81WSxHQUFHNG5DLEdBQUdycEMsR0FBRyxNQUFNc3BDLEdBQUk1a0MsRUFBRTRrQyxFQUFHaEQsS0FBSXRtQyxHQUFHLE9BQU9BLElBQUlzbUMsR0FBRXRtQyxFQUFFQSxFQUFFcWEsUUFBUSxTQUFTLE9BQy9hLFNBQVNtdUIsS0FBSyxJQUFJL2pDLEVBQUUwaEMsR0FBR2pnQyxRQUFzQixPQUFkaWdDLEdBQUdqZ0MsUUFBUTIyQixHQUFVLE9BQU9wNEIsRUFBRW80QixHQUFHcDRCLEVBQUUsU0FBU21rQyxHQUFHbmtDLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVxbUMsR0FBRUEsSUFBRyxHQUFHLElBQUlwbUMsRUFBRXVvQyxLQUEyQixJQUF0QnhLLEtBQUl2NUIsR0FBRzIrQixLQUFJMStCLEdBQUcrakMsR0FBR2hrQyxFQUFFQyxLQUFNLElBQUk2a0MsS0FBSyxNQUFNLE1BQU05aUMsR0FBR2tpQyxHQUFHbGtDLEVBQUVnQyxHQUFrQyxHQUF0QnN2QixLQUFLc1EsR0FBRXJtQyxFQUFFbW1DLEdBQUdqZ0MsUUFBUWpHLEVBQUssT0FBT3FtQyxHQUFFLE1BQU0xZ0MsTUFBTWtDLEVBQUUsTUFBaUIsT0FBWGsyQixHQUFFLEtBQUtvRixHQUFFLEVBQVNILEdBQUUsU0FBU3NHLEtBQUssS0FBSyxPQUFPakQsSUFBR2tELEdBQUdsRCxJQUFHLFNBQVNvQyxLQUFLLEtBQUssT0FBT3BDLEtBQUl4UyxNQUFNMFYsR0FBR2xELElBQUcsU0FBU2tELEdBQUcva0MsR0FBRyxJQUFJQyxFQUFFcWlDLEdBQUd0aUMsRUFBRTJWLFVBQVUzVixFQUFFOGhDLElBQUk5aEMsRUFBRXkyQixjQUFjejJCLEVBQUVpM0IsYUFBYSxPQUFPaDNCLEVBQUUya0MsR0FBRzVrQyxHQUFHNmhDLEdBQUU1aEMsRUFBRTBoQyxHQUFHbGdDLFFBQVEsS0FDNWEsU0FBU21qQyxHQUFHNWtDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxFQUFFLENBQUMsSUFBSXpFLEVBQUUwRSxFQUFFMFYsVUFBcUIsR0FBWDNWLEVBQUVDLEVBQUUyVixPQUFVLElBQWEsS0FBUjNWLEVBQUU0VixPQUFZLENBQWMsR0FBRyxRQUFoQnRhLEVBQUV5aUMsR0FBR3ppQyxFQUFFMEUsRUFBRTZoQyxLQUFxQixZQUFKRCxHQUFFdG1DLEdBQWEsR0FBRyxNQUFQQSxFQUFFMEUsR0FBWW9MLEtBQUssS0FBSzlQLEVBQUU4UCxLQUFLLE9BQU85UCxFQUFFd2EsZUFBZSxJQUFRLFdBQUgrckIsS0FBZ0IsSUFBWSxFQUFQdm1DLEVBQUVjLE1BQVEsQ0FBQyxJQUFJLElBQUliLEVBQUUsRUFBRXdHLEVBQUV6RyxFQUFFNGEsTUFBTSxPQUFPblUsR0FBR3hHLEdBQUd3RyxFQUFFNnZCLE1BQU03dkIsRUFBRXl2QixXQUFXenZCLEVBQUVBLEVBQUVvVSxRQUFRN2EsRUFBRWsyQixXQUFXajJCLEVBQUUsT0FBT3dFLEdBQUcsSUFBYSxLQUFSQSxFQUFFNlYsU0FBYyxPQUFPN1YsRUFBRWsxQixjQUFjbDFCLEVBQUVrMUIsWUFBWWoxQixFQUFFaTFCLGFBQWEsT0FBT2oxQixFQUFFKzBCLGFBQWEsT0FBT2gxQixFQUFFZzFCLGFBQWFoMUIsRUFBRWcxQixXQUFXQyxXQUFXaDFCLEVBQUVpMUIsYUFBYWwxQixFQUFFZzFCLFdBQVcvMEIsRUFBRSswQixZQUFZLEVBQUUvMEIsRUFBRTRWLFFBQVEsT0FDL2U3VixFQUFFZzFCLFdBQVdoMUIsRUFBRWcxQixXQUFXQyxXQUFXaDFCLEVBQUVELEVBQUVrMUIsWUFBWWoxQixFQUFFRCxFQUFFZzFCLFdBQVcvMEIsUUFBUSxDQUFTLEdBQUcsUUFBWDFFLEVBQUV1akMsR0FBRzcrQixJQUFrQyxPQUFsQjFFLEVBQUVzYSxPQUFPLFVBQUtnc0IsR0FBRXRtQyxHQUFTLE9BQU95RSxJQUFJQSxFQUFFazFCLFlBQVlsMUIsRUFBRWcxQixXQUFXLEtBQUtoMUIsRUFBRTZWLE9BQU8sTUFBa0IsR0FBRyxRQUFmNVYsRUFBRUEsRUFBRW1XLFNBQXlCLFlBQUp5ckIsR0FBRTVoQyxHQUFTNGhDLEdBQUU1aEMsRUFBRUQsUUFBUSxPQUFPQyxHQUFHLElBQUl1K0IsS0FBSUEsR0FBRSxHQUFHLFNBQVM4RixHQUFHdGtDLEdBQUcsSUFBSUMsRUFBRXl3QixLQUE4QixPQUF6QkUsR0FBRyxHQUFHb1UsR0FBR3RvQyxLQUFLLEtBQUtzRCxFQUFFQyxJQUFXLEtBQ3RULFNBQVMra0MsR0FBR2hsQyxFQUFFQyxHQUFHLEdBQUc2akMsV0FBVyxPQUFPckIsSUFBSSxHQUFHLElBQU8sR0FBRmIsSUFBTSxNQUFNemdDLE1BQU1rQyxFQUFFLE1BQU0sSUFBSTlILEVBQUV5RSxFQUFFb2tDLGFBQWEsR0FBRyxPQUFPN29DLEVBQUUsT0FBTyxLQUEyQyxHQUF0Q3lFLEVBQUVva0MsYUFBYSxLQUFLcGtDLEVBQUVxa0MsY0FBYyxFQUFLOW9DLElBQUl5RSxFQUFFeUIsUUFBUSxNQUFNTixNQUFNa0MsRUFBRSxNQUFNckQsRUFBRXlqQyxhQUFhLEtBQUssSUFBSWpvQyxFQUFFRCxFQUFFczJCLE1BQU10MkIsRUFBRWsyQixXQUFXenZCLEVBQUV4RyxFQUFFNkcsRUFBRXJDLEVBQUVxYSxjQUFjclksRUFBRWhDLEVBQUVxYSxhQUFhclksRUFBRWhDLEVBQUV1YSxlQUFlLEVBQUV2YSxFQUFFd2EsWUFBWSxFQUFFeGEsRUFBRXNhLGNBQWN0WSxFQUFFaEMsRUFBRXE1QixrQkFBa0JyM0IsRUFBRWhDLEVBQUUwYSxnQkFBZ0IxWSxFQUFFQSxFQUFFaEMsRUFBRTJhLGNBQWMsSUFBSSxJQUFJeFksRUFBRW5DLEVBQUVpYixXQUFXL1ksRUFBRWxDLEVBQUUwakMsZ0JBQWdCLEVBQUVyaEMsR0FBRyxDQUFDLElBQUlKLEVBQUUsR0FBR3dZLEdBQUdwWSxHQUFHbEgsRUFBRSxHQUFHOEcsRUFBRUQsRUFBRUMsR0FBRyxFQUFFRSxFQUFFRixJQUFJLEVBQUVDLEVBQUVELElBQUksRUFBRUksSUFBSWxILEVBQ25WLEdBRHFWLE9BQ2pmMG5DLElBQUksSUFBTyxHQUFGcm5DLElBQU9xbkMsR0FBR3RYLElBQUl2ckIsSUFBSTZpQyxHQUFHanJCLE9BQU81WCxHQUFHQSxJQUFJdTVCLEtBQUlzSSxHQUFFdEksR0FBRSxLQUFLb0YsR0FBRSxHQUFHLEVBQUVwakMsRUFBRXNhLE1BQU0sT0FBT3RhLEVBQUV5NUIsWUFBWXo1QixFQUFFeTVCLFdBQVdDLFdBQVcxNUIsRUFBRUMsRUFBRUQsRUFBRTI1QixhQUFhMTVCLEVBQUVELEVBQUVDLEVBQUVELEVBQUUyNUIsWUFBZSxPQUFPMTVCLEVBQUUsQ0FBd0MsR0FBdkN3RyxFQUFFNC9CLEdBQUVBLElBQUcsR0FBR0QsR0FBR2xnQyxRQUFRLEtBQUtpckIsR0FBRy9RLEdBQWFnTyxHQUFWeG5CLEVBQUVvbkIsTUFBYyxDQUFDLEdBQUcsbUJBQW1CcG5CLEVBQUVELEVBQUUsQ0FBQ2lvQixNQUFNaG9CLEVBQUVpb0IsZUFBZUMsSUFBSWxvQixFQUFFbW9CLG1CQUFtQnRxQixFQUFFLEdBQUdrQyxHQUFHQSxFQUFFQyxFQUFFaUwsZ0JBQWdCbEwsRUFBRXNvQixhQUFhL2lCLFFBQVF0TSxFQUFFK0csRUFBRXVvQixjQUFjdm9CLEVBQUV1b0IsaUJBQWlCLElBQUl0dkIsRUFBRThwQyxXQUFXLENBQUMvaUMsRUFBRS9HLEVBQUVvdkIsV0FBV2xvQixFQUFFbEgsRUFBRXV2QixhQUFhem9CLEVBQUU5RyxFQUFFd3ZCLFVBQVV4dkIsRUFBRUEsRUFBRXl2QixZQUFZLElBQUkxb0IsRUFBRStNLFNBQVNoTixFQUFFZ04sU0FBUyxNQUFNNDFCLEdBQUkzaUMsRUFBRSxLQUNuZixNQUFNbEMsRUFBRSxJQUFJckQsRUFBRSxFQUFFd0QsR0FBRyxFQUFFbkQsR0FBRyxFQUFFeUQsRUFBRSxFQUFFWixFQUFFLEVBQUVELEVBQUV1QyxFQUFFcEMsRUFBRSxLQUFLRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUlSLEVBQUtHLElBQUlzQyxHQUFHLElBQUlHLEdBQUcsSUFBSXpDLEVBQUVxUCxXQUFXOU8sRUFBRXhELEVBQUUwRixHQUFHekMsSUFBSXFDLEdBQUcsSUFBSTlHLEdBQUcsSUFBSXlFLEVBQUVxUCxXQUFXalMsRUFBRUwsRUFBRXhCLEdBQUcsSUFBSXlFLEVBQUVxUCxXQUFXdFMsR0FBR2lELEVBQUVzUCxVQUFVcFEsUUFBVyxRQUFRVyxFQUFFRyxFQUFFZ1AsYUFBa0I3TyxFQUFFSCxFQUFFQSxFQUFFSCxFQUFFLE9BQU8sQ0FBQyxHQUFHRyxJQUFJdUMsRUFBRSxNQUFNbEMsRUFBOEMsR0FBNUNGLElBQUltQyxLQUFLekIsSUFBSTRCLElBQUlsQyxFQUFFeEQsR0FBR29ELElBQUlrQyxLQUFLcEMsSUFBSTFFLElBQUk2QixFQUFFTCxHQUFNLFFBQVE4QyxFQUFFRyxFQUFFMHBCLGFBQWEsTUFBVXZwQixHQUFKSCxFQUFFRyxHQUFNNlQsV0FBV2hVLEVBQUVILEVBQUV5QyxHQUFHLElBQUkvQixJQUFJLElBQUluRCxFQUFFLEtBQUssQ0FBQ210QixNQUFNaHFCLEVBQUVrcUIsSUFBSXJ0QixRQUFRa0YsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLENBQUNpb0IsTUFBTSxFQUFFRSxJQUFJLFFBQVFub0IsRUFBRSxLQUFLeXFCLEdBQUcsQ0FBQ3VZLFlBQVkvaUMsRUFBRWdqQyxlQUFlampDLEdBQUd5WixJQUFHLEVBQUd3bkIsR0FBRyxLQUFLQyxJQUFHLEVBQUdiLEdBQUUvbUMsRUFBRSxHQUFHLElBQUk0cEMsS0FBSyxNQUFNUCxHQUFJLEdBQUcsT0FDdmdCdEMsR0FBRSxNQUFNcGhDLE1BQU1rQyxFQUFFLE1BQU0wOEIsR0FBR3dDLEdBQUVzQyxHQUFJdEMsR0FBRUEsR0FBRXROLGtCQUFpQixPQUFPc04sSUFBR1ksR0FBRyxLQUFLWixHQUFFL21DLEVBQUUsR0FBRyxJQUFJLElBQUkyRyxFQUFFbkMsRUFBRSxPQUFPdWlDLElBQUcsQ0FBQyxJQUFJbm1DLEVBQUVtbUMsR0FBRTFzQixNQUErQixHQUF2QixHQUFGelosR0FBTTJTLEdBQUd3ekIsR0FBRXJ1QixVQUFVLElBQVMsSUFBRjlYLEVBQU0sQ0FBQyxJQUFJbUQsRUFBRWdqQyxHQUFFNXNCLFVBQVUsR0FBRyxPQUFPcFcsRUFBRSxDQUFDLElBQUlHLEVBQUVILEVBQUVxQyxJQUFJLE9BQU9sQyxJQUFJLG1CQUFvQkEsRUFBRUEsRUFBRSxNQUFNQSxFQUFFK0IsUUFBUSxPQUFPLE9BQVMsS0FBRnJGLEdBQVEsS0FBSyxFQUFFMGtDLEdBQUd5QixJQUFHQSxHQUFFMXNCLFFBQVEsRUFBRSxNQUFNLEtBQUssRUFBRWlyQixHQUFHeUIsSUFBR0EsR0FBRTFzQixRQUFRLEVBQUVzckIsR0FBR29CLEdBQUU1c0IsVUFBVTRzQixJQUFHLE1BQU0sS0FBSyxLQUFLQSxHQUFFMXNCLFFBQVEsS0FBSyxNQUFNLEtBQUssS0FBSzBzQixHQUFFMXNCLFFBQVEsS0FBS3NyQixHQUFHb0IsR0FBRTVzQixVQUFVNHNCLElBQUcsTUFBTSxLQUFLLEVBQUVwQixHQUFHb0IsR0FBRTVzQixVQUFVNHNCLElBQUcsTUFBTSxLQUFLLEVBQU01QixHQUFHeCtCLEVBQVBELEVBQUVxZ0MsSUFBVSxJQUFJeGdDLEVBQUVHLEVBQUV5VCxVQUFVaXJCLEdBQUcxK0IsR0FBRyxPQUNuZkgsR0FBRzYrQixHQUFHNytCLEdBQUd3Z0MsR0FBRUEsR0FBRXROLFlBQVksTUFBTTRQLEdBQUksR0FBRyxPQUFPdEMsR0FBRSxNQUFNcGhDLE1BQU1rQyxFQUFFLE1BQU0wOEIsR0FBR3dDLEdBQUVzQyxHQUFJdEMsR0FBRUEsR0FBRXROLGtCQUFpQixPQUFPc04sSUFBa0QsR0FBL0M3aUMsRUFBRWl0QixHQUFHcHRCLEVBQUVncUIsS0FBS250QixFQUFFc0QsRUFBRXdsQyxZQUFZL2lDLEVBQUV6QyxFQUFFeWxDLGVBQWtCNWxDLElBQUluRCxHQUFHQSxHQUFHQSxFQUFFZ1IsZUFyS3FELFNBQVNpNEIsRUFBR3JsQyxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRWlQLFlBQVloUCxHQUFHLElBQUlBLEVBQUVnUCxTQUFTbzJCLEVBQUdybEMsRUFBRUMsRUFBRTJULFlBQVksYUFBYTVULEVBQUVBLEVBQUVzbEMsU0FBU3JsQyxLQUFHRCxFQUFFdWxDLDRCQUF3RCxHQUE3QnZsQyxFQUFFdWxDLHdCQUF3QnRsQyxNQXFLMU5vbEMsQ0FBR2pwQyxFQUFFZ1IsY0FBYytvQixnQkFBZ0IvNUIsR0FBRyxDQUFDLE9BQU8rRixHQUFHd25CLEdBQUd2dEIsS0FBS21ELEVBQUU0QyxFQUFFZ29CLFdBQWMsS0FBUnpxQixFQUFFeUMsRUFBRWtvQixPQUFpQjNxQixFQUFFSCxHQUFHLG1CQUFtQm5ELEdBQUdBLEVBQUVndUIsZUFBZTdxQixFQUFFbkQsRUFBRWt1QixhQUFhcFAsS0FBS3NxQixJQUFJOWxDLEVBQUV0RCxFQUFFRCxNQUFNMkMsVUFBVVksR0FBR0gsRUFBRW5ELEVBQUVnUixlQUFlbE8sV0FBV0ssRUFBRWlyQixhQUFhL2lCLFFBQVNnakIsZUFBZS9xQixFQUFFQSxFQUFFK3FCLGVBQWV2b0IsRUFBRTlGLEVBQUU2UixZQUFZblAsT0FBT2lELEVBQUVtWixLQUFLc3FCLElBQUlyakMsRUFBRWdvQixNQUFNam9CLEdBQUdDLE9BQUUsSUFDcGZBLEVBQUVrb0IsSUFBSXRvQixFQUFFbVosS0FBS3NxQixJQUFJcmpDLEVBQUVrb0IsSUFBSW5vQixJQUFJeEMsRUFBRStsQyxRQUFRMWpDLEVBQUVJLElBQUlELEVBQUVDLEVBQUVBLEVBQUVKLEVBQUVBLEVBQUVHLEdBQUdBLEVBQUVpbkIsR0FBRy9zQixFQUFFMkYsR0FBR00sRUFBRThtQixHQUFHL3NCLEVBQUUrRixHQUFHRCxHQUFHRyxJQUFJLElBQUkzQyxFQUFFdWxDLFlBQVl2bEMsRUFBRTZxQixhQUFhcm9CLEVBQUVrbkIsTUFBTTFwQixFQUFFZ3JCLGVBQWV4b0IsRUFBRW1uQixRQUFRM3BCLEVBQUVpckIsWUFBWXRvQixFQUFFK21CLE1BQU0xcEIsRUFBRWtyQixjQUFjdm9CLEVBQUVnbkIsV0FBVTlwQixFQUFFQSxFQUFFbW1DLGVBQWdCQyxTQUFTempDLEVBQUVrbkIsS0FBS2xuQixFQUFFbW5CLFFBQVEzcEIsRUFBRWttQyxrQkFBa0I3akMsRUFBRUksR0FBR3pDLEVBQUVtbUMsU0FBU3RtQyxHQUFHRyxFQUFFK2xDLE9BQU9wakMsRUFBRSttQixLQUFLL21CLEVBQUVnbkIsVUFBVTlwQixFQUFFdW1DLE9BQU96akMsRUFBRSttQixLQUFLL21CLEVBQUVnbkIsUUFBUTNwQixFQUFFbW1DLFNBQVN0bUMsT0FBUUEsRUFBRSxHQUFHLElBQUlHLEVBQUV0RCxFQUFFc0QsRUFBRUEsRUFBRWtVLFlBQVksSUFBSWxVLEVBQUV1UCxVQUFVMVAsRUFBRTZELEtBQUssQ0FBQ2k4QixRQUFRMy9CLEVBQUVxbUMsS0FBS3JtQyxFQUFFc21DLFdBQVdDLElBQUl2bUMsRUFBRXdtQyxZQUFtRCxJQUF2QyxtQkFBb0I5cEMsRUFBRWlrQyxPQUFPamtDLEVBQUVpa0MsUUFBWWprQyxFQUNyZixFQUFFQSxFQUFFbUQsRUFBRVQsT0FBTzFDLEtBQUlzRCxFQUFFSCxFQUFFbkQsSUFBS2lqQyxRQUFRMkcsV0FBV3RtQyxFQUFFcW1DLEtBQUtybUMsRUFBRTIvQixRQUFRNkcsVUFBVXhtQyxFQUFFdW1DLElBQUl0cUIsS0FBSytRLEdBQUdDLEdBQUdELEdBQUcsS0FBSzFzQixFQUFFeUIsUUFBUWxHLEVBQUVnbkMsR0FBRS9tQyxFQUFFLEdBQUcsSUFBSSxJQUFJWSxFQUFFNEQsRUFBRSxPQUFPdWlDLElBQUcsQ0FBQyxJQUFJcC9CLEVBQUVvL0IsR0FBRTFzQixNQUFnQyxHQUF4QixHQUFGMVMsR0FBTSs4QixHQUFHOWpDLEVBQUVtbUMsR0FBRTVzQixVQUFVNHNCLElBQVEsSUFBRnAvQixFQUFNLENBQUM1RCxPQUFFLEVBQU8sSUFBSWtFLEVBQUU4K0IsR0FBRTNnQyxJQUFJLEdBQUcsT0FBTzZCLEVBQUUsQ0FBQyxJQUFJZCxFQUFFNC9CLEdBQUVydUIsVUFBVSxPQUFPcXVCLEdBQUVsM0IsS0FBSyxLQUFLLEVBQUU5TCxFQUFFb0QsRUFBRSxNQUFNLFFBQVFwRCxFQUFFb0QsRUFBRSxtQkFBb0JjLEVBQUVBLEVBQUVsRSxHQUFHa0UsRUFBRWhDLFFBQVFsQyxHQUFHZ2pDLEdBQUVBLEdBQUV0TixZQUFZLE1BQU00UCxHQUFJLEdBQUcsT0FBT3RDLEdBQUUsTUFBTXBoQyxNQUFNa0MsRUFBRSxNQUFNMDhCLEdBQUd3QyxHQUFFc0MsR0FBSXRDLEdBQUVBLEdBQUV0TixrQkFBaUIsT0FBT3NOLElBQUdBLEdBQUUsS0FBS2xTLEtBQUt1UixHQUFFNS9CLE9BQU9oQyxFQUFFeUIsUUFBUWxHLEVBQUUsR0FBR2luQyxHQUFHQSxJQUFHLEVBQUdDLEdBQUd6aUMsRUFBRTBpQyxHQUFHemlDLE9BQU8sSUFBSXNpQyxHQUFFL21DLEVBQUUsT0FBTyttQyxJQUFHdGlDLEVBQ3Bmc2lDLEdBQUV0TixXQUFXc04sR0FBRXROLFdBQVcsS0FBYSxFQUFSc04sR0FBRTFzQixTQUFVMVMsRUFBRW8vQixJQUFJbnNCLFFBQVEsS0FBS2pULEVBQUUrUSxVQUFVLE1BQU1xdUIsR0FBRXRpQyxFQUFxRixHQUFsRSxLQUFqQnpFLEVBQUV3RSxFQUFFcWEsZ0JBQXFCcWxCLEdBQUcsTUFBTSxJQUFJbGtDLEVBQUV3RSxJQUFJK2lDLEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBRy9pQyxHQUFHOGlDLEdBQUcsRUFBRXZuQyxFQUFFQSxFQUFFMlksVUFBYThhLElBQUksbUJBQW9CQSxHQUFHbVgsa0JBQWtCLElBQUluWCxHQUFHbVgsa0JBQWtCcFgsR0FBR3h6QixPQUFFLEVBQU8sS0FBc0IsR0FBaEJBLEVBQUVrRyxRQUFRb1UsUUFBVyxNQUFNZ3ZCLElBQWUsR0FBVnJCLEdBQUd4akMsRUFBRWlELE1BQVFxOEIsR0FBRyxNQUFNQSxJQUFHLEVBQUd0L0IsRUFBRXUvQixHQUFHQSxHQUFHLEtBQUt2L0IsRUFBRSxPQUFHLElBQU8sRUFBRjRoQyxLQUFpQjlRLEtBQUwsS0FDalcsU0FBU3NVLEtBQUssS0FBSyxPQUFPN0MsSUFBRyxDQUFDLElBQUl2aUMsRUFBRXVpQyxHQUFFNXNCLFVBQVV5dEIsSUFBSSxPQUFPRCxLQUFLLElBQWEsRUFBUlosR0FBRTFzQixPQUFTUyxHQUFHaXNCLEdBQUVZLE1BQU1DLElBQUcsR0FBSSxLQUFLYixHQUFFbDNCLEtBQUtrMkIsR0FBR3ZoQyxFQUFFdWlDLEtBQUlqc0IsR0FBR2lzQixHQUFFWSxNQUFNQyxJQUFHLElBQUssSUFBSW5qQyxFQUFFc2lDLEdBQUUxc0IsTUFBTSxJQUFPLElBQUY1VixJQUFRKy9CLEdBQUdoZ0MsRUFBRXVpQyxJQUFHLElBQU8sSUFBRnRpQyxJQUFRdWlDLEtBQUtBLElBQUcsRUFBRzNSLEdBQUcsSUFBRyxXQUFnQixPQUFMaVQsS0FBWSxTQUFRdkIsR0FBRUEsR0FBRXROLFlBQVksU0FBUzZPLEtBQUssR0FBRyxLQUFLcEIsR0FBRyxDQUFDLElBQUkxaUMsRUFBRSxHQUFHMGlDLEdBQUcsR0FBR0EsR0FBUyxPQUFOQSxHQUFHLEdBQVU5UixHQUFHNXdCLEVBQUVvbUMsSUFBSSxPQUFNLEVBQUcsU0FBU2hHLEdBQUdwZ0MsRUFBRUMsR0FBRzBpQyxHQUFHdi9CLEtBQUtuRCxFQUFFRCxHQUFHd2lDLEtBQUtBLElBQUcsRUFBRzNSLEdBQUcsSUFBRyxXQUFnQixPQUFMaVQsS0FBWSxTQUFRLFNBQVMzRCxHQUFHbmdDLEVBQUVDLEdBQUcyaUMsR0FBR3gvQixLQUFLbkQsRUFBRUQsR0FBR3dpQyxLQUFLQSxJQUFHLEVBQUczUixHQUFHLElBQUcsV0FBZ0IsT0FBTGlULEtBQVksU0FDemQsU0FBU3NDLEtBQUssR0FBRyxPQUFPM0QsR0FBRyxPQUFNLEVBQUcsSUFBSXppQyxFQUFFeWlDLEdBQVcsR0FBUkEsR0FBRyxLQUFRLElBQU8sR0FBRmIsSUFBTSxNQUFNemdDLE1BQU1rQyxFQUFFLE1BQU0sSUFBSXBELEVBQUUyaEMsR0FBRUEsSUFBRyxHQUFHLElBQUlybUMsRUFBRXFuQyxHQUFHQSxHQUFHLEdBQUcsSUFBSSxJQUFJcG5DLEVBQUUsRUFBRUEsRUFBRUQsRUFBRXVELE9BQU90RCxHQUFHLEVBQUUsQ0FBQyxJQUFJd0csRUFBRXpHLEVBQUVDLEdBQUc2RyxFQUFFOUcsRUFBRUMsRUFBRSxHQUFHMkcsRUFBRUgsRUFBRSszQixRQUF5QixHQUFqQi8zQixFQUFFKzNCLGFBQVEsRUFBVSxtQkFBb0I1M0IsRUFBRSxJQUFJQSxJQUFJLE1BQU1GLEdBQUcsR0FBRyxPQUFPSSxFQUFFLE1BQU1sQixNQUFNa0MsRUFBRSxNQUFNMDhCLEdBQUcxOUIsRUFBRUosSUFBZSxJQUFYMUcsRUFBRW9uQyxHQUFHQSxHQUFHLEdBQU9ubkMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFdUQsT0FBT3RELEdBQUcsRUFBRSxDQUFDd0csRUFBRXpHLEVBQUVDLEdBQUc2RyxFQUFFOUcsRUFBRUMsRUFBRSxHQUFHLElBQUksSUFBSTBHLEVBQUVGLEVBQUV4RixPQUFPd0YsRUFBRSszQixRQUFRNzNCLElBQUksTUFBTUQsR0FBRyxHQUFHLE9BQU9JLEVBQUUsTUFBTWxCLE1BQU1rQyxFQUFFLE1BQU0wOEIsR0FBRzE5QixFQUFFSixJQUFJLElBQUlDLEVBQUVsQyxFQUFFeUIsUUFBUXl6QixZQUFZLE9BQU9oekIsR0FBR2xDLEVBQUVrQyxFQUFFK3lCLFdBQVcveUIsRUFBRSt5QixXQUFXLEtBQWEsRUFBUi95QixFQUFFMlQsUUFBVTNULEVBQUVrVSxRQUNqZixLQUFLbFUsRUFBRWdTLFVBQVUsTUFBTWhTLEVBQUVsQyxFQUFXLE9BQVQ0aEMsR0FBRTNoQyxFQUFFNndCLE1BQVcsRUFBRyxTQUFTdVYsR0FBR3JtQyxFQUFFQyxFQUFFMUUsR0FBeUIwM0IsR0FBR2p6QixFQUFmQyxFQUFFbS9CLEdBQUdwL0IsRUFBZkMsRUFBRTgrQixHQUFHeGpDLEVBQUUwRSxHQUFZLElBQVdBLEVBQUV5ekIsS0FBZSxRQUFWMXpCLEVBQUVzakMsR0FBR3RqQyxFQUFFLE1BQWNnYixHQUFHaGIsRUFBRSxFQUFFQyxHQUFHdWpDLEdBQUd4akMsRUFBRUMsSUFDekksU0FBUzgvQixHQUFHLy9CLEVBQUVDLEdBQUcsR0FBRyxJQUFJRCxFQUFFcUwsSUFBSWc3QixHQUFHcm1DLEVBQUVBLEVBQUVDLFFBQVEsSUFBSSxJQUFJMUUsRUFBRXlFLEVBQUU0VixPQUFPLE9BQU9yYSxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFOFAsSUFBSSxDQUFDZzdCLEdBQUc5cUMsRUFBRXlFLEVBQUVDLEdBQUcsTUFBVyxHQUFHLElBQUkxRSxFQUFFOFAsSUFBSSxDQUFDLElBQUk3UCxFQUFFRCxFQUFFMlksVUFBVSxHQUFHLG1CQUFvQjNZLEVBQUVrSCxLQUFLNjVCLDBCQUEwQixtQkFBb0I5Z0MsRUFBRWlrQyxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR25VLElBQUkvdkIsSUFBSSxDQUFXLElBQUl3RyxFQUFFdzlCLEdBQUdqa0MsRUFBbkJ5RSxFQUFFKytCLEdBQUc5K0IsRUFBRUQsR0FBZ0IsR0FBNEIsR0FBekJpekIsR0FBRzEzQixFQUFFeUcsR0FBR0EsRUFBRTB4QixLQUFrQixRQUFibjRCLEVBQUUrbkMsR0FBRy9uQyxFQUFFLElBQWV5ZixHQUFHemYsRUFBRSxFQUFFeUcsR0FBR3doQyxHQUFHam9DLEVBQUV5RyxRQUFRLEdBQUcsbUJBQW9CeEcsRUFBRWlrQyxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR25VLElBQUkvdkIsSUFBSSxJQUFJQSxFQUFFaWtDLGtCQUFrQngvQixFQUFFRCxHQUFHLE1BQU1xQyxJQUFJLE9BQU85RyxFQUFFQSxFQUFFcWEsUUFDcGQsU0FBUyt1QixHQUFHM2tDLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUV3RSxFQUFFMGtDLFVBQVUsT0FBT2xwQyxHQUFHQSxFQUFFb2MsT0FBTzNYLEdBQUdBLEVBQUV5ekIsS0FBSzF6QixFQUFFd2EsYUFBYXhhLEVBQUV1YSxlQUFlaGYsRUFBRWcrQixLQUFJdjVCLElBQUkyK0IsR0FBRXBqQyxLQUFLQSxJQUFJLElBQUlpakMsSUFBRyxJQUFJQSxLQUFNLFNBQUZHLE1BQWNBLElBQUcsSUFBSTE3QixLQUFJbStCLEdBQUc0QyxHQUFHaGtDLEVBQUUsR0FBR2tpQyxJQUFJM21DLEdBQUdpb0MsR0FBR3hqQyxFQUFFQyxHQUFHLFNBQVNxaEMsR0FBR3RoQyxFQUFFQyxHQUFHLElBQUkxRSxFQUFFeUUsRUFBRWtVLFVBQVUsT0FBTzNZLEdBQUdBLEVBQUVxYyxPQUFPM1gsR0FBTyxLQUFKQSxFQUFFLEtBQW1CLElBQU8sR0FBaEJBLEVBQUVELEVBQUUzRCxPQUFlNEQsRUFBRSxFQUFFLElBQU8sRUFBRkEsR0FBS0EsRUFBRSxLQUFLeXdCLEtBQUssRUFBRSxHQUFHLElBQUl1UyxLQUFLQSxHQUFHaEIsSUFBdUIsS0FBbkJoaUMsRUFBRTZhLEdBQUcsVUFBVW1vQixPQUFZaGpDLEVBQUUsV0FBVzFFLEVBQUVtNEIsS0FBZSxRQUFWMXpCLEVBQUVzakMsR0FBR3RqQyxFQUFFQyxNQUFjK2EsR0FBR2hiLEVBQUVDLEVBQUUxRSxHQUFHaW9DLEdBQUd4akMsRUFBRXpFLElBVWpaLFNBQVMrcUMsR0FBR3RtQyxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBR2tGLEtBQUsySyxJQUFJckwsRUFBRVUsS0FBS2pFLElBQUlsQixFQUFFbUYsS0FBSzBWLFFBQVExVixLQUFLeVYsTUFBTXpWLEtBQUtrVixPQUFPbFYsS0FBS3dULFVBQVV4VCxLQUFLK0IsS0FBSy9CLEtBQUs0MEIsWUFBWSxLQUFLNTBCLEtBQUt5MEIsTUFBTSxFQUFFejBCLEtBQUtrQixJQUFJLEtBQUtsQixLQUFLdTJCLGFBQWFoM0IsRUFBRVMsS0FBS2l4QixhQUFhanhCLEtBQUtxVixjQUFjclYsS0FBSzB4QixZQUFZMXhCLEtBQUsrMUIsY0FBYyxLQUFLLzFCLEtBQUtyRSxLQUFLYixFQUFFa0YsS0FBS21WLE1BQU0sRUFBRW5WLEtBQUtzMEIsV0FBV3QwQixLQUFLdzBCLFlBQVl4MEIsS0FBS3UwQixXQUFXLEtBQUt2MEIsS0FBSyt3QixXQUFXL3dCLEtBQUtteEIsTUFBTSxFQUFFbnhCLEtBQUtpVixVQUFVLEtBQUssU0FBU29oQixHQUFHLzJCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLE9BQU8sSUFBSThxQyxHQUFHdG1DLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLFNBQVNrZ0MsR0FBRzE3QixHQUFpQixVQUFkQSxFQUFFQSxFQUFFbEQsYUFBdUJrRCxFQUFFaUIsa0JBRXJkLFNBQVNtMEIsR0FBR3AxQixFQUFFQyxHQUFHLElBQUkxRSxFQUFFeUUsRUFBRTJWLFVBQ3VCLE9BRGIsT0FBT3BhLElBQUdBLEVBQUV3N0IsR0FBRy8yQixFQUFFcUwsSUFBSXBMLEVBQUVELEVBQUV2RCxJQUFJdUQsRUFBRTNELE9BQVFpNUIsWUFBWXQxQixFQUFFczFCLFlBQVkvNUIsRUFBRWtILEtBQUt6QyxFQUFFeUMsS0FBS2xILEVBQUUyWSxVQUFVbFUsRUFBRWtVLFVBQVUzWSxFQUFFb2EsVUFBVTNWLEVBQUVBLEVBQUUyVixVQUFVcGEsSUFBSUEsRUFBRTA3QixhQUFhaDNCLEVBQUUxRSxFQUFFa0gsS0FBS3pDLEVBQUV5QyxLQUFLbEgsRUFBRXNhLE1BQU0sRUFBRXRhLEVBQUUwNUIsV0FBVyxLQUFLMTVCLEVBQUUyNUIsWUFBWSxLQUFLMzVCLEVBQUV5NUIsV0FBVyxNQUFNejVCLEVBQUVrMkIsV0FBV3p4QixFQUFFeXhCLFdBQVdsMkIsRUFBRXMyQixNQUFNN3hCLEVBQUU2eEIsTUFBTXQyQixFQUFFNGEsTUFBTW5XLEVBQUVtVyxNQUFNNWEsRUFBRWs3QixjQUFjejJCLEVBQUV5MkIsY0FBY2w3QixFQUFFd2EsY0FBYy9WLEVBQUUrVixjQUFjeGEsRUFBRTYyQixZQUFZcHlCLEVBQUVveUIsWUFBWW55QixFQUFFRCxFQUFFMnhCLGFBQWFwMkIsRUFBRW8yQixhQUFhLE9BQU8xeEIsRUFBRSxLQUFLLENBQUM0eEIsTUFBTTV4QixFQUFFNHhCLE1BQU1ELGFBQWEzeEIsRUFBRTJ4QixjQUMzZXIyQixFQUFFNmEsUUFBUXBXLEVBQUVvVyxRQUFRN2EsRUFBRTQ1QixNQUFNbjFCLEVBQUVtMUIsTUFBTTU1QixFQUFFcUcsSUFBSTVCLEVBQUU0QixJQUFXckcsRUFDdkQsU0FBU2c2QixHQUFHdjFCLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csRUFBRUssR0FBRyxJQUFJRixFQUFFLEVBQU0sR0FBSjNHLEVBQUV3RSxFQUFLLG1CQUFvQkEsRUFBRTA3QixHQUFHMTdCLEtBQUttQyxFQUFFLFFBQVEsR0FBRyxpQkFBa0JuQyxFQUFFbUMsRUFBRSxPQUFPbkMsRUFBRSxPQUFPQSxHQUFHLEtBQUt1SixFQUFHLE9BQU9tc0IsR0FBR242QixFQUFFNkcsU0FBU0osRUFBRUssRUFBRXBDLEdBQUcsS0FBS2tLLEVBQUdoSSxFQUFFLEVBQUVILEdBQUcsR0FBRyxNQUFNLEtBQUt3SCxFQUFHckgsRUFBRSxFQUFFSCxHQUFHLEVBQUUsTUFBTSxLQUFLeUgsRUFBRyxPQUFPekosRUFBRSsyQixHQUFHLEdBQUd4N0IsRUFBRTBFLEVBQUksRUFBRitCLElBQU9zekIsWUFBWTdyQixFQUFHekosRUFBRXlDLEtBQUtnSCxFQUFHekosRUFBRTZ4QixNQUFNeHZCLEVBQUVyQyxFQUFFLEtBQUs2SixFQUFHLE9BQU83SixFQUFFKzJCLEdBQUcsR0FBR3g3QixFQUFFMEUsRUFBRStCLElBQUtTLEtBQUtvSCxFQUFHN0osRUFBRXMxQixZQUFZenJCLEVBQUc3SixFQUFFNnhCLE1BQU14dkIsRUFBRXJDLEVBQUUsS0FBSzhKLEVBQUcsT0FBTzlKLEVBQUUrMkIsR0FBRyxHQUFHeDdCLEVBQUUwRSxFQUFFK0IsSUFBS3N6QixZQUFZeHJCLEVBQUc5SixFQUFFNnhCLE1BQU14dkIsRUFBRXJDLEVBQUUsS0FBS29LLEVBQUcsT0FBTyt5QixHQUFHNWhDLEVBQUV5RyxFQUFFSyxFQUFFcEMsR0FBRyxLQUFLb0ssRUFBRyxPQUFPckssRUFBRSsyQixHQUFHLEdBQUd4N0IsRUFBRTBFLEVBQUUrQixJQUFLc3pCLFlBQVlqckIsRUFBR3JLLEVBQUU2eEIsTUFBTXh2QixFQUFFckMsRUFBRSxRQUFRLEdBQUcscUJBQ2hmQSxFQURnZixjQUNoZkEsS0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUV3QyxVQUFVLEtBQUtrSCxFQUFHdkgsRUFBRSxHQUFHLE1BQU1uQyxFQUFFLEtBQUsySixFQUFHeEgsRUFBRSxFQUFFLE1BQU1uQyxFQUFFLEtBQUs0SixFQUFHekgsRUFBRSxHQUFHLE1BQU1uQyxFQUFFLEtBQUsrSixFQUFHNUgsRUFBRSxHQUFHLE1BQU1uQyxFQUFFLEtBQUtnSyxFQUFHN0gsRUFBRSxHQUFHM0csRUFBRSxLQUFLLE1BQU13RSxFQUFFLEtBQUtpSyxFQUFHOUgsRUFBRSxHQUFHLE1BQU1uQyxFQUFFLE1BQU1tQixNQUFNa0MsRUFBRSxJQUFJLE1BQU1yRCxFQUFFQSxPQUFSLElBQWlCQSxFQUFqQixjQUFpQkEsR0FBRSxLQUF1RCxPQUFqREMsRUFBRTgyQixHQUFHNTBCLEVBQUU1RyxFQUFFMEUsRUFBRStCLElBQUtzekIsWUFBWXQxQixFQUFFQyxFQUFFd0MsS0FBS2pILEVBQUV5RSxFQUFFNHhCLE1BQU14dkIsRUFBU3BDLEVBQUUsU0FBU3kxQixHQUFHMTFCLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUEyQixPQUF4QndFLEVBQUUrMkIsR0FBRyxFQUFFLzJCLEVBQUV4RSxFQUFFeUUsSUFBSzR4QixNQUFNdDJCLEVBQVN5RSxFQUFFLFNBQVNtOUIsR0FBR245QixFQUFFQyxFQUFFMUUsRUFBRUMsR0FBNkMsT0FBMUN3RSxFQUFFKzJCLEdBQUcsR0FBRy8yQixFQUFFeEUsRUFBRXlFLElBQUtxMUIsWUFBWWxyQixFQUFHcEssRUFBRTZ4QixNQUFNdDJCLEVBQVN5RSxFQUFFLFNBQVNxMUIsR0FBR3IxQixFQUFFQyxFQUFFMUUsR0FBOEIsT0FBM0J5RSxFQUFFKzJCLEdBQUcsRUFBRS8yQixFQUFFLEtBQUtDLElBQUs0eEIsTUFBTXQyQixFQUFTeUUsRUFDbGMsU0FBU3kxQixHQUFHejFCLEVBQUVDLEVBQUUxRSxHQUE4SixPQUEzSjBFLEVBQUU4MkIsR0FBRyxFQUFFLE9BQU8vMkIsRUFBRW9DLFNBQVNwQyxFQUFFb0MsU0FBUyxHQUFHcEMsRUFBRXZELElBQUl3RCxJQUFLNHhCLE1BQU10MkIsRUFBRTBFLEVBQUVpVSxVQUFVLENBQUNtRSxjQUFjclksRUFBRXFZLGNBQWNrdUIsZ0JBQWdCLEtBQUsvUSxlQUFleDFCLEVBQUV3MUIsZ0JBQXVCdjFCLEVBQ3JMLFNBQVN1bUMsR0FBR3htQyxFQUFFQyxFQUFFMUUsR0FBR21GLEtBQUsySyxJQUFJcEwsRUFBRVMsS0FBSzJYLGNBQWNyWSxFQUFFVSxLQUFLMGpDLGFBQWExakMsS0FBS2drQyxVQUFVaGtDLEtBQUtlLFFBQVFmLEtBQUs2bEMsZ0JBQWdCLEtBQUs3bEMsS0FBSzZqQyxlQUFlLEVBQUU3akMsS0FBSzg3QixlQUFlOTdCLEtBQUtFLFFBQVEsS0FBS0YsS0FBSzBYLFFBQVE3YyxFQUFFbUYsS0FBSytpQyxhQUFhLEtBQUsvaUMsS0FBS2lqQyxpQkFBaUIsRUFBRWpqQyxLQUFLdWEsV0FBV0YsR0FBRyxHQUFHcmEsS0FBS2dqQyxnQkFBZ0Izb0IsSUFBSSxHQUFHcmEsS0FBS2dhLGVBQWVoYSxLQUFLMmpDLGNBQWMzakMsS0FBSzI0QixpQkFBaUIzNEIsS0FBSzRaLGFBQWE1WixLQUFLOFosWUFBWTlaLEtBQUs2WixlQUFlN1osS0FBSzJaLGFBQWEsRUFBRTNaLEtBQUtpYSxjQUFjSSxHQUFHLEdBQUdyYSxLQUFLK2xDLGdDQUFnQyxLQUM3ZSxTQUFTQyxHQUFHMW1DLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUUsRUFBRXFELFVBQVVDLGFBQVEsSUFBU0QsVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSyxNQUFNLENBQUMyRCxTQUFTOEcsRUFBRzdNLElBQUksTUFBTWpCLEVBQUUsS0FBSyxHQUFHQSxFQUFFNEcsU0FBU3BDLEVBQUVxWSxjQUFjcFksRUFBRXUxQixlQUFlajZCLEdBQ3hLLFNBQVNvckMsR0FBRzNtQyxFQUFFQyxFQUFFMUUsRUFBRUMsR0FBRyxJQUFJd0csRUFBRS9CLEVBQUV3QixRQUFRWSxFQUFFcXhCLEtBQUt2eEIsRUFBRXd4QixHQUFHM3hCLEdBQUdoQyxFQUFFLEdBQUd6RSxFQUFFLENBQXFCMEUsRUFBRSxDQUFDLEdBQUd5VixHQUExQm5hLEVBQUVBLEVBQUVrNEIsbUJBQThCbDRCLEdBQUcsSUFBSUEsRUFBRThQLElBQUksTUFBTWxLLE1BQU1rQyxFQUFFLE1BQU0sSUFBSW5CLEVBQUUzRyxFQUFFLEVBQUUsQ0FBQyxPQUFPMkcsRUFBRW1KLEtBQUssS0FBSyxFQUFFbkosRUFBRUEsRUFBRWdTLFVBQVV0VCxRQUFRLE1BQU1YLEVBQUUsS0FBSyxFQUFFLEdBQUdxdUIsR0FBR3BzQixFQUFFTyxNQUFNLENBQUNQLEVBQUVBLEVBQUVnUyxVQUFVMmEsMENBQTBDLE1BQU01dUIsR0FBR2lDLEVBQUVBLEVBQUUwVCxhQUFhLE9BQU8xVCxHQUFHLE1BQU1mLE1BQU1rQyxFQUFFLE1BQU8sR0FBRyxJQUFJOUgsRUFBRThQLElBQUksQ0FBQyxJQUFJcEosRUFBRTFHLEVBQUVrSCxLQUFLLEdBQUc2ckIsR0FBR3JzQixHQUFHLENBQUMxRyxFQUFFbXpCLEdBQUduekIsRUFBRTBHLEVBQUVDLEdBQUcsTUFBTWxDLEdBQUd6RSxFQUFFMkcsT0FBTzNHLEVBQUV5eUIsR0FDclcsT0FEd1csT0FBTy90QixFQUFFVyxRQUFRWCxFQUFFVyxRQUFRckYsRUFBRTBFLEVBQUV1OEIsZUFBZWpoQyxHQUFFMEUsRUFBRTJ5QixHQUFHdndCLEVBQUVGLElBQUs0d0IsUUFBUSxDQUFDc00sUUFBUXIvQixHQUF1QixRQUFwQnhFLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxLQUMxZXlFLEVBQUUreUIsU0FBU3gzQixHQUFHeTNCLEdBQUdqeEIsRUFBRS9CLEdBQUcyekIsR0FBRzV4QixFQUFFRyxFQUFFRSxHQUFVRixFQUFFLFNBQVN5a0MsR0FBRzVtQyxHQUFlLEtBQVpBLEVBQUVBLEVBQUV5QixTQUFjMFUsTUFBTSxPQUFPLEtBQUssT0FBT25XLEVBQUVtVyxNQUFNOUssS0FBSyxLQUFLLEVBQTJCLFFBQVEsT0FBT3JMLEVBQUVtVyxNQUFNakMsV0FBVyxTQUFTMnlCLEdBQUc3bUMsRUFBRUMsR0FBcUIsR0FBRyxRQUFyQkQsRUFBRUEsRUFBRStWLGdCQUEyQixPQUFPL1YsRUFBRWdXLFdBQVcsQ0FBQyxJQUFJemEsRUFBRXlFLEVBQUU2OEIsVUFBVTc4QixFQUFFNjhCLFVBQVUsSUFBSXRoQyxHQUFHQSxFQUFFMEUsRUFBRTFFLEVBQUUwRSxHQUFHLFNBQVM2bUMsR0FBRzltQyxFQUFFQyxHQUFHNG1DLEdBQUc3bUMsRUFBRUMsSUFBSUQsRUFBRUEsRUFBRTJWLFlBQVlreEIsR0FBRzdtQyxFQUFFQyxHQUN4VixTQUFTOG1DLEdBQUcvbUMsRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRSxNQUFNRCxHQUFHLE1BQU1BLEVBQUV5ckMsa0JBQWtCenJDLEVBQUV5ckMsaUJBQWlCQyxnQkFBZ0IsS0FBaUssR0FBNUoxckMsRUFBRSxJQUFJaXJDLEdBQUd4bUMsRUFBRUMsRUFBRSxNQUFNMUUsSUFBRyxJQUFLQSxFQUFFNmMsU0FBU25ZLEVBQUU4MkIsR0FBRyxFQUFFLEtBQUssS0FBSyxJQUFJOTJCLEVBQUUsRUFBRSxJQUFJQSxFQUFFLEVBQUUsR0FBRzFFLEVBQUVrRyxRQUFReEIsRUFBRUEsRUFBRWlVLFVBQVUzWSxFQUFFNDJCLEdBQUdseUIsR0FBR0QsRUFBRWlzQixJQUFJMXdCLEVBQUVrRyxRQUFRa3FCLEdBQUcsSUFBSTNyQixFQUFFaVAsU0FBU2pQLEVBQUU0VCxXQUFXNVQsR0FBTXhFLEVBQUUsSUFBSXdFLEVBQUUsRUFBRUEsRUFBRXhFLEVBQUVzRCxPQUFPa0IsSUFBSSxDQUFRLElBQUlnQyxHQUFYL0IsRUFBRXpFLEVBQUV3RSxJQUFXbTVCLFlBQVluM0IsRUFBRUEsRUFBRS9CLEVBQUVtNUIsU0FBUyxNQUFNNzlCLEVBQUVrckMsZ0NBQWdDbHJDLEVBQUVrckMsZ0NBQWdDLENBQUN4bUMsRUFBRStCLEdBQUd6RyxFQUFFa3JDLGdDQUFnQ3JqQyxLQUFLbkQsRUFBRStCLEdBQUd0QixLQUFLd21DLGNBQWMzckMsRUFDL1IsU0FBUzRyQyxHQUFHbm5DLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFaVAsVUFBVSxJQUFJalAsRUFBRWlQLFVBQVUsS0FBS2pQLEVBQUVpUCxXQUFXLElBQUlqUCxFQUFFaVAsVUFBVSxpQ0FBaUNqUCxFQUFFa1AsWUFFdlQsU0FBU2s0QixHQUFHcG5DLEVBQUVDLEVBQUUxRSxFQUFFQyxFQUFFd0csR0FBRyxJQUFJSyxFQUFFOUcsRUFBRTBsQyxvQkFBb0IsR0FBRzUrQixFQUFFLENBQUMsSUFBSUYsRUFBRUUsRUFBRTZrQyxjQUFjLEdBQUcsbUJBQW9CbGxDLEVBQUUsQ0FBQyxJQUFJRSxFQUFFRixFQUFFQSxFQUFFLFdBQVcsSUFBSWhDLEVBQUU0bUMsR0FBR3prQyxHQUFHRCxFQUFFN0csS0FBSzJFLElBQUkybUMsR0FBRzFtQyxFQUFFa0MsRUFBRW5DLEVBQUVnQyxPQUFPLENBQW1ELEdBQWxESyxFQUFFOUcsRUFBRTBsQyxvQkFEMUssU0FBWWpoQyxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUVpUCxTQUFTalAsRUFBRW0yQixnQkFBZ0JuMkIsRUFBRTRPLFdBQVcsT0FBYSxJQUFJM08sRUFBRWdQLFdBQVdoUCxFQUFFb25DLGFBQWEscUJBQXdCcG5DLEVBQUUsSUFBSSxJQUFJMUUsRUFBRUEsRUFBRXlFLEVBQUVnUCxXQUFXaFAsRUFBRTZPLFlBQVl0VCxHQUFHLE9BQU8sSUFBSXdyQyxHQUFHL21DLEVBQUUsRUFBRUMsRUFBRSxDQUFDbVksU0FBUSxRQUFJLEdBQzNCa3ZCLENBQUcvckMsRUFBRUMsR0FBRzJHLEVBQUVFLEVBQUU2a0MsY0FBaUIsbUJBQW9CbGxDLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFQSxFQUFFLFdBQVcsSUFBSWhDLEVBQUU0bUMsR0FBR3prQyxHQUFHRixFQUFFNUcsS0FBSzJFLElBQUl5a0MsSUFBRyxXQUFXa0MsR0FBRzFtQyxFQUFFa0MsRUFBRW5DLEVBQUVnQyxNQUFLLE9BQU80a0MsR0FBR3prQyxHQUdsRyxTQUFTb2xDLEdBQUd2bkMsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRSxFQUFFc0QsVUFBVUMsYUFBUSxJQUFTRCxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLElBQUlzb0MsR0FBR2xuQyxHQUFHLE1BQU1rQixNQUFNa0MsRUFBRSxNQUFNLE9BQU9xakMsR0FBRzFtQyxFQUFFQyxFQUFFLEtBQUsxRSxHQTFCdFcrbUMsR0FBRyxTQUFTdGlDLEVBQUVDLEVBQUUxRSxHQUFHLElBQUlDLEVBQUV5RSxFQUFFNHhCLE1BQU0sR0FBRyxPQUFPN3hCLEVBQUUsR0FBR0EsRUFBRXkyQixnQkFBZ0J4MkIsRUFBRWczQixjQUFjcDBCLEdBQUVwQixRQUFRcXdCLElBQUcsTUFBUSxJQUFHLElBQUt2MkIsRUFBRUMsR0FBb0MsQ0FBTyxPQUFOczJCLElBQUcsRUFBVTd4QixFQUFFb0wsS0FBSyxLQUFLLEVBQUVreEIsR0FBR3Q4QixHQUFHbzNCLEtBQUssTUFBTSxLQUFLLEVBQUVmLEdBQUdyMkIsR0FBRyxNQUFNLEtBQUssRUFBRXF1QixHQUFHcnVCLEVBQUV3QyxPQUFPbXNCLEdBQUczdUIsR0FBRyxNQUFNLEtBQUssRUFBRWkyQixHQUFHajJCLEVBQUVBLEVBQUVpVSxVQUFVbUUsZUFBZSxNQUFNLEtBQUssR0FBRzdjLEVBQUV5RSxFQUFFdzJCLGNBQWN0NkIsTUFBTSxJQUFJNkYsRUFBRS9CLEVBQUV3QyxLQUFLNkMsU0FBUzNELEdBQUV1dkIsR0FBR2x2QixFQUFFaUQsZUFBZWpELEVBQUVpRCxjQUFjekosRUFBRSxNQUFNLEtBQUssR0FBRyxHQUFHLE9BQU95RSxFQUFFOFYsY0FBZSxPQUFHLElBQUt4YSxFQUFFMEUsRUFBRWtXLE1BQU1zYixZQUFtQnFMLEdBQUc5OEIsRUFBRUMsRUFBRTFFLElBQUdvRyxHQUFFNkIsR0FBWSxFQUFWQSxHQUFFL0IsU0FBOEIsUUFBbkJ4QixFQUFFdTdCLEdBQUd4N0IsRUFBRUMsRUFBRTFFLElBQy9lMEUsRUFBRW1XLFFBQVEsTUFBS3pVLEdBQUU2QixHQUFZLEVBQVZBLEdBQUUvQixTQUFXLE1BQU0sS0FBSyxHQUEwQixHQUF2QmpHLEVBQUUsSUFBS0QsRUFBRTBFLEVBQUV3eEIsWUFBZSxJQUFhLEdBQVJ6eEIsRUFBRTZWLE9BQVUsQ0FBQyxHQUFHcmEsRUFBRSxPQUFPc2lDLEdBQUc5OUIsRUFBRUMsRUFBRTFFLEdBQUcwRSxFQUFFNFYsT0FBTyxHQUErRixHQUExRSxRQUFsQjdULEVBQUUvQixFQUFFOFYsaUJBQXlCL1QsRUFBRXk3QixVQUFVLEtBQUt6N0IsRUFBRTQ3QixLQUFLLEtBQUs1N0IsRUFBRWd6QixXQUFXLE1BQU1yekIsR0FBRTZCLEdBQUVBLEdBQUUvQixTQUFZakcsRUFBRSxNQUFXLE9BQU8sS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU95RSxFQUFFNHhCLE1BQU0sRUFBRWdLLEdBQUc3N0IsRUFBRUMsRUFBRTFFLEdBQUcsT0FBT2lnQyxHQUFHeDdCLEVBQUVDLEVBQUUxRSxHQUQzTHUyQixHQUFHLElBQWEsTUFBUjl4QixFQUFFNlYsWUFDeUxpYyxJQUFHLEVBQWEsT0FBVjd4QixFQUFFNHhCLE1BQU0sRUFBUzV4QixFQUFFb0wsS0FBSyxLQUFLLEVBQStJLEdBQTdJN1AsRUFBRXlFLEVBQUV3QyxLQUFLLE9BQU96QyxJQUFJQSxFQUFFMlYsVUFBVSxLQUFLMVYsRUFBRTBWLFVBQVUsS0FBSzFWLEVBQUU0VixPQUFPLEdBQUc3VixFQUFFQyxFQUFFZzNCLGFBQWFqMUIsRUFBRWtzQixHQUFHanVCLEVBQUUyQyxHQUFFbkIsU0FBU2l3QixHQUFHenhCLEVBQUUxRSxHQUFHeUcsRUFBRWcyQixHQUFHLEtBQUsvM0IsRUFBRXpFLEVBQUV3RSxFQUFFZ0MsRUFBRXpHLEdBQUcwRSxFQUFFNFYsT0FBTyxFQUFLLHFCQUNyZTdULEVBRHFlLGNBQ3JlQSxLQUFHLE9BQU9BLEdBQUcsbUJBQW9CQSxFQUFFaEQsYUFBUSxJQUFTZ0QsRUFBRVEsU0FBUyxDQUFpRCxHQUFoRHZDLEVBQUVvTCxJQUFJLEVBQUVwTCxFQUFFOFYsY0FBYyxLQUFLOVYsRUFBRW15QixZQUFZLEtBQVE5RCxHQUFHOXlCLEdBQUcsQ0FBQyxJQUFJNkcsR0FBRSxFQUFHdXNCLEdBQUczdUIsUUFBUW9DLEdBQUUsRUFBR3BDLEVBQUU4VixjQUFjLE9BQU8vVCxFQUFFaXlCLFlBQU8sSUFBU2p5QixFQUFFaXlCLE1BQU1qeUIsRUFBRWl5QixNQUFNLEtBQUs5QixHQUFHbHlCLEdBQUcsSUFBSWtDLEVBQUUzRyxFQUFFODRCLHlCQUF5QixtQkFBb0JueUIsR0FBR294QixHQUFHdHpCLEVBQUV6RSxFQUFFMkcsRUFBRW5DLEdBQUdnQyxFQUFFbEIsUUFBUTB5QixHQUFHdnpCLEVBQUVpVSxVQUFVbFMsRUFBRUEsRUFBRXl4QixnQkFBZ0J4ekIsRUFBRW8wQixHQUFHcDBCLEVBQUV6RSxFQUFFd0UsRUFBRXpFLEdBQUcwRSxFQUFFbzhCLEdBQUcsS0FBS3A4QixFQUFFekUsR0FBRSxFQUFHNkcsRUFBRTlHLFFBQVEwRSxFQUFFb0wsSUFBSSxFQUFFaXdCLEdBQUcsS0FBS3I3QixFQUFFK0IsRUFBRXpHLEdBQUcwRSxFQUFFQSxFQUFFa1csTUFBTSxPQUFPbFcsRUFBRSxLQUFLLEdBQUcrQixFQUFFL0IsRUFBRXExQixZQUFZdDFCLEVBQUUsQ0FDaFgsT0FEaVgsT0FBT0EsSUFBSUEsRUFBRTJWLFVBQVUsS0FBSzFWLEVBQUUwVixVQUFVLEtBQUsxVixFQUFFNFYsT0FBTyxHQUNuZjdWLEVBQUVDLEVBQUVnM0IsYUFBdUJqMUIsR0FBVkssRUFBRUwsRUFBRThELE9BQVU5RCxFQUFFNkQsVUFBVTVGLEVBQUV3QyxLQUFLVCxFQUFFSyxFQUFFcEMsRUFBRW9MLElBT3hELFNBQVlyTCxHQUFHLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU8wN0IsR0FBRzE3QixHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQVNBLEVBQVksQ0FBYyxJQUFiQSxFQUFFQSxFQUFFd0MsWUFBZ0JvSCxFQUFHLE9BQU8sR0FBRyxHQUFHNUosSUFBSStKLEVBQUcsT0FBTyxHQUFHLE9BQU8sRUFQbEZ5OUIsQ0FBR3hsQyxHQUFHaEMsRUFBRWl4QixHQUFHanZCLEVBQUVoQyxHQUFVcUMsR0FBRyxLQUFLLEVBQUVwQyxFQUFFMjdCLEdBQUcsS0FBSzM3QixFQUFFK0IsRUFBRWhDLEVBQUV6RSxHQUFHLE1BQU15RSxFQUFFLEtBQUssRUFBRUMsRUFBRWc4QixHQUFHLEtBQUtoOEIsRUFBRStCLEVBQUVoQyxFQUFFekUsR0FBRyxNQUFNeUUsRUFBRSxLQUFLLEdBQUdDLEVBQUVzN0IsR0FBRyxLQUFLdDdCLEVBQUUrQixFQUFFaEMsRUFBRXpFLEdBQUcsTUFBTXlFLEVBQUUsS0FBSyxHQUFHQyxFQUFFdzdCLEdBQUcsS0FBS3g3QixFQUFFK0IsRUFBRWl2QixHQUFHanZCLEVBQUVTLEtBQUt6QyxHQUFHeEUsRUFBRUQsR0FBRyxNQUFNeUUsRUFBRSxNQUFNbUIsTUFBTWtDLEVBQUUsSUFBSXJCLEVBQUUsS0FBTSxPQUFPL0IsRUFBRSxLQUFLLEVBQUUsT0FBT3pFLEVBQUV5RSxFQUFFd0MsS0FBS1QsRUFBRS9CLEVBQUVnM0IsYUFBMkMyRSxHQUFHNTdCLEVBQUVDLEVBQUV6RSxFQUFyQ3dHLEVBQUUvQixFQUFFcTFCLGNBQWM5NUIsRUFBRXdHLEVBQUVpdkIsR0FBR3oxQixFQUFFd0csR0FBY3pHLEdBQUcsS0FBSyxFQUFFLE9BQU9DLEVBQUV5RSxFQUFFd0MsS0FBS1QsRUFBRS9CLEVBQUVnM0IsYUFBMkNnRixHQUFHajhCLEVBQUVDLEVBQUV6RSxFQUFyQ3dHLEVBQUUvQixFQUFFcTFCLGNBQWM5NUIsRUFBRXdHLEVBQUVpdkIsR0FBR3oxQixFQUFFd0csR0FBY3pHLEdBQUcsS0FBSyxFQUF3QixHQUF0QmdoQyxHQUFHdDhCLEdBQUd6RSxFQUFFeUUsRUFBRW15QixZQUFlLE9BQU9weUIsR0FBRyxPQUFPeEUsRUFBRSxNQUFNMkYsTUFBTWtDLEVBQUUsTUFDM1ksR0FBOUc3SCxFQUFFeUUsRUFBRWczQixhQUErQmoxQixFQUFFLFFBQXBCQSxFQUFFL0IsRUFBRThWLGVBQXlCL1QsRUFBRXE5QixRQUFRLEtBQUsxTSxHQUFHM3lCLEVBQUVDLEdBQUdrekIsR0FBR2x6QixFQUFFekUsRUFBRSxLQUFLRCxJQUFHQyxFQUFFeUUsRUFBRThWLGNBQWNzcEIsV0FBZXI5QixFQUFFcTFCLEtBQUtwM0IsRUFBRXU3QixHQUFHeDdCLEVBQUVDLEVBQUUxRSxPQUFPLENBQXVGLElBQXJFOEcsR0FBakJMLEVBQUUvQixFQUFFaVUsV0FBaUJrRSxXQUFRd2UsR0FBR3ZKLEdBQUdwdEIsRUFBRWlVLFVBQVVtRSxjQUFjekosWUFBWStuQixHQUFHMTJCLEVBQUVvQyxFQUFFdzBCLElBQUcsR0FBTXgwQixFQUFFLENBQXFDLEdBQUcsT0FBdkNyQyxFQUFFZ0MsRUFBRXlrQyxpQ0FBMkMsSUFBSXprQyxFQUFFLEVBQUVBLEVBQUVoQyxFQUFFbEIsT0FBT2tELEdBQUcsR0FBRUssRUFBRXJDLEVBQUVnQyxJQUFLdzFCLDhCQUE4QngzQixFQUFFZ0MsRUFBRSxHQUFHczFCLEdBQUdsMEIsS0FBS2YsR0FBb0IsSUFBakI5RyxFQUFFcTZCLEdBQUczMUIsRUFBRSxLQUFLekUsRUFBRUQsR0FBTzBFLEVBQUVrVyxNQUFNNWEsRUFBRUEsR0FBR0EsRUFBRXNhLE9BQWUsRUFBVHRhLEVBQUVzYSxNQUFTLEtBQUt0YSxFQUFFQSxFQUFFNmEsYUFBYWtsQixHQUFHdDdCLEVBQUVDLEVBQUV6RSxFQUFFRCxHQUFHODdCLEtBQUtwM0IsRUFBRUEsRUFBRWtXLE1BQU0sT0FBT2xXLEVBQUUsS0FBSyxFQUFFLE9BQU9xMkIsR0FBR3IyQixHQUFHLE9BQU9ELEdBQ25mazNCLEdBQUdqM0IsR0FBR3pFLEVBQUV5RSxFQUFFd0MsS0FBS1QsRUFBRS9CLEVBQUVnM0IsYUFBYTUwQixFQUFFLE9BQU9yQyxFQUFFQSxFQUFFeTJCLGNBQWMsS0FBS3QwQixFQUFFSCxFQUFFSSxTQUFTMHFCLEdBQUd0eEIsRUFBRXdHLEdBQUdHLEVBQUUsS0FBSyxPQUFPRSxHQUFHeXFCLEdBQUd0eEIsRUFBRTZHLEtBQUtwQyxFQUFFNFYsT0FBTyxJQUFJbW1CLEdBQUdoOEIsRUFBRUMsR0FBR3E3QixHQUFHdDdCLEVBQUVDLEVBQUVrQyxFQUFFNUcsR0FBRzBFLEVBQUVrVyxNQUFNLEtBQUssRUFBRSxPQUFPLE9BQU9uVyxHQUFHazNCLEdBQUdqM0IsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPNjhCLEdBQUc5OEIsRUFBRUMsRUFBRTFFLEdBQUcsS0FBSyxFQUFFLE9BQU8yNkIsR0FBR2oyQixFQUFFQSxFQUFFaVUsVUFBVW1FLGVBQWU3YyxFQUFFeUUsRUFBRWczQixhQUFhLE9BQU9qM0IsRUFBRUMsRUFBRWtXLE1BQU13ZixHQUFHMTFCLEVBQUUsS0FBS3pFLEVBQUVELEdBQUcrL0IsR0FBR3Q3QixFQUFFQyxFQUFFekUsRUFBRUQsR0FBRzBFLEVBQUVrVyxNQUFNLEtBQUssR0FBRyxPQUFPM2EsRUFBRXlFLEVBQUV3QyxLQUFLVCxFQUFFL0IsRUFBRWczQixhQUEyQ3NFLEdBQUd2N0IsRUFBRUMsRUFBRXpFLEVBQXJDd0csRUFBRS9CLEVBQUVxMUIsY0FBYzk1QixFQUFFd0csRUFBRWl2QixHQUFHejFCLEVBQUV3RyxHQUFjekcsR0FBRyxLQUFLLEVBQUUsT0FBTysvQixHQUFHdDdCLEVBQUVDLEVBQUVBLEVBQUVnM0IsYUFBYTE3QixHQUFHMEUsRUFBRWtXLE1BQU0sS0FBSyxFQUN0YyxLQUFLLEdBQUcsT0FBT21sQixHQUFHdDdCLEVBQUVDLEVBQUVBLEVBQUVnM0IsYUFBYTcwQixTQUFTN0csR0FBRzBFLEVBQUVrVyxNQUFNLEtBQUssR0FBR25XLEVBQUUsQ0FBQ3hFLEVBQUV5RSxFQUFFd0MsS0FBSzZDLFNBQVN0RCxFQUFFL0IsRUFBRWczQixhQUFhOTBCLEVBQUVsQyxFQUFFdzJCLGNBQWNwMEIsRUFBRUwsRUFBRTdGLE1BQU0sSUFBSStGLEVBQUVqQyxFQUFFd0MsS0FBSzZDLFNBQWlELEdBQXhDM0QsR0FBRXV2QixHQUFHaHZCLEVBQUUrQyxlQUFlL0MsRUFBRStDLGNBQWM1QyxFQUFLLE9BQU9GLEVBQUUsR0FBR0QsRUFBRUMsRUFBRWhHLE1BQTBHLEtBQXBHa0csRUFBRTBtQixHQUFHN21CLEVBQUVHLEdBQUcsRUFBd0YsR0FBckYsbUJBQW9CN0csRUFBRXdKLHNCQUFzQnhKLEVBQUV3SixzQkFBc0I5QyxFQUFFRyxHQUFHLGNBQXFCLEdBQUdGLEVBQUVDLFdBQVdKLEVBQUVJLFdBQVdTLEdBQUVwQixRQUFRLENBQUN4QixFQUFFdTdCLEdBQUd4N0IsRUFBRUMsRUFBRTFFLEdBQUcsTUFBTXlFLFFBQVEsSUFBYyxRQUFWa0MsRUFBRWpDLEVBQUVrVyxTQUFpQmpVLEVBQUUwVCxPQUFPM1YsR0FBRyxPQUFPaUMsR0FBRyxDQUFDLElBQUlELEVBQUVDLEVBQUV5dkIsYUFBYSxHQUFHLE9BQU8xdkIsRUFBRSxDQUFDRSxFQUFFRCxFQUFFaVUsTUFBTSxJQUFJLElBQUloYixFQUN0ZjhHLEVBQUUydkIsYUFBYSxPQUFPejJCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFeUYsVUFBVXBGLEdBQUcsSUFBS0wsRUFBRTYyQixhQUFhM3ZCLEdBQUcsQ0FBQyxJQUFJSCxFQUFFbUosT0FBTWxRLEVBQUV5M0IsSUFBSSxFQUFFcjNCLEdBQUdBLElBQUs4UCxJQUFJLEVBQUU0bkIsR0FBRy93QixFQUFFL0csSUFBSStHLEVBQUUydkIsT0FBT3QyQixFQUFnQixRQUFkSixFQUFFK0csRUFBRXlULGFBQXFCeGEsRUFBRTAyQixPQUFPdDJCLEdBQUdpMkIsR0FBR3R2QixFQUFFMFQsT0FBT3JhLEdBQUcwRyxFQUFFNHZCLE9BQU90MkIsRUFBRSxNQUFNSixFQUFFQSxFQUFFbUksV0FBV25CLEVBQUUsS0FBS0QsRUFBRW1KLEtBQUluSixFQUFFTyxPQUFPeEMsRUFBRXdDLEtBQUssS0FBYVAsRUFBRWlVLE1BQU0sR0FBRyxPQUFPaFUsRUFBRUEsRUFBRXlULE9BQU8xVCxPQUFPLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsR0FBRyxDQUFDLEdBQUdBLElBQUlsQyxFQUFFLENBQUNrQyxFQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmRCxFQUFFQyxFQUFFaVUsU0FBb0IsQ0FBQ2xVLEVBQUUwVCxPQUFPelQsRUFBRXlULE9BQU96VCxFQUFFRCxFQUFFLE1BQU1DLEVBQUVBLEVBQUV5VCxPQUFPMVQsRUFBRUMsRUFBRW01QixHQUFHdDdCLEVBQUVDLEVBQUUrQixFQUFFSSxTQUFTN0csR0FBRzBFLEVBQUVBLEVBQUVrVyxNQUFNLE9BQU9sVyxFQUFFLEtBQUssRUFBRSxPQUFPK0IsRUFBRS9CLEVBQUV3QyxLQUFzQmpILEdBQWpCNkcsRUFBRXBDLEVBQUVnM0IsY0FBaUI3MEIsU0FBU3N2QixHQUFHenhCLEVBQUUxRSxHQUNuZEMsRUFBRUEsRUFEb2R3RyxFQUFFK3ZCLEdBQUcvdkIsRUFDcGZLLEVBQUVvbEMsd0JBQThCeG5DLEVBQUU0VixPQUFPLEVBQUV5bEIsR0FBR3Q3QixFQUFFQyxFQUFFekUsRUFBRUQsR0FBRzBFLEVBQUVrVyxNQUFNLEtBQUssR0FBRyxPQUFnQjlULEVBQUU0dUIsR0FBWGp2QixFQUFFL0IsRUFBRXdDLEtBQVl4QyxFQUFFZzNCLGNBQTZCd0UsR0FBR3o3QixFQUFFQyxFQUFFK0IsRUFBdEJLLEVBQUU0dUIsR0FBR2p2QixFQUFFUyxLQUFLSixHQUFjN0csRUFBRUQsR0FBRyxLQUFLLEdBQUcsT0FBT29nQyxHQUFHMzdCLEVBQUVDLEVBQUVBLEVBQUV3QyxLQUFLeEMsRUFBRWczQixhQUFhejdCLEVBQUVELEdBQUcsS0FBSyxHQUFHLE9BQU9DLEVBQUV5RSxFQUFFd0MsS0FBS1QsRUFBRS9CLEVBQUVnM0IsYUFBYWoxQixFQUFFL0IsRUFBRXExQixjQUFjOTVCLEVBQUV3RyxFQUFFaXZCLEdBQUd6MUIsRUFBRXdHLEdBQUcsT0FBT2hDLElBQUlBLEVBQUUyVixVQUFVLEtBQUsxVixFQUFFMFYsVUFBVSxLQUFLMVYsRUFBRTRWLE9BQU8sR0FBRzVWLEVBQUVvTCxJQUFJLEVBQUVpakIsR0FBRzl5QixJQUFJd0UsR0FBRSxFQUFHNHVCLEdBQUczdUIsSUFBSUQsR0FBRSxFQUFHMHhCLEdBQUd6eEIsRUFBRTFFLEdBQUd3NEIsR0FBRzl6QixFQUFFekUsRUFBRXdHLEdBQUdxeUIsR0FBR3AwQixFQUFFekUsRUFBRXdHLEVBQUV6RyxHQUFHOGdDLEdBQUcsS0FBS3A4QixFQUFFekUsR0FBRSxFQUFHd0UsRUFBRXpFLEdBQUcsS0FBSyxHQUFHLE9BQU91aUMsR0FBRzk5QixFQUFFQyxFQUFFMUUsR0FBRyxLQUFLLEdBQW9CLEtBQUssR0FBRyxPQUFPc2dDLEdBQUc3N0IsRUFBRUMsRUFBRTFFLEdBQUcsTUFBTTRGLE1BQU1rQyxFQUFFLElBQUlwRCxFQUFFb0wsT0FhL2UwN0IsR0FBR2pxQyxVQUFVa0MsT0FBTyxTQUFTZ0IsR0FBRzJtQyxHQUFHM21DLEVBQUVVLEtBQUt3bUMsY0FBYyxLQUFLLE9BQU9ILEdBQUdqcUMsVUFBVTRxQyxRQUFRLFdBQVcsSUFBSTFuQyxFQUFFVSxLQUFLd21DLGNBQWNqbkMsRUFBRUQsRUFBRXFZLGNBQWNzdUIsR0FBRyxLQUFLM21DLEVBQUUsTUFBSyxXQUFXQyxFQUFFZ3NCLElBQUksU0FFd0oxVixHQUFHLFNBQVN2VyxHQUFNLEtBQUtBLEVBQUVxTCxNQUFnQnVvQixHQUFHNXpCLEVBQUUsRUFBVjB6QixNQUFlb1QsR0FBRzltQyxFQUFFLEtBQUt3VyxHQUFHLFNBQVN4VyxHQUFNLEtBQUtBLEVBQUVxTCxNQUFnQnVvQixHQUFHNXpCLEVBQUUsU0FBVjB6QixNQUFzQm9ULEdBQUc5bUMsRUFBRSxZQUNuY3lXLEdBQUcsU0FBU3pXLEdBQUcsR0FBRyxLQUFLQSxFQUFFcUwsSUFBSSxDQUFDLElBQUlwTCxFQUFFeXpCLEtBQUtuNEIsRUFBRW80QixHQUFHM3pCLEdBQUc0ekIsR0FBRzV6QixFQUFFekUsRUFBRTBFLEdBQUc2bUMsR0FBRzltQyxFQUFFekUsS0FBS21iLEdBQUcsU0FBUzFXLEVBQUVDLEdBQUcsT0FBT0EsS0FDN0Y0VCxHQUFHLFNBQVM3VCxFQUFFQyxFQUFFMUUsR0FBRyxPQUFPMEUsR0FBRyxJQUFLLFFBQXlCLEdBQWpCZ04sR0FBR2pOLEVBQUV6RSxHQUFHMEUsRUFBRTFFLEVBQUVFLEtBQVEsVUFBVUYsRUFBRWtILE1BQU0sTUFBTXhDLEVBQUUsQ0FBQyxJQUFJMUUsRUFBRXlFLEVBQUV6RSxFQUFFcVksWUFBWXJZLEVBQUVBLEVBQUVxWSxXQUFzRixJQUEzRXJZLEVBQUVBLEVBQUVvc0MsaUJBQWlCLGNBQWNDLEtBQUtDLFVBQVUsR0FBRzVuQyxHQUFHLG1CQUF1QkEsRUFBRSxFQUFFQSxFQUFFMUUsRUFBRXVELE9BQU9tQixJQUFJLENBQUMsSUFBSXpFLEVBQUVELEVBQUUwRSxHQUFHLEdBQUd6RSxJQUFJd0UsR0FBR3hFLEVBQUVzc0MsT0FBTzluQyxFQUFFOG5DLEtBQUssQ0FBQyxJQUFJOWxDLEVBQUVtUyxHQUFHM1ksR0FBRyxJQUFJd0csRUFBRSxNQUFNYixNQUFNa0MsRUFBRSxLQUFLOEksRUFBRzNRLEdBQUd5UixHQUFHelIsRUFBRXdHLEtBQUssTUFBTSxJQUFLLFdBQVcrTCxHQUFHL04sRUFBRXpFLEdBQUcsTUFBTSxJQUFLLFNBQW1CLE9BQVYwRSxFQUFFMUUsRUFBRVksUUFBZW9SLEdBQUd2TixJQUFJekUsRUFBRTJpQyxTQUFTaitCLEdBQUUsS0FBTXFVLEdBQUdrd0IsR0FDOVpqd0IsR0FBRyxTQUFTdlUsRUFBRUMsRUFBRTFFLEVBQUVDLEVBQUV3RyxHQUFHLElBQUlLLEVBQUV1L0IsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT2hSLEdBQUcsR0FBRzV3QixFQUFFdEQsS0FBSyxLQUFLdUQsRUFBRTFFLEVBQUVDLEVBQUV3RyxJQUFuQyxRQUFtRCxLQUFKNC9CLEdBQUV2L0IsS0FBVWdnQyxLQUFLdlIsUUFBUXRjLEdBQUcsV0FBVyxJQUFPLEdBQUZvdEIsTUFoRC9ILFdBQWMsR0FBRyxPQUFPaUIsR0FBRyxDQUFDLElBQUk3aUMsRUFBRTZpQyxHQUFHQSxHQUFHLEtBQUs3aUMsRUFBRTdCLFNBQVEsU0FBUzZCLEdBQUdBLEVBQUVzYSxjQUFjLEdBQUd0YSxFQUFFcWEsYUFBYW1wQixHQUFHeGpDLEVBQUVpRCxTQUFPNnRCLEtBZ0RzQmlYLEdBQUtqRSxPQUFPcnZCLEdBQUcsU0FBU3pVLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUVxbUMsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBTzVoQyxFQUFFQyxHQUFiLFFBQTRCLEtBQUoyaEMsR0FBRXJtQyxLQUFVOG1DLEtBQUt2UixRQUErSSxJQUFJa1gsR0FBRyxDQUFDQyxPQUFPLENBQUNoMEIsR0FBRytULEdBQUc3VCxHQUFHQyxHQUFHQyxHQUFHeXZCLEdBQUcsQ0FBQ3JpQyxTQUFRLEtBQU15bUMsR0FBRyxDQUFDQyx3QkFBd0Jud0IsR0FBR293QixXQUFXLEVBQUV6aEMsUUFBUSxTQUFTMGhDLG9CQUFvQixhQUN2ZUMsR0FBRyxDQUFDRixXQUFXRixHQUFHRSxXQUFXemhDLFFBQVF1aEMsR0FBR3ZoQyxRQUFRMGhDLG9CQUFvQkgsR0FBR0csb0JBQW9CRSxlQUFlTCxHQUFHSyxlQUFlQyxrQkFBa0IsS0FBS0MsNEJBQTRCLEtBQUtDLDRCQUE0QixLQUFLQyxjQUFjLEtBQUtDLHdCQUF3QixLQUFLQyx3QkFBd0IsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCNS9CLEVBQUduRix1QkFBdUJnbEMsd0JBQXdCLFNBQVNqcEMsR0FBVyxPQUFPLFFBQWZBLEVBQUVrVyxHQUFHbFcsSUFBbUIsS0FBS0EsRUFBRWtVLFdBQVdpMEIsd0JBQXdCRCxHQUFHQyx5QkFSL0ksV0FBYyxPQUFPLE1BUzdXZSw0QkFBNEIsS0FBS0MsZ0JBQWdCLEtBQUtDLGFBQWEsS0FBS0Msa0JBQWtCLEtBQUtDLGdCQUFnQixNQUFNLEdBQUcsb0JBQXFCemlDLCtCQUErQixDQUFDLElBQUkwaUMsR0FBRzFpQywrQkFBK0IsSUFBSTBpQyxHQUFHQyxZQUFZRCxHQUFHRSxjQUFjLElBQUkxYSxHQUFHd2EsR0FBR0csT0FBT3BCLElBQUl0WixHQUFHdWEsR0FBRyxNQUFNdnBDLEtBQUtoRixFQUFRNkosbURBQW1EbWpDLEdBQUdodEMsRUFBUTJ1QyxhQUFhcEMsR0FDblh2c0MsRUFBUTR1QyxZQUFZLFNBQVM1cEMsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsSUFBSUEsRUFBRWlQLFNBQVMsT0FBT2pQLEVBQUUsSUFBSUMsRUFBRUQsRUFBRXl6QixnQkFBZ0IsUUFBRyxJQUFTeHpCLEVBQUUsQ0FBQyxHQUFHLG1CQUFvQkQsRUFBRWhCLE9BQU8sTUFBTW1DLE1BQU1rQyxFQUFFLE1BQU0sTUFBTWxDLE1BQU1rQyxFQUFFLElBQUl6SCxPQUFPeUMsS0FBSzJCLEtBQTBDLE9BQTVCQSxFQUFFLFFBQVZBLEVBQUVrVyxHQUFHalcsSUFBYyxLQUFLRCxFQUFFa1UsV0FBb0JsWixFQUFRNnVDLFVBQVUsU0FBUzdwQyxFQUFFQyxHQUFHLElBQUkxRSxFQUFFcW1DLEdBQUUsR0FBRyxJQUFPLEdBQUZybUMsR0FBTSxPQUFPeUUsRUFBRUMsR0FBRzJoQyxJQUFHLEVBQUUsSUFBSSxHQUFHNWhDLEVBQUUsT0FBTzR3QixHQUFHLEdBQUc1d0IsRUFBRXRELEtBQUssS0FBS3VELElBQWxDLFFBQThDMmhDLEdBQUVybUMsRUFBRXUxQixPQUFPOTFCLEVBQVFvZCxRQUFRLFNBQVNwWSxFQUFFQyxFQUFFMUUsR0FBRyxJQUFJNHJDLEdBQUdsbkMsR0FBRyxNQUFNa0IsTUFBTWtDLEVBQUUsTUFBTSxPQUFPK2pDLEdBQUcsS0FBS3BuQyxFQUFFQyxHQUFFLEVBQUcxRSxJQUNuZFAsRUFBUWdFLE9BQU8sU0FBU2dCLEVBQUVDLEVBQUUxRSxHQUFHLElBQUk0ckMsR0FBR2xuQyxHQUFHLE1BQU1rQixNQUFNa0MsRUFBRSxNQUFNLE9BQU8rakMsR0FBRyxLQUFLcG5DLEVBQUVDLEdBQUUsRUFBRzFFLElBQUlQLEVBQVE4dUMsdUJBQXVCLFNBQVM5cEMsR0FBRyxJQUFJbW5DLEdBQUdubkMsR0FBRyxNQUFNbUIsTUFBTWtDLEVBQUUsS0FBSyxRQUFPckQsRUFBRWloQyxzQkFBcUJ3RCxJQUFHLFdBQVcyQyxHQUFHLEtBQUssS0FBS3BuQyxHQUFFLEdBQUcsV0FBV0EsRUFBRWloQyxvQkFBb0IsS0FBS2poQyxFQUFFaXNCLElBQUksWUFBUyxJQUFRanhCLEVBQVErdUMsd0JBQXdCdkYsR0FBR3hwQyxFQUFRZ3ZDLHNCQUFzQixTQUFTaHFDLEVBQUVDLEdBQUcsT0FBT3NuQyxHQUFHdm5DLEVBQUVDLEVBQUUsRUFBRXBCLFVBQVVDLGFBQVEsSUFBU0QsVUFBVSxHQUFHQSxVQUFVLEdBQUcsT0FDOWE3RCxFQUFRaXZDLG9DQUFvQyxTQUFTanFDLEVBQUVDLEVBQUUxRSxFQUFFQyxHQUFHLElBQUkyckMsR0FBRzVyQyxHQUFHLE1BQU00RixNQUFNa0MsRUFBRSxNQUFNLEdBQUcsTUFBTXJELFFBQUcsSUFBU0EsRUFBRXl6QixnQkFBZ0IsTUFBTXR5QixNQUFNa0MsRUFBRSxLQUFLLE9BQU8rakMsR0FBR3BuQyxFQUFFQyxFQUFFMUUsR0FBRSxFQUFHQyxJQUFJUixFQUFRMkwsUUFBUSxVLDZCQ3JTM0wxTCxFQUFPRCxRQUFVa0MsRUFBUSxJOzs7Ozs7OztPQ0tWbUYsRUFBRUYsRUFBRUQsRUFBRUQsRSw0TUFBRSxHQUFHLGdDQUFrQmlvQyxZQUFsQixjQUFrQkEsZUFBYSxtQkFBb0JBLFlBQVlsc0IsSUFBSSxDQUFDLElBQUk3aUIsRUFBRSt1QyxZQUFZbHZDLEVBQVFrZixhQUFhLFdBQVcsT0FBTy9lLEVBQUU2aUIsV0FBVyxDQUFDLElBQUloaEIsRUFBRStnQixLQUFLeGUsRUFBRXZDLEVBQUVnaEIsTUFBTWhqQixFQUFRa2YsYUFBYSxXQUFXLE9BQU9sZCxFQUFFZ2hCLE1BQU16ZSxHQUMzTyxHQUFHLG9CQUFxQmtJLFFBQVEsbUJBQW9CMGlDLGVBQWUsQ0FBQyxJQUFJL3RDLEVBQUUsS0FBS3FELEVBQUUsS0FBS0csRUFBRSxTQUFGQSxJQUFhLEdBQUcsT0FBT3hELEVBQUUsSUFBSSxJQUFJNEQsRUFBRWhGLEVBQVFrZixlQUFlOWQsR0FBRSxFQUFHNEQsR0FBRzVELEVBQUUsS0FBSyxNQUFNNkQsR0FBRyxNQUFNZ3RCLFdBQVdydEIsRUFBRSxHQUFHSyxJQUFLb0MsRUFBRSxTQUFTckMsR0FBRyxPQUFPNUQsRUFBRTZ3QixXQUFXNXFCLEVBQUUsRUFBRXJDLElBQUk1RCxFQUFFNEQsRUFBRWl0QixXQUFXcnRCLEVBQUUsS0FBS3VDLEVBQUUsU0FBU25DLEVBQUVDLEdBQUdSLEVBQUV3dEIsV0FBV2p0QixFQUFFQyxJQUFJaUMsRUFBRSxXQUFXaXJCLGFBQWExdEIsSUFBSXpFLEVBQVFzMEIscUJBQXFCLFdBQVcsT0FBTSxHQUFJcnRCLEVBQUVqSCxFQUFRb3ZDLHdCQUF3QixpQkFBaUIsQ0FBQyxJQUFJdnFDLEVBQUU0SCxPQUFPd2xCLFdBQVc1cEIsRUFBRW9FLE9BQU8wbEIsYUFBYSxHQUFHLG9CQUFxQnBtQixRQUFRLENBQUMsSUFBSWhILEVBQzdmMEgsT0FBTzRpQyxxQkFBcUIsbUJBQW9CNWlDLE9BQU82aUMsdUJBQXVCdmpDLFFBQVFDLE1BQU0sc0pBQXNKLG1CQUFvQmpILEdBQUdnSCxRQUFRQyxNQUFNLHFKQUFxSixJQUFJN0csR0FBRSxFQUFHSyxFQUFFLEtBQUtDLEdBQUcsRUFBRU0sRUFBRSxFQUFFQyxFQUFFLEVBQUVoRyxFQUFRczBCLHFCQUFxQixXQUFXLE9BQU90MEIsRUFBUWtmLGdCQUNoZ0JsWixHQUFHaUIsRUFBRSxhQUFhakgsRUFBUW92Qyx3QkFBd0IsU0FBU3BxQyxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRStHLFFBQVFDLE1BQU0sbUhBQW1IakcsRUFBRSxFQUFFZixFQUFFa2IsS0FBS3F2QixNQUFNLElBQUl2cUMsR0FBRyxHQUFHLElBQUlxQixFQUFFLElBQUk4b0MsZUFBZTNvQyxFQUFFSCxFQUFFbXBDLE1BQU1ucEMsRUFBRW9wQyxNQUFNQyxVQUFVLFdBQVcsR0FBRyxPQUFPbHFDLEVBQUUsQ0FBQyxJQUFJUixFQUFFaEYsRUFBUWtmLGVBQWVsWixFQUFFaEIsRUFBRWUsRUFBRSxJQUFJUCxHQUFFLEVBQUdSLEdBQUd3QixFQUFFbXBDLFlBQVksT0FBT3hxQyxHQUFFLEVBQUdLLEVBQUUsTUFBTSxNQUFNUCxHQUFHLE1BQU11QixFQUFFbXBDLFlBQVksTUFBTTFxQyxRQUFTRSxHQUFFLEdBQUlrQyxFQUFFLFNBQVNyQyxHQUFHUSxFQUFFUixFQUFFRyxJQUFJQSxHQUFFLEVBQUdxQixFQUFFbXBDLFlBQVksUUFBUXhvQyxFQUFFLFNBQVNuQyxFQUFFQyxHQUFHUSxFQUN0ZlosR0FBRSxXQUFXRyxFQUFFaEYsRUFBUWtmLGtCQUFpQmphLElBQUlpQyxFQUFFLFdBQVdtQixFQUFFNUMsR0FBR0EsR0FBRyxHQUFHLFNBQVNpQixFQUFFMUIsRUFBRUMsR0FBRyxJQUFJMUUsRUFBRXlFLEVBQUVsQixPQUFPa0IsRUFBRW9ELEtBQUtuRCxHQUFHRCxFQUFFLE9BQU8sQ0FBQyxJQUFJeEUsRUFBRUQsRUFBRSxJQUFJLEVBQUV5RyxFQUFFaEMsRUFBRXhFLEdBQUcsVUFBRyxJQUFTd0csR0FBRyxFQUFFTCxFQUFFSyxFQUFFL0IsSUFBMEIsTUFBTUQsRUFBN0JBLEVBQUV4RSxHQUFHeUUsRUFBRUQsRUFBRXpFLEdBQUd5RyxFQUFFekcsRUFBRUMsR0FBZ0IsU0FBU3VHLEVBQUUvQixHQUFVLFlBQU8sS0FBZEEsRUFBRUEsRUFBRSxJQUFxQixLQUFLQSxFQUNoUCxTQUFTbUQsRUFBRW5ELEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxHQUFHLFFBQUcsSUFBU0MsRUFBRSxDQUFDLElBQUkxRSxFQUFFeUUsRUFBRTRxQyxNQUFNLEdBQUdydkMsSUFBSTBFLEVBQUUsQ0FBQ0QsRUFBRSxHQUFHekUsRUFBRXlFLEVBQUUsSUFBSSxJQUFJeEUsRUFBRSxFQUFFd0csRUFBRWhDLEVBQUVsQixPQUFPdEQsRUFBRXdHLEdBQUcsQ0FBQyxJQUFJMUcsRUFBRSxHQUFHRSxFQUFFLEdBQUcsRUFBRW1CLEVBQUVxRCxFQUFFMUUsR0FBR29FLEVBQUVwRSxFQUFFLEVBQUVVLEVBQUVnRSxFQUFFTixHQUFHLFFBQUcsSUFBUy9DLEdBQUcsRUFBRWdGLEVBQUVoRixFQUFFcEIsUUFBRyxJQUFTUyxHQUFHLEVBQUUyRixFQUFFM0YsRUFBRVcsSUFBSXFELEVBQUV4RSxHQUFHUSxFQUFFZ0UsRUFBRU4sR0FBR25FLEVBQUVDLEVBQUVrRSxJQUFJTSxFQUFFeEUsR0FBR21CLEVBQUVxRCxFQUFFMUUsR0FBR0MsRUFBRUMsRUFBRUYsT0FBUSxXQUFHLElBQVNVLEdBQUcsRUFBRTJGLEVBQUUzRixFQUFFVCxJQUEwQixNQUFNeUUsRUFBN0JBLEVBQUV4RSxHQUFHUSxFQUFFZ0UsRUFBRU4sR0FBR25FLEVBQUVDLEVBQUVrRSxJQUFnQixPQUFPTyxFQUFFLE9BQU8sS0FBSyxTQUFTMEIsRUFBRTNCLEVBQUVDLEdBQUcsSUFBSTFFLEVBQUV5RSxFQUFFNnFDLFVBQVU1cUMsRUFBRTRxQyxVQUFVLE9BQU8sSUFBSXR2QyxFQUFFQSxFQUFFeUUsRUFBRThiLEdBQUc3YixFQUFFNmIsR0FBRyxJQUFJblosRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUUsRUFBRUksRUFBRSxLQUFLTyxFQUFFLEVBQUVDLEdBQUUsRUFBR0ssR0FBRSxFQUFHQyxHQUFFLEVBQ2phLFNBQVNDLEVBQUVoRSxHQUFHLElBQUksSUFBSUMsRUFBRThCLEVBQUVhLEdBQUcsT0FBTzNDLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUUreUIsU0FBUzd2QixFQUFFUCxPQUFRLE1BQUczQyxFQUFFNnFDLFdBQVc5cUMsR0FBZ0QsTUFBOUNtRCxFQUFFUCxHQUFHM0MsRUFBRTRxQyxVQUFVNXFDLEVBQUU4cUMsZUFBZXJwQyxFQUFFaUIsRUFBRTFDLEdBQWNBLEVBQUU4QixFQUFFYSxJQUFJLFNBQVMyMkIsRUFBRXY1QixHQUFhLEdBQVYrRCxHQUFFLEVBQUdDLEVBQUVoRSxJQUFPOEQsRUFBRSxHQUFHLE9BQU8vQixFQUFFWSxHQUFHbUIsR0FBRSxFQUFHekIsRUFBRW04QixPQUFPLENBQUMsSUFBSXYrQixFQUFFOEIsRUFBRWEsR0FBRyxPQUFPM0MsR0FBR2tDLEVBQUVvM0IsRUFBRXQ1QixFQUFFNnFDLFVBQVU5cUMsSUFDdFAsU0FBU3crQixFQUFFeCtCLEVBQUVDLEdBQUc2RCxHQUFFLEVBQUdDLElBQUlBLEdBQUUsRUFBRzdCLEtBQUt1QixHQUFFLEVBQUcsSUFBSWxJLEVBQUVpSSxFQUFFLElBQVMsSUFBTFEsRUFBRS9ELEdBQU9nRCxFQUFFbEIsRUFBRVksR0FBRyxPQUFPTSxNQUFNQSxFQUFFOG5DLGVBQWU5cUMsSUFBSUQsSUFBSWhGLEVBQVFzMEIseUJBQXlCLENBQUMsSUFBSTl6QixFQUFFeUgsRUFBRSt2QixTQUFTLEdBQUcsbUJBQW9CeDNCLEVBQUUsQ0FBQ3lILEVBQUUrdkIsU0FBUyxLQUFLeHZCLEVBQUVQLEVBQUUrbkMsY0FBYyxJQUFJaHBDLEVBQUV4RyxFQUFFeUgsRUFBRThuQyxnQkFBZ0I5cUMsR0FBR0EsRUFBRWpGLEVBQVFrZixlQUFlLG1CQUFvQmxZLEVBQUVpQixFQUFFK3ZCLFNBQVNoeEIsRUFBRWlCLElBQUlsQixFQUFFWSxJQUFJUSxFQUFFUixHQUFHcUIsRUFBRS9ELFFBQVFrRCxFQUFFUixHQUFHTSxFQUFFbEIsRUFBRVksR0FBRyxHQUFHLE9BQU9NLEVBQUUsSUFBSTNILEdBQUUsTUFBTyxDQUFDLElBQUlxQixFQUFFb0YsRUFBRWEsR0FBRyxPQUFPakcsR0FBR3dGLEVBQUVvM0IsRUFBRTU4QixFQUFFbXVDLFVBQVU3cUMsR0FBRzNFLEdBQUUsRUFBRyxPQUFPQSxFQUFyWCxRQUErWDJILEVBQUUsS0FBS08sRUFBRWpJLEVBQUVrSSxHQUFFLEdBQUksSUFBSWs3QixFQUFFMThCLEVBQUVqSCxFQUFRbTFCLHNCQUFzQixFQUN0ZW4xQixFQUFRNjBCLDJCQUEyQixFQUFFNzBCLEVBQVFpMUIscUJBQXFCLEVBQUVqMUIsRUFBUTZkLHdCQUF3QixFQUFFN2QsRUFBUWl3QyxtQkFBbUIsS0FBS2p3QyxFQUFReWdCLDhCQUE4QixFQUFFemdCLEVBQVFvMEIsd0JBQXdCLFNBQVNwdkIsR0FBR0EsRUFBRWd6QixTQUFTLE1BQU1oNEIsRUFBUWt3QywyQkFBMkIsV0FBV3BuQyxHQUFHTCxJQUFJSyxHQUFFLEVBQUd6QixFQUFFbThCLEtBQUt4akMsRUFBUTIwQixpQ0FBaUMsV0FBVyxPQUFPbnNCLEdBQUd4SSxFQUFRbXdDLDhCQUE4QixXQUFXLE9BQU9wcEMsRUFBRVksSUFDcGEzSCxFQUFRb3dDLGNBQWMsU0FBU3ByQyxHQUFHLE9BQU93RCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUl2RCxFQUFFLEVBQUUsTUFBTSxRQUFRQSxFQUFFdUQsRUFBRSxJQUFJakksRUFBRWlJLEVBQUVBLEVBQUV2RCxFQUFFLElBQUksT0FBT0QsSUFBWCxRQUF1QndELEVBQUVqSSxJQUFJUCxFQUFRcXdDLHdCQUF3QixhQUFhcndDLEVBQVF3MEIsc0JBQXNCbVAsRUFBRTNqQyxFQUFRa2QseUJBQXlCLFNBQVNsWSxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJekUsRUFBRWlJLEVBQUVBLEVBQUV4RCxFQUFFLElBQUksT0FBT0MsSUFBWCxRQUF1QnVELEVBQUVqSSxJQUNwV1AsRUFBUTRkLDBCQUEwQixTQUFTNVksRUFBRUMsRUFBRTFFLEdBQUcsSUFBSUMsRUFBRVIsRUFBUWtmLGVBQThGLE9BQS9FLHFCQUFrQjNlLEVBQWxCLGNBQWtCQSxLQUFHLE9BQU9BLEVBQWFBLEVBQUUsaUJBQVpBLEVBQUVBLEVBQUUrdkMsUUFBNkIsRUFBRS92QyxFQUFFQyxFQUFFRCxFQUFFQyxFQUFHRCxFQUFFQyxFQUFTd0UsR0FBRyxLQUFLLEVBQUUsSUFBSWdDLEdBQUcsRUFBRSxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sS0FBSyxFQUFFQSxFQUFFLFdBQVcsTUFBTSxLQUFLLEVBQUVBLEVBQUUsSUFBSSxNQUFNLFFBQVFBLEVBQUUsSUFBMk0sT0FBak1oQyxFQUFFLENBQUM4YixHQUFHalosSUFBSW13QixTQUFTL3lCLEVBQUUrcUMsY0FBY2hyQyxFQUFFOHFDLFVBQVV2dkMsRUFBRXd2QyxlQUF2RC9vQyxFQUFFekcsRUFBRXlHLEVBQW9FNm9DLFdBQVcsR0FBR3R2QyxFQUFFQyxHQUFHd0UsRUFBRTZxQyxVQUFVdHZDLEVBQUVtRyxFQUFFa0IsRUFBRTVDLEdBQUcsT0FBTytCLEVBQUVZLElBQUkzQyxJQUFJK0IsRUFBRWEsS0FBS21CLEVBQUU3QixJQUFJNkIsR0FBRSxFQUFHNUIsRUFBRW8zQixFQUFFaCtCLEVBQUVDLE1BQU13RSxFQUFFNnFDLFVBQVU3b0MsRUFBRU4sRUFBRWlCLEVBQUUzQyxHQUFHOEQsR0FBR0wsSUFBSUssR0FBRSxFQUFHekIsRUFBRW04QixLQUFZeCtCLEdBQzFkaEYsRUFBUXV3QyxzQkFBc0IsU0FBU3ZyQyxHQUFHLElBQUlDLEVBQUV1RCxFQUFFLE9BQU8sV0FBVyxJQUFJakksRUFBRWlJLEVBQUVBLEVBQUV2RCxFQUFFLElBQUksT0FBT0QsRUFBRXVFLE1BQU03RCxLQUFLN0IsV0FBeEIsUUFBMkMyRSxFQUFFakksTSx1VUNuQjdILE8sV0FDQSxNLG1uQkFxQk1pd0MsRSxZQUNGLFdBQVk3cUMsR0FBTyx5RUFDVEEsSUFEUyxPQUVmLEVBQUtzekIsTUFBTSxDQUNQd1gsR0FBRyxHQUNIQyxPQUFPLEdBSkksRSxxREFRUEQsR0FHUi9xQyxLQUFLUSxTQUFTLENBQUN3cUMsT0FBTyxFQUFFRCxHQUFHQSxNLDJDQUkzQixhQUFFLFlBQVlFLE9BQU0sV0FDaEIsSUFBSTFwQyxHQUFFLGFBQUUsWUFBWTFFLE9BQ3BCLGFBQUUsNEJBQTRCcXVDLE9BQzlCLElBQUlDLEdBQUssYUFBRSxxREFBcUQ1cEMsRUFBRSxPQUNsRSxhQUFFNHBDLEdBQU1DLFNBQVNDLFksK0JBSWhCLFdBQ0NDLEVBQUt0ckMsS0FBS0MsTUFBTTFCLE1BQU1sQixLQUFJLFNBQUN6QyxHQUFELE9BQzVCLGtDQUNJLGtDQUFLQSxFQUFFMndDLE1BQ1Asa0NBQUksK0JBQUtDLElBQUs1d0MsRUFBRTZ3QyxPQUFRN25CLE1BQU8sS0FBTUMsT0FBUSxRQUM3Qyw4QkFBSTRaLFFBQVMsRUFBS2lPLFlBQVkxdkMsS0FBSyxFQUFLcEIsSUFBS0EsRUFBRSt3QyxPQUMvQyxrQ0FBSy93QyxFQUFFZ3hDLFFBQ1Asa0NBQUtoeEMsRUFBRWl4QyxXQUlmLE9BQ0ksK0JBQUtDLFVBQVcsT0FDWiwrQkFBS0EsVUFBVyxZQUNaLDhCQUFJQSxVQUFXLGVBQWYsWUFDQSxpQ0FBTy9wQyxLQUFNLE9BQVE0N0IsS0FBTSxLQUFNdmlCLEdBQUksWUFDckMsK0JBQUs3SixNQUFPLENBQUMsT0FBUyxVQUN0QixpQ0FBT3U2QixVQUFXLFFBQVMxd0IsR0FBSSxjQUMzQixxQ0FDQSw4QkFBSTB3QixVQUFXLFVBQ1gsd0NBQ0EsbUNBQ0EseUNBQ0EseUNBQ0EsMENBR0oscUNBQ0NSLEtBSVQsK0JBQUtRLFVBQVcsWUFDUSxHQUFuQjlyQyxLQUFLdXpCLE1BQU15WCxPQUFVLHdCQUFDZSxFQUFELENBQWFueEMsRUFBR29GLEtBQUt1ekIsTUFBTXdYLEtBQU0sVyxHQXpEekQ5bUMsYUErRFo4bkMsRSxZQUNGLFdBQVk5ckMsR0FBTywwRUFDVEEsSSxrREFHTixPQUNJLGlDQUFPK3JDLE1BQU8sU0FDVixrQ0FDSSw4QkFBSUMsUUFBUyxLQUNULGtDQUFRVCxJQUFLLDRCQUE0QnhyQyxLQUFLQyxNQUFNckYsRUFBRXN4QyxNQUFPdG9CLE1BQU8sTUFBT0MsT0FBUSxVQUczRixrQ0FDSSw4QkFBSWlvQixVQUFXLGNBQWYsTUFDQSxrQ0FBSzlyQyxLQUFLQyxNQUFNckYsRUFBRSt3QyxRQUV0QixrQ0FDSSw4QkFBSUcsVUFBVyxjQUFmLE9BQ0Esa0NBQUs5ckMsS0FBS0MsTUFBTXJGLEVBQUVneEMsYyxHQWxCWjNuQyxhLFVBd0JYNm1DLEcsZ0RDaEdIcUIsRUFBUUMsRTs7Ozs7Ozs7Ozs7Ozs7QUFBUkQsRUEwQlcsb0JBQVhwbEMsT0FBeUJBLFlBQWhDLEVBMUJlcWxDLEVBMEJnQyxTQUFVcmxDLEVBQVFzbEMsR0FRdEUsSUFBSUMsRUFBTSxHQUVOQyxFQUFXcnhDLE9BQU9zeEMsZUFFbEJqbEMsRUFBUStrQyxFQUFJL2tDLE1BRVprbEMsRUFBT0gsRUFBSUcsS0FBTyxTQUFVQyxHQUMvQixPQUFPSixFQUFJRyxLQUFLOXhDLEtBQU0reEMsSUFDbkIsU0FBVUEsR0FDYixPQUFPSixFQUFJL2hCLE9BQU8xbUIsTUFBTyxHQUFJNm9DLElBSTFCaHFDLEVBQU80cEMsRUFBSTVwQyxLQUVYOE8sRUFBVTg2QixFQUFJOTZCLFFBRWRtN0IsRUFBYSxHQUVicnFDLEVBQVdxcUMsRUFBV3JxQyxTQUV0QnNxQyxFQUFTRCxFQUFXdHdDLGVBRXBCd3dDLEVBQWFELEVBQU90cUMsU0FFcEJ3cUMsRUFBdUJELEVBQVdseUMsS0FBTU8sUUFFeEM2eEMsRUFBVSxHQUVWQyxFQUFhLFNBQXFCQyxHQU1oQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJMStCLFVBSWpEMitCLEVBQVcsU0FBbUJELEdBQ2hDLE9BQWMsTUFBUEEsR0FBZUEsSUFBUUEsRUFBSWxtQyxRQUloQ3ZJLEVBQVd1SSxFQUFPdkksU0FJakIydUMsRUFBNEIsQ0FDL0JwckMsTUFBTSxFQUNOeXBDLEtBQUssRUFDTDRCLE9BQU8sRUFDUEMsVUFBVSxHQUdYLFNBQVNDLEVBQVNocUIsRUFBTW9GLEVBQU02a0IsR0FHN0IsSUFBSS95QyxFQUFHcUMsRUFDTjJ3QyxHQUhERCxFQUFNQSxHQUFPL3VDLEdBR0NxRyxjQUFlLFVBRzdCLEdBREEyb0MsRUFBT2huQixLQUFPbEQsRUFDVG9GLEVBQ0osSUFBTWx1QixLQUFLMnlDLEdBWVZ0d0MsRUFBTTZyQixFQUFNbHVCLElBQU9rdUIsRUFBSytrQixjQUFnQi9rQixFQUFLK2tCLGFBQWNqekMsS0FFMURnekMsRUFBT2psQyxhQUFjL04sRUFBR3FDLEdBSTNCMHdDLEVBQUlHLEtBQUt0L0IsWUFBYW8vQixHQUFTdDZCLFdBQVcvRSxZQUFhcS9CLEdBSXpELFNBQVNHLEVBQVFWLEdBQ2hCLE9BQVksTUFBUEEsRUFDR0EsRUFBTSxHQUlRLGlCQUFmLElBQU9BLEVBQVAsY0FBT0EsS0FBbUMsbUJBQVJBLEVBQ3hDTixFQUFZcnFDLEVBQVMzSCxLQUFNc3lDLEtBQVcsY0FEaEMsSUFFQ0EsRUFGRCxjQUVDQSxHQVFULElBSUNXLEVBQVMsU0FBVEEsRUFBbUJDLEVBQVUzdEMsR0FJNUIsT0FBTyxJQUFJMHRDLEVBQU9FLEdBQUdDLEtBQU1GLEVBQVUzdEMsSUEwVnZDLFNBQVM4dEMsRUFBYWYsR0FNckIsSUFBSTd1QyxJQUFXNnVDLEdBQU8sV0FBWUEsR0FBT0EsRUFBSTd1QyxPQUM1QzJELEVBQU80ckMsRUFBUVYsR0FFaEIsT0FBS0QsRUFBWUMsS0FBU0MsRUFBVUQsS0FJcEIsVUFBVGxyQyxHQUErQixJQUFYM0QsR0FDUixpQkFBWEEsR0FBdUJBLEVBQVMsR0FBT0EsRUFBUyxLQUFPNnVDLEdBcldoRVcsRUFBT0UsR0FBS0YsRUFBT3h4QyxVQUFZLENBRzlCNnhDLE9BYlUsUUFlVnJ0QyxZQUFhZ3RDLEVBR2J4dkMsT0FBUSxFQUVSMkYsUUFBUyxXQUNSLE9BQU93RCxFQUFNNU0sS0FBTXFGLE9BS3BCM0UsSUFBSyxTQUFVNnlDLEdBR2QsT0FBWSxNQUFQQSxFQUNHM21DLEVBQU01TSxLQUFNcUYsTUFJYmt1QyxFQUFNLEVBQUlsdUMsS0FBTWt1QyxFQUFNbHVDLEtBQUs1QixRQUFXNEIsS0FBTWt1QyxJQUtwREMsVUFBVyxTQUFVQyxHQUdwQixJQUFJQyxFQUFNVCxFQUFPVSxNQUFPdHVDLEtBQUtZLGNBQWV3dEMsR0FNNUMsT0FIQUMsRUFBSUUsV0FBYXZ1QyxLQUdWcXVDLEdBSVJHLEtBQU0sU0FBVWxjLEdBQ2YsT0FBT3NiLEVBQU9ZLEtBQU14dUMsS0FBTXN5QixJQUczQmoxQixJQUFLLFNBQVVpMUIsR0FDZCxPQUFPdHlCLEtBQUttdUMsVUFBV1AsRUFBT3Z3QyxJQUFLMkMsTUFBTSxTQUFVeXVDLEVBQU1qMEMsR0FDeEQsT0FBTzgzQixFQUFTMzNCLEtBQU04ekMsRUFBTWowQyxFQUFHaTBDLFFBSWpDbG5DLE1BQU8sV0FDTixPQUFPdkgsS0FBS211QyxVQUFXNW1DLEVBQU0xRCxNQUFPN0QsS0FBTTdCLGFBRzNDdXdDLE1BQU8sV0FDTixPQUFPMXVDLEtBQUsydUMsR0FBSSxJQUdqQjFSLEtBQU0sV0FDTCxPQUFPajlCLEtBQUsydUMsSUFBSyxJQUdsQkMsS0FBTSxXQUNMLE9BQU81dUMsS0FBS211QyxVQUFXUCxFQUFPaUIsS0FBTTd1QyxNQUFNLFNBQVU4dUMsRUFBT3QwQyxHQUMxRCxPQUFTQSxFQUFJLEdBQU0sT0FJckJ1MEMsSUFBSyxXQUNKLE9BQU8vdUMsS0FBS211QyxVQUFXUCxFQUFPaUIsS0FBTTd1QyxNQUFNLFNBQVU4dUMsRUFBT3QwQyxHQUMxRCxPQUFPQSxFQUFJLE9BSWJtMEMsR0FBSSxTQUFVbjBDLEdBQ2IsSUFBSXcwQyxFQUFNaHZDLEtBQUs1QixPQUNkNndDLEdBQUt6MEMsR0FBTUEsRUFBSSxFQUFJdzBDLEVBQU0sR0FDMUIsT0FBT2h2QyxLQUFLbXVDLFVBQVdjLEdBQUssR0FBS0EsRUFBSUQsRUFBTSxDQUFFaHZDLEtBQU1pdkMsSUFBUSxLQUc1RHRsQixJQUFLLFdBQ0osT0FBTzNwQixLQUFLdXVDLFlBQWN2dUMsS0FBS1ksZUFLaEM4QixLQUFNQSxFQUNOd3NDLEtBQU01QyxFQUFJNEMsS0FDVkMsT0FBUTdDLEVBQUk2QyxRQUdidkIsRUFBTzdJLE9BQVM2SSxFQUFPRSxHQUFHL0ksT0FBUyxXQUNsQyxJQUFJajRCLEVBQVMvUixFQUFNeXdDLEVBQUs0RCxFQUFNQyxFQUFhQyxFQUMxQ3h4QyxFQUFTSyxVQUFXLElBQU8sR0FDM0IzRCxFQUFJLEVBQ0o0RCxFQUFTRCxVQUFVQyxPQUNuQm14QyxHQUFPLEVBc0JSLElBbkJ1QixrQkFBWHp4QyxJQUNYeXhDLEVBQU96eEMsRUFHUEEsRUFBU0ssVUFBVzNELElBQU8sR0FDM0JBLEtBSXNCLGlCQUFsQixJQUFPc0QsRUFBUCxjQUFPQSxLQUF3Qmt2QyxFQUFZbHZDLEtBQy9DQSxFQUFTLElBSUx0RCxJQUFNNEQsSUFDVk4sRUFBU2tDLEtBQ1R4RixLQUdPQSxFQUFJNEQsRUFBUTVELElBR25CLEdBQXFDLE9BQTlCc1MsRUFBVTNPLFVBQVczRCxJQUczQixJQUFNTyxLQUFRK1IsRUFDYnNpQyxFQUFPdGlDLEVBQVMvUixHQUlGLGNBQVRBLEdBQXdCK0MsSUFBV3N4QyxJQUtuQ0csR0FBUUgsSUFBVXhCLEVBQU80QixjQUFlSixLQUMxQ0MsRUFBY3p0QyxNQUFNWSxRQUFTNHNDLE1BQy9CNUQsRUFBTTF0QyxFQUFRL0MsR0FJYnUwQyxFQURJRCxJQUFnQnp0QyxNQUFNWSxRQUFTZ3BDLEdBQzNCLEdBQ0k2RCxHQUFnQnpCLEVBQU80QixjQUFlaEUsR0FHMUNBLEVBRkEsR0FJVDZELEdBQWMsRUFHZHZ4QyxFQUFRL0MsR0FBUzZ5QyxFQUFPN0ksT0FBUXdLLEVBQU1ELEVBQU9GLFNBR3pCSyxJQUFUTCxJQUNYdHhDLEVBQVEvQyxHQUFTcTBDLElBT3JCLE9BQU90eEMsR0FHUjh2QyxFQUFPN0ksT0FBUSxDQUdkMkssUUFBUyxVQWxMQyxRQWtMc0JsMUIsS0FBS3dRLFVBQVc1b0IsUUFBUyxNQUFPLElBR2hFdXRDLFNBQVMsRUFFVHJwQyxNQUFPLFNBQVVzcEMsR0FDaEIsTUFBTSxJQUFJbnZDLE1BQU9tdkMsSUFHbEJDLEtBQU0sYUFFTkwsY0FBZSxTQUFVdkMsR0FDeEIsSUFBSTZDLEVBQU9DLEVBSVgsU0FBTTlDLEdBQWdDLG9CQUF6QjNxQyxFQUFTM0gsS0FBTXN5QyxLQUk1QjZDLEVBQVF2RCxFQUFVVSxNQVNLLG1CQUR2QjhDLEVBQU9uRCxFQUFPanlDLEtBQU1tMUMsRUFBTyxnQkFBbUJBLEVBQU1sdkMsY0FDZmlzQyxFQUFXbHlDLEtBQU1vMUMsS0FBV2pELEtBR2xFa0QsY0FBZSxTQUFVL0MsR0FDeEIsSUFBSWx5QyxFQUVKLElBQU1BLEtBQVFreUMsRUFDYixPQUFPLEVBRVIsT0FBTyxHQUtSZ0QsV0FBWSxTQUFVM3NCLEVBQU14VyxFQUFTeWdDLEdBQ3BDRCxFQUFTaHFCLEVBQU0sQ0FBRThwQixNQUFPdGdDLEdBQVdBLEVBQVFzZ0MsT0FBU0csSUFHckRpQixLQUFNLFNBQVV2QixFQUFLM2EsR0FDcEIsSUFBSWwwQixFQUFRNUQsRUFBSSxFQUVoQixHQUFLd3pDLEVBQWFmLEdBRWpCLElBREE3dUMsRUFBUzZ1QyxFQUFJN3VDLE9BQ0w1RCxFQUFJNEQsSUFDcUMsSUFBM0NrMEIsRUFBUzMzQixLQUFNc3lDLEVBQUt6eUMsR0FBS0EsRUFBR3l5QyxFQUFLenlDLElBRG5CQSxVQU1wQixJQUFNQSxLQUFLeXlDLEVBQ1YsSUFBZ0QsSUFBM0MzYSxFQUFTMzNCLEtBQU1zeUMsRUFBS3p5QyxHQUFLQSxFQUFHeXlDLEVBQUt6eUMsSUFDckMsTUFLSCxPQUFPeXlDLEdBSVJpRCxVQUFXLFNBQVU1RCxFQUFLNkQsR0FDekIsSUFBSTlCLEVBQU04QixHQUFXLEdBYXJCLE9BWFksTUFBUDdELElBQ0MwQixFQUFhOXlDLE9BQVFveEMsSUFDekJzQixFQUFPVSxNQUFPRCxFQUNFLGlCQUFSL0IsRUFDUCxDQUFFQSxHQUFRQSxHQUdYNXBDLEVBQUsvSCxLQUFNMHpDLEVBQUsvQixJQUlYK0IsR0FHUitCLFFBQVMsU0FBVTNCLEVBQU1uQyxFQUFLOXhDLEdBQzdCLE9BQWMsTUFBUDh4QyxHQUFlLEVBQUk5NkIsRUFBUTdXLEtBQU0yeEMsRUFBS21DLEVBQU1qMEMsSUFLcEQ4ekMsTUFBTyxTQUFVSSxFQUFPMkIsR0FLdkIsSUFKQSxJQUFJckIsR0FBT3FCLEVBQU9qeUMsT0FDakI2d0MsRUFBSSxFQUNKejBDLEVBQUlrMEMsRUFBTXR3QyxPQUVINndDLEVBQUlELEVBQUtDLElBQ2hCUCxFQUFPbDBDLEtBQVE2MUMsRUFBUXBCLEdBS3hCLE9BRkFQLEVBQU10d0MsT0FBUzVELEVBRVJrMEMsR0FHUkcsS0FBTSxTQUFVVCxFQUFPOWIsRUFBVWdlLEdBU2hDLElBUkEsSUFDQ0MsRUFBVSxHQUNWLzFDLEVBQUksRUFDSjRELEVBQVNnd0MsRUFBTWh3QyxPQUNmb3lDLEdBQWtCRixFQUlYOTFDLEVBQUk0RCxFQUFRNUQsS0FDQTgzQixFQUFVOGIsRUFBTzV6QyxHQUFLQSxLQUNoQmcyQyxHQUN4QkQsRUFBUTd0QyxLQUFNMHJDLEVBQU81ekMsSUFJdkIsT0FBTysxQyxHQUlSbHpDLElBQUssU0FBVSt3QyxFQUFPOWIsRUFBVW1lLEdBQy9CLElBQUlyeUMsRUFBUTNDLEVBQ1hqQixFQUFJLEVBQ0o2ekMsRUFBTSxHQUdQLEdBQUtMLEVBQWFJLEdBRWpCLElBREFod0MsRUFBU2d3QyxFQUFNaHdDLE9BQ1A1RCxFQUFJNEQsRUFBUTVELElBR0wsT0FGZGlCLEVBQVE2MkIsRUFBVThiLEVBQU81ekMsR0FBS0EsRUFBR2kyQyxLQUdoQ3BDLEVBQUkzckMsS0FBTWpILFFBTVosSUFBTWpCLEtBQUs0ekMsRUFHSSxPQUZkM3lDLEVBQVE2MkIsRUFBVThiLEVBQU81ekMsR0FBS0EsRUFBR2kyQyxLQUdoQ3BDLEVBQUkzckMsS0FBTWpILEdBTWIsT0FBT2d4QyxFQUFNNEIsSUFJZHFDLEtBQU0sRUFJTjNELFFBQVNBLElBR2EsbUJBQVh4eEMsU0FDWHF5QyxFQUFPRSxHQUFJdnlDLE9BQU82RCxVQUFha3RDLEVBQUsvd0MsT0FBTzZELFdBSTVDd3VDLEVBQU9ZLEtBQU0sdUVBQXVFaHhDLE1BQU8sTUFDM0YsU0FBVW16QyxFQUFJNTFDLEdBQ2I0eEMsRUFBWSxXQUFhNXhDLEVBQU8sS0FBUUEsRUFBS3VNLGlCQW1COUMsSUFBSXNwQzs7Ozs7Ozs7Ozs7QUFXRixTQUFVN3BDLEdBQ1osSUFBSXZNLEVBQ0h1eUMsRUFDQThELEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBQ0E5eUMsRUFDQSt5QyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBbkIsRUFDQTNMLEVBR0E4SyxFQUFVLFNBQVcsRUFBSSxJQUFJcnlCLEtBQzdCczBCLEVBQWU1cUMsRUFBT3ZJLFNBQ3RCb3pDLEVBQVUsRUFDVi91QyxFQUFPLEVBQ1BndkMsRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVTV5QyxFQUFHQyxHQUl4QixPQUhLRCxJQUFNQyxJQUNWOHhDLEdBQWUsR0FFVCxHQUlSekUsRUFBVyxHQUFLdndDLGVBQ2hCaXdDLEVBQU0sR0FDTnBDLEVBQU1vQyxFQUFJcEMsSUFDVmlJLEVBQWE3RixFQUFJNXBDLEtBQ2pCQSxFQUFPNHBDLEVBQUk1cEMsS0FDWDZFLEVBQVEra0MsRUFBSS9rQyxNQUlaaUssRUFBVSxTQUFVNGdDLEVBQU0zRCxHQUd6QixJQUZBLElBQUlqMEMsRUFBSSxFQUNQdzBDLEVBQU1vRCxFQUFLaDBDLE9BQ0o1RCxFQUFJdzBDLEVBQUt4MEMsSUFDaEIsR0FBSzQzQyxFQUFNNTNDLEtBQVFpMEMsRUFDbEIsT0FBT2owQyxFQUdULE9BQVEsR0FHVDYzQyxFQUFXLDZIQU1YQyxFQUFhLHNCQUdiQyxFQUFhLDBCQUE0QkQsRUFDeEMsMENBR0RFLEVBQWEsTUFBUUYsRUFBYSxLQUFPQyxFQUFhLE9BQVNELEVBRzlELGdCQUFrQkEsRUFJbEIsMkRBQTZEQyxFQUFhLE9BQzFFRCxFQUFhLE9BRWRHLEVBQVUsS0FBT0YsRUFBUCx3RkFPb0JDLEVBUHBCLGVBY1ZFLEVBQWMsSUFBSUMsT0FBUUwsRUFBYSxJQUFLLEtBQzVDTSxFQUFRLElBQUlELE9BQVEsSUFBTUwsRUFBYSw4QkFDdENBLEVBQWEsS0FBTSxLQUVwQk8sRUFBUyxJQUFJRixPQUFRLElBQU1MLEVBQWEsS0FBT0EsRUFBYSxLQUM1RFEsRUFBZSxJQUFJSCxPQUFRLElBQU1MLEVBQWEsV0FBYUEsRUFBYSxJQUFNQSxFQUM3RSxLQUNEUyxFQUFXLElBQUlKLE9BQVFMLEVBQWEsTUFFcENVLEVBQVUsSUFBSUwsT0FBUUYsR0FDdEJRLEVBQWMsSUFBSU4sT0FBUSxJQUFNSixFQUFhLEtBRTdDVyxFQUFZLENBQ1gsR0FBTSxJQUFJUCxPQUFRLE1BQVFKLEVBQWEsS0FDdkMsTUFBUyxJQUFJSSxPQUFRLFFBQVVKLEVBQWEsS0FDNUMsSUFBTyxJQUFJSSxPQUFRLEtBQU9KLEVBQWEsU0FDdkMsS0FBUSxJQUFJSSxPQUFRLElBQU1ILEdBQzFCLE9BQVUsSUFBSUcsT0FBUSxJQUFNRixHQUM1QixNQUFTLElBQUlFLE9BQVEseURBQ3BCTCxFQUFhLCtCQUFpQ0EsRUFBYSxjQUMzREEsRUFBYSxhQUFlQSxFQUFhLFNBQVUsS0FDcEQsS0FBUSxJQUFJSyxPQUFRLE9BQVNOLEVBQVcsS0FBTSxLQUk5QyxhQUFnQixJQUFJTSxPQUFRLElBQU1MLEVBQ2pDLG1EQUFxREEsRUFDckQsbUJBQXFCQSxFQUFhLG1CQUFvQixNQUd4RGEsRUFBUSxTQUNSQyxFQUFVLHNDQUNWQyxFQUFVLFNBRVZDLEVBQVUseUJBR1ZDLEVBQWEsbUNBRWJDLEdBQVcsT0FJWEMsR0FBWSxJQUFJZCxPQUFRLHVCQUF5QkwsRUFBYSx1QkFBd0IsS0FDdEZvQixHQUFZLFNBQVVyeEMsRUFBUXN4QyxHQUM3QixJQUFJQyxFQUFPLEtBQU92eEMsRUFBT2tGLE1BQU8sR0FBTSxNQUV0QyxPQUFPb3NDLElBU05DLEVBQU8sRUFDTjMyQyxPQUFPRyxhQUFjdzJDLEVBQU8sT0FDNUIzMkMsT0FBT0csYUFBY3cyQyxHQUFRLEdBQUssTUFBZSxLQUFQQSxFQUFlLFNBSzVEQyxHQUFhLHNEQUNiQyxHQUFhLFNBQVV4ZSxFQUFJeWUsR0FDMUIsT0FBS0EsRUFHUSxPQUFQemUsRUFDRyxJQUlEQSxFQUFHL3RCLE1BQU8sR0FBSSxHQUFNLEtBQzFCK3RCLEVBQUcwZSxXQUFZMWUsRUFBR2wzQixPQUFTLEdBQUlrRSxTQUFVLElBQU8sSUFJM0MsS0FBT2d6QixHQU9mMmUsR0FBZ0IsV0FDZjNDLEtBR0Q0QyxHQUFxQkMsSUFDcEIsU0FBVTFGLEdBQ1QsT0FBeUIsSUFBbEJBLEVBQUt4aEMsVUFBcUQsYUFBaEN3aEMsRUFBS3pqQyxTQUFTMUQsZ0JBRWhELENBQUU4c0MsSUFBSyxhQUFjeHhDLEtBQU0sV0FJN0IsSUFDQ0YsRUFBS21CLE1BQ0Z5b0MsRUFBTS9rQyxFQUFNNU0sS0FBTWczQyxFQUFhMEMsWUFDakMxQyxFQUFhMEMsWUFNZC9ILEVBQUtxRixFQUFhMEMsV0FBV2oyQyxRQUFTbVEsU0FDckMsTUFBUWpOLEdBQ1RvQixFQUFPLENBQUVtQixNQUFPeW9DLEVBQUlsdUMsT0FHbkIsU0FBVU4sRUFBUXcyQyxHQUNqQm5DLEVBQVd0dUMsTUFBTy9GLEVBQVF5SixFQUFNNU0sS0FBTTI1QyxLQUt2QyxTQUFVeDJDLEVBQVF3MkMsR0FLakIsSUFKQSxJQUFJckYsRUFBSW54QyxFQUFPTSxPQUNkNUQsRUFBSSxFQUdLc0QsRUFBUW14QyxLQUFRcUYsRUFBSzk1QyxPQUMvQnNELEVBQU9NLE9BQVM2d0MsRUFBSSxJQUt2QixTQUFTMkIsR0FBUS9DLEVBQVUzdEMsRUFBU2l3QyxFQUFTb0UsR0FDNUMsSUFBSTM1QyxFQUFHSixFQUFHaTBDLEVBQU0rRixFQUFLdHFDLEVBQU91cUMsRUFBUUMsRUFDbkNDLEVBQWF6MEMsR0FBV0EsRUFBUXdNLGNBR2hDNkIsRUFBV3JPLEVBQVVBLEVBQVFxTyxTQUFXLEVBS3pDLEdBSEE0aEMsRUFBVUEsR0FBVyxHQUdJLGlCQUFidEMsSUFBMEJBLEdBQ3hCLElBQWJ0L0IsR0FBK0IsSUFBYkEsR0FBK0IsS0FBYkEsRUFFcEMsT0FBTzRoQyxFQUlSLElBQU1vRSxJQUNMakQsRUFBYXB4QyxHQUNiQSxFQUFVQSxHQUFXMUIsRUFFaEJnekMsR0FBaUIsQ0FJckIsR0FBa0IsS0FBYmpqQyxJQUFxQnJFLEVBQVFxcEMsRUFBV3FCLEtBQU0vRyxJQUdsRCxHQUFPanpDLEVBQUlzUCxFQUFPLElBR2pCLEdBQWtCLElBQWJxRSxFQUFpQixDQUNyQixLQUFPa2dDLEVBQU92dUMsRUFBUXpCLGVBQWdCN0QsSUFVckMsT0FBT3UxQyxFQUxQLEdBQUsxQixFQUFLcnpCLEtBQU94Z0IsRUFFaEIsT0FEQXUxQyxFQUFRenRDLEtBQU0rckMsR0FDUDBCLE9BWVQsR0FBS3dFLElBQWdCbEcsRUFBT2tHLEVBQVdsMkMsZUFBZ0I3RCxLQUN0RGdxQyxFQUFVMWtDLEVBQVN1dUMsSUFDbkJBLEVBQUtyekIsS0FBT3hnQixFQUdaLE9BREF1MUMsRUFBUXp0QyxLQUFNK3JDLEdBQ1AwQixNQUtILElBQUtqbUMsRUFBTyxHQUVsQixPQURBeEgsRUFBS21CLE1BQU9zc0MsRUFBU2p3QyxFQUFRMjBDLHFCQUFzQmhILElBQzVDc0MsRUFHRCxJQUFPdjFDLEVBQUlzUCxFQUFPLEtBQVM2aUMsRUFBUStILHdCQUN6QzUwQyxFQUFRNDBDLHVCQUdSLE9BREFweUMsRUFBS21CLE1BQU9zc0MsRUFBU2p3QyxFQUFRNDBDLHVCQUF3Qmw2QyxJQUM5Q3UxQyxFQUtULEdBQUtwRCxFQUFRZ0ksTUFDWDlDLEVBQXdCcEUsRUFBVyxRQUNqQzRELElBQWNBLEVBQVVycEMsS0FBTXlsQyxNQUlsQixJQUFidC9CLEdBQXFELFdBQW5Dck8sRUFBUThLLFNBQVMxRCxlQUErQixDQVlwRSxHQVZBb3RDLEVBQWM3RyxFQUNkOEcsRUFBYXowQyxFQVNLLElBQWJxTyxJQUNGd2tDLEVBQVMzcUMsS0FBTXlsQyxJQUFjaUYsRUFBYTFxQyxLQUFNeWxDLElBQWUsQ0FxQmpFLEtBbEJBOEcsRUFBYW5CLEdBQVNwckMsS0FBTXlsQyxJQUFjbUgsR0FBYTkwQyxFQUFRZ1QsYUFDOURoVCxLQUltQkEsR0FBWTZzQyxFQUFRa0ksU0FHaENULEVBQU10MEMsRUFBUXV0QyxhQUFjLE9BQ2xDK0csRUFBTUEsRUFBSXB5QyxRQUFTeXhDLEdBQVlDLElBRS9CNXpDLEVBQVFxSSxhQUFjLEtBQVFpc0MsRUFBTTlFLElBTXRDbDFDLEdBREFpNkMsRUFBU3pELEVBQVVuRCxJQUNSenZDLE9BQ0g1RCxLQUNQaTZDLEVBQVFqNkMsSUFBUWc2QyxFQUFNLElBQU1BLEVBQU0sVUFBYSxJQUM5Q1UsR0FBWVQsRUFBUWo2QyxJQUV0Qms2QyxFQUFjRCxFQUFPbjNDLEtBQU0sS0FHNUIsSUFJQyxPQUhBb0YsRUFBS21CLE1BQU9zc0MsRUFDWHdFLEVBQVcxTixpQkFBa0J5TixJQUV2QnZFLEVBQ04sTUFBUWdGLEdBQ1RsRCxFQUF3QnBFLEdBQVUsR0FObkMsUUFRTTJHLElBQVE5RSxHQUNaeHZDLEVBQVFvSSxnQkFBaUIsUUFROUIsT0FBTzRvQyxFQUFRckQsRUFBU3pyQyxRQUFTd3dDLEVBQU8sTUFBUTF5QyxFQUFTaXdDLEVBQVNvRSxHQVNuRSxTQUFTekMsS0FDUixJQUFJbjBDLEVBQU8sR0FZWCxPQVZBLFNBQVN5M0MsRUFBT3I1QyxFQUFLTixHQVFwQixPQUxLa0MsRUFBSytFLEtBQU0zRyxFQUFNLEtBQVE4MEMsRUFBS3dFLG9CQUczQkQsRUFBT3ozQyxFQUFLbWEsU0FFWHM5QixFQUFPcjVDLEVBQU0sS0FBUU4sR0FTaEMsU0FBUzY1QyxHQUFjeEgsR0FFdEIsT0FEQUEsRUFBSTRCLElBQVksRUFDVDVCLEVBT1IsU0FBU3lILEdBQVF6SCxHQUNoQixJQUFJMEgsRUFBS2gzQyxFQUFTcUcsY0FBZSxZQUVqQyxJQUNDLFFBQVNpcEMsRUFBSTBILEdBQ1osTUFBUWwwQyxHQUNULE9BQU8sRUFIUixRQU9NazBDLEVBQUd0aUMsWUFDUHNpQyxFQUFHdGlDLFdBQVcvRSxZQUFhcW5DLEdBSTVCQSxFQUFLLE1BU1AsU0FBU0MsR0FBV0MsRUFBT0MsR0FJMUIsSUFIQSxJQUFJckosRUFBTW9KLEVBQU1sNEMsTUFBTyxLQUN0QmhELEVBQUk4eEMsRUFBSWx1QyxPQUVENUQsS0FDUHEyQyxFQUFLK0UsV0FBWXRKLEVBQUs5eEMsSUFBUW03QyxFQVVoQyxTQUFTRSxHQUFjdjJDLEVBQUdDLEdBQ3pCLElBQUl1MkMsRUFBTXYyQyxHQUFLRCxFQUNkeTJDLEVBQU9ELEdBQXNCLElBQWZ4MkMsRUFBRWlQLFVBQWlDLElBQWZoUCxFQUFFZ1AsVUFDbkNqUCxFQUFFMDJDLFlBQWN6MkMsRUFBRXkyQyxZQUdwQixHQUFLRCxFQUNKLE9BQU9BLEVBSVIsR0FBS0QsRUFDSixLQUFVQSxFQUFNQSxFQUFJbHRCLGFBQ25CLEdBQUtrdEIsSUFBUXYyQyxFQUNaLE9BQVEsRUFLWCxPQUFPRCxFQUFJLEdBQUssRUFPakIsU0FBUzIyQyxHQUFtQmwwQyxHQUMzQixPQUFPLFNBQVUwc0MsR0FFaEIsTUFBZ0IsVUFETEEsRUFBS3pqQyxTQUFTMUQsZUFDRW1uQyxFQUFLMXNDLE9BQVNBLEdBUTNDLFNBQVNtMEMsR0FBb0JuMEMsR0FDNUIsT0FBTyxTQUFVMHNDLEdBQ2hCLElBQUkxekMsRUFBTzB6QyxFQUFLempDLFNBQVMxRCxjQUN6QixPQUFrQixVQUFUdk0sR0FBNkIsV0FBVEEsSUFBdUIwekMsRUFBSzFzQyxPQUFTQSxHQVFwRSxTQUFTbzBDLEdBQXNCbHBDLEdBRzlCLE9BQU8sU0FBVXdoQyxHQUtoQixNQUFLLFNBQVVBLEVBU1RBLEVBQUt2N0IsYUFBZ0MsSUFBbEJ1N0IsRUFBS3hoQyxTQUd2QixVQUFXd2hDLEVBQ1YsVUFBV0EsRUFBS3Y3QixXQUNidTdCLEVBQUt2N0IsV0FBV2pHLFdBQWFBLEVBRTdCd2hDLEVBQUt4aEMsV0FBYUEsRUFNcEJ3aEMsRUFBSzNGLGFBQWU3N0IsR0FJMUJ3aEMsRUFBSzNGLGNBQWdCNzdCLEdBQ3JCaW5DLEdBQW9CekYsS0FBV3hoQyxFQUcxQndoQyxFQUFLeGhDLFdBQWFBLEVBS2QsVUFBV3doQyxHQUNmQSxFQUFLeGhDLFdBQWFBLEdBWTVCLFNBQVNtcEMsR0FBd0J0SSxHQUNoQyxPQUFPd0gsSUFBYyxTQUFVZSxHQUU5QixPQURBQSxHQUFZQSxFQUNMZixJQUFjLFNBQVVmLEVBQU1oRSxHQU1wQyxJQUxBLElBQUl0QixFQUNIcUgsRUFBZXhJLEVBQUksR0FBSXlHLEVBQUtuMkMsT0FBUWk0QyxHQUNwQzc3QyxFQUFJODdDLEVBQWFsNEMsT0FHVjVELEtBQ0YrNUMsRUFBUXRGLEVBQUlxSCxFQUFjOTdDLE1BQzlCKzVDLEVBQU10RixLQUFTc0IsRUFBU3RCLEdBQU1zRixFQUFNdEYsV0FZekMsU0FBUytGLEdBQWE5MEMsR0FDckIsT0FBT0EsUUFBbUQsSUFBakNBLEVBQVEyMEMsc0JBQXdDMzBDLEVBa3JDMUUsSUFBTTFGLEtBOXFDTnV5QyxFQUFVNkQsR0FBTzdELFFBQVUsR0FPM0JnRSxFQUFRSCxHQUFPRyxNQUFRLFNBQVV0QyxHQUNoQyxJQUFJOEgsRUFBWTlILEVBQUsxZ0MsYUFDcEJ3akMsR0FBWTlDLEVBQUsvaEMsZUFBaUIraEMsR0FBT2haLGdCQUsxQyxPQUFRMGQsRUFBTS9xQyxLQUFNbXVDLEdBQWFoRixHQUFXQSxFQUFRdm1DLFVBQVksU0FRakVzbUMsRUFBY1YsR0FBT1UsWUFBYyxTQUFVNW9CLEdBQzVDLElBQUk4dEIsRUFBWUMsRUFDZmxKLEVBQU03a0IsRUFBT0EsRUFBS2hjLGVBQWlCZ2MsRUFBT2lwQixFQU8zQyxPQUFLcEUsR0FBTy91QyxHQUE2QixJQUFqQit1QyxFQUFJaC9CLFVBQW1CZy9CLEVBQUk5WCxpQkFNbkQ4YixHQURBL3lDLEVBQVcrdUMsR0FDUTlYLGdCQUNuQitiLEdBQWtCVCxFQUFPdnlDLEdBUXBCbXpDLEdBQWdCbnpDLElBQ2xCaTRDLEVBQVlqNEMsRUFBU3NyQixjQUFpQjJzQixFQUFVbFIsTUFBUWtSLElBR3JEQSxFQUFVbmlDLGlCQUNkbWlDLEVBQVVuaUMsaUJBQWtCLFNBQVUyL0IsSUFBZSxHQUcxQ3dDLEVBQVV4dUIsYUFDckJ3dUIsRUFBVXh1QixZQUFhLFdBQVlnc0IsS0FTckNsSCxFQUFRa0ksTUFBUU0sSUFBUSxTQUFVQyxHQUVqQyxPQURBakUsRUFBUW5qQyxZQUFhb25DLEdBQUtwbkMsWUFBYTVQLEVBQVNxRyxjQUFlLGFBQ3pCLElBQXhCMndDLEVBQUd2TyxtQkFDZnVPLEVBQUd2TyxpQkFBa0IsdUJBQXdCN29DLFVBU2hEMnVDLEVBQVF5RixXQUFhK0MsSUFBUSxTQUFVQyxHQUV0QyxPQURBQSxFQUFHMUosVUFBWSxLQUNQMEosRUFBRy9ILGFBQWMsZ0JBTzFCVixFQUFROEgscUJBQXVCVSxJQUFRLFNBQVVDLEdBRWhELE9BREFBLEVBQUdwbkMsWUFBYTVQLEVBQVNrNEMsY0FBZSxNQUNoQ2xCLEVBQUdYLHFCQUFzQixLQUFNejJDLFVBSXhDMnVDLEVBQVErSCx1QkFBeUJ4QixFQUFRbHJDLEtBQU01SixFQUFTczJDLHdCQU14RC9ILEVBQVE0SixRQUFVcEIsSUFBUSxTQUFVQyxHQUVuQyxPQURBakUsRUFBUW5qQyxZQUFhb25DLEdBQUtwNkIsR0FBS3MwQixHQUN2Qmx4QyxFQUFTbzRDLG9CQUFzQnA0QyxFQUFTbzRDLGtCQUFtQmxILEdBQVV0eEMsVUFJekUydUMsRUFBUTRKLFNBQ1o5RixFQUFLZ0csT0FBTCxHQUFzQixTQUFVejdCLEdBQy9CLElBQUkwN0IsRUFBUzE3QixFQUFHaFosUUFBU3F4QyxHQUFXQyxJQUNwQyxPQUFPLFNBQVVqRixHQUNoQixPQUFPQSxFQUFLaEIsYUFBYyxRQUFXcUosSUFHdkNqRyxFQUFLa0csS0FBTCxHQUFvQixTQUFVMzdCLEVBQUlsYixHQUNqQyxRQUF1QyxJQUEzQkEsRUFBUXpCLGdCQUFrQyt5QyxFQUFpQixDQUN0RSxJQUFJL0MsRUFBT3Z1QyxFQUFRekIsZUFBZ0IyYyxHQUNuQyxPQUFPcXpCLEVBQU8sQ0FBRUEsR0FBUyxPQUkzQm9DLEVBQUtnRyxPQUFMLEdBQXVCLFNBQVV6N0IsR0FDaEMsSUFBSTA3QixFQUFTMTdCLEVBQUdoWixRQUFTcXhDLEdBQVdDLElBQ3BDLE9BQU8sU0FBVWpGLEdBQ2hCLElBQUkvbEIsT0FBd0MsSUFBMUIrbEIsRUFBS3VJLGtCQUN0QnZJLEVBQUt1SSxpQkFBa0IsTUFDeEIsT0FBT3R1QixHQUFRQSxFQUFLanRCLFFBQVVxN0MsSUFNaENqRyxFQUFLa0csS0FBTCxHQUFvQixTQUFVMzdCLEVBQUlsYixHQUNqQyxRQUF1QyxJQUEzQkEsRUFBUXpCLGdCQUFrQyt5QyxFQUFpQixDQUN0RSxJQUFJOW9CLEVBQU1sdUIsRUFBRzR6QyxFQUNaSyxFQUFPdnVDLEVBQVF6QixlQUFnQjJjLEdBRWhDLEdBQUtxekIsRUFBTyxDQUlYLElBREEvbEIsRUFBTytsQixFQUFLdUksaUJBQWtCLFFBQ2pCdHVCLEVBQUtqdEIsUUFBVTJmLEVBQzNCLE1BQU8sQ0FBRXF6QixHQU1WLElBRkFMLEVBQVFsdUMsRUFBUTAyQyxrQkFBbUJ4N0IsR0FDbkM1Z0IsRUFBSSxFQUNNaTBDLEVBQU9MLEVBQU81ekMsTUFFdkIsSUFEQWt1QixFQUFPK2xCLEVBQUt1SSxpQkFBa0IsUUFDakJ0dUIsRUFBS2p0QixRQUFVMmYsRUFDM0IsTUFBTyxDQUFFcXpCLEdBS1osTUFBTyxNQU1Wb0MsRUFBS2tHLEtBQUwsSUFBcUJoSyxFQUFROEgscUJBQzVCLFNBQVVscUMsRUFBS3pLLEdBQ2QsWUFBNkMsSUFBakNBLEVBQVEyMEMscUJBQ1ozMEMsRUFBUTIwQyxxQkFBc0JscUMsR0FHMUJvaUMsRUFBUWdJLElBQ1o3MEMsRUFBUSttQyxpQkFBa0J0OEIsUUFEM0IsR0FLUixTQUFVQSxFQUFLekssR0FDZCxJQUFJdXVDLEVBQ0h3SSxFQUFNLEdBQ056OEMsRUFBSSxFQUdKMjFDLEVBQVVqd0MsRUFBUTIwQyxxQkFBc0JscUMsR0FHekMsR0FBYSxNQUFSQSxFQUFjLENBQ2xCLEtBQVU4akMsRUFBTzBCLEVBQVMzMUMsTUFDRixJQUFsQmkwQyxFQUFLbGdDLFVBQ1Qwb0MsRUFBSXYwQyxLQUFNK3JDLEdBSVosT0FBT3dJLEVBRVIsT0FBTzlHLEdBSVRVLEVBQUtrRyxLQUFMLE1BQXVCaEssRUFBUStILHdCQUEwQixTQUFVaEosRUFBVzVyQyxHQUM3RSxRQUErQyxJQUFuQ0EsRUFBUTQwQyx3QkFBMEN0RCxFQUM3RCxPQUFPdHhDLEVBQVE0MEMsdUJBQXdCaEosSUFVekM0RixFQUFnQixHQU9oQkQsRUFBWSxJQUVMMUUsRUFBUWdJLElBQU16QixFQUFRbHJDLEtBQU01SixFQUFTeW9DLHFCQUkzQ3NPLElBQVEsU0FBVUMsR0FFakIsSUFBSW5qQyxFQU9Kay9CLEVBQVFuakMsWUFBYW9uQyxHQUFLeG5DLFVBQVksVUFBWTBoQyxFQUFaLHFCQUNwQkEsRUFEb0Isa0VBUWpDOEYsRUFBR3ZPLGlCQUFrQix3QkFBeUI3b0MsUUFDbERxekMsRUFBVS91QyxLQUFNLFNBQVc0dkMsRUFBYSxnQkFLbkNrRCxFQUFHdk8saUJBQWtCLGNBQWU3b0MsUUFDekNxekMsRUFBVS91QyxLQUFNLE1BQVE0dkMsRUFBYSxhQUFlRCxFQUFXLEtBSTFEbUQsRUFBR3ZPLGlCQUFrQixRQUFVeUksRUFBVSxNQUFPdHhDLFFBQ3JEcXpDLEVBQVUvdUMsS0FBTSxPQVFqQjJQLEVBQVE3VCxFQUFTcUcsY0FBZSxVQUMxQjBELGFBQWMsT0FBUSxJQUM1Qml0QyxFQUFHcG5DLFlBQWFpRSxHQUNWbWpDLEVBQUd2TyxpQkFBa0IsYUFBYzdvQyxRQUN4Q3F6QyxFQUFVL3VDLEtBQU0sTUFBUTR2QyxFQUFhLFFBQVVBLEVBQWEsS0FDM0RBLEVBQWEsZ0JBTVRrRCxFQUFHdk8saUJBQWtCLFlBQWE3b0MsUUFDdkNxekMsRUFBVS91QyxLQUFNLFlBTVg4eUMsRUFBR3ZPLGlCQUFrQixLQUFPeUksRUFBVSxNQUFPdHhDLFFBQ2xEcXpDLEVBQVUvdUMsS0FBTSxZQUtqQjh5QyxFQUFHdk8saUJBQWtCLFFBQ3JCd0ssRUFBVS91QyxLQUFNLGtCQUdqQjZ5QyxJQUFRLFNBQVVDLEdBQ2pCQSxFQUFHeG5DLFVBQVksb0ZBS2YsSUFBSXFFLEVBQVE3VCxFQUFTcUcsY0FBZSxTQUNwQ3dOLEVBQU05SixhQUFjLE9BQVEsVUFDNUJpdEMsRUFBR3BuQyxZQUFhaUUsR0FBUTlKLGFBQWMsT0FBUSxLQUl6Q2l0QyxFQUFHdk8saUJBQWtCLFlBQWE3b0MsUUFDdENxekMsRUFBVS91QyxLQUFNLE9BQVM0dkMsRUFBYSxlQUtXLElBQTdDa0QsRUFBR3ZPLGlCQUFrQixZQUFhN29DLFFBQ3RDcXpDLEVBQVUvdUMsS0FBTSxXQUFZLGFBSzdCNnVDLEVBQVFuakMsWUFBYW9uQyxHQUFLdm9DLFVBQVcsRUFDYyxJQUE5Q3VvQyxFQUFHdk8saUJBQWtCLGFBQWM3b0MsUUFDdkNxekMsRUFBVS91QyxLQUFNLFdBQVksYUFLN0I4eUMsRUFBR3ZPLGlCQUFrQixRQUNyQndLLEVBQVUvdUMsS0FBTSxhQUlYcXFDLEVBQVFtSyxnQkFBa0I1RCxFQUFRbHJDLEtBQVFtb0MsRUFBVWdCLEVBQVFoQixTQUNsRWdCLEVBQVE0Rix1QkFDUjVGLEVBQVE2RixvQkFDUjdGLEVBQVE4RixrQkFDUjlGLEVBQVErRixxQkFFUi9CLElBQVEsU0FBVUMsR0FJakJ6SSxFQUFRd0ssa0JBQW9CaEgsRUFBUTUxQyxLQUFNNjZDLEVBQUksS0FJOUNqRixFQUFRNTFDLEtBQU02NkMsRUFBSSxhQUNsQjlELEVBQWNodkMsS0FBTSxLQUFNK3ZDLE1BSTVCaEIsRUFBWUEsRUFBVXJ6QyxRQUFVLElBQUl1MEMsT0FBUWxCLEVBQVVuMEMsS0FBTSxNQUM1RG8wQyxFQUFnQkEsRUFBY3R6QyxRQUFVLElBQUl1MEMsT0FBUWpCLEVBQWNwMEMsS0FBTSxNQUl4RWs1QyxFQUFhbEQsRUFBUWxyQyxLQUFNbXBDLEVBQVExTSx5QkFLbkNELEVBQVc0UixHQUFjbEQsRUFBUWxyQyxLQUFNbXBDLEVBQVEzTSxVQUM5QyxTQUFVdGxDLEVBQUdDLEdBQ1osSUFBSWk0QyxFQUF1QixJQUFmbDRDLEVBQUVpUCxTQUFpQmpQLEVBQUVtMkIsZ0JBQWtCbjJCLEVBQ2xEbTRDLEVBQU1sNEMsR0FBS0EsRUFBRTJULFdBQ2QsT0FBTzVULElBQU1tNEMsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUlscEMsWUFDbENpcEMsRUFBTTVTLFNBQ0w0UyxFQUFNNVMsU0FBVTZTLEdBQ2hCbjRDLEVBQUV1bEMseUJBQThELEdBQW5DdmxDLEVBQUV1bEMsd0JBQXlCNFMsTUFHM0QsU0FBVW40QyxFQUFHQyxHQUNaLEdBQUtBLEVBQ0osS0FBVUEsRUFBSUEsRUFBRTJULFlBQ2YsR0FBSzNULElBQU1ELEVBQ1YsT0FBTyxFQUlWLE9BQU8sR0FPVDR5QyxFQUFZc0UsRUFDWixTQUFVbDNDLEVBQUdDLEdBR1osR0FBS0QsSUFBTUMsRUFFVixPQURBOHhDLEdBQWUsRUFDUixFQUlSLElBQUkvckMsR0FBV2hHLEVBQUV1bEMseUJBQTJCdGxDLEVBQUVzbEMsd0JBQzlDLE9BQUt2L0IsSUFnQlUsR0FQZkEsR0FBWWhHLEVBQUVvTixlQUFpQnBOLEtBQVNDLEVBQUVtTixlQUFpQm5OLEdBQzFERCxFQUFFdWxDLHdCQUF5QnRsQyxHQUczQixLQUlHd3RDLEVBQVEySyxjQUFnQm40QyxFQUFFc2xDLHdCQUF5QnZsQyxLQUFRZ0csRUFPekRoRyxHQUFLZCxHQUFZYyxFQUFFb04sZUFBaUJpbEMsR0FDeEMvTSxFQUFVK00sRUFBY3J5QyxJQUNoQixFQU9KQyxHQUFLZixHQUFZZSxFQUFFbU4sZUFBaUJpbEMsR0FDeEMvTSxFQUFVK00sRUFBY3B5QyxHQUNqQixFQUlENnhDLEVBQ0o1L0IsRUFBUzQvQixFQUFXOXhDLEdBQU1rUyxFQUFTNC9CLEVBQVc3eEMsR0FDaEQsRUFHZSxFQUFWK0YsR0FBZSxFQUFJLElBRTNCLFNBQVVoRyxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQTh4QyxHQUFlLEVBQ1IsRUFHUixJQUFJeUUsRUFDSHQ3QyxFQUFJLEVBQ0ptOUMsRUFBTXI0QyxFQUFFNFQsV0FDUnVrQyxFQUFNbDRDLEVBQUUyVCxXQUNSMGtDLEVBQUssQ0FBRXQ0QyxHQUNQdTRDLEVBQUssQ0FBRXQ0QyxHQUdSLElBQU1vNEMsSUFBUUYsRUFNYixPQUFPbjRDLEdBQUtkLEdBQVksRUFDdkJlLEdBQUtmLEVBQVcsRUFFaEJtNUMsR0FBTyxFQUNQRixFQUFNLEVBQ05yRyxFQUNFNS9CLEVBQVM0L0IsRUFBVzl4QyxHQUFNa1MsRUFBUzQvQixFQUFXN3hDLEdBQ2hELEVBR0ssR0FBS280QyxJQUFRRixFQUNuQixPQUFPNUIsR0FBY3YyQyxFQUFHQyxHQUt6QixJQURBdTJDLEVBQU14MkMsRUFDSXcyQyxFQUFNQSxFQUFJNWlDLFlBQ25CMGtDLEVBQUc5ckIsUUFBU2dxQixHQUdiLElBREFBLEVBQU12MkMsRUFDSXUyQyxFQUFNQSxFQUFJNWlDLFlBQ25CMmtDLEVBQUcvckIsUUFBU2dxQixHQUliLEtBQVE4QixFQUFJcDlDLEtBQVFxOUMsRUFBSXI5QyxJQUN2QkEsSUFHRCxPQUFPQSxFQUdOcTdDLEdBQWMrQixFQUFJcDlDLEdBQUtxOUMsRUFBSXI5QyxJQU8zQm85QyxFQUFJcDlDLElBQU9tM0MsR0FBZ0IsRUFDM0JrRyxFQUFJcjlDLElBQU9tM0MsRUFBZSxFQUUxQixHQUdLbnpDLEdBL2NDQSxHQWtkVG95QyxHQUFPTCxRQUFVLFNBQVV1SCxFQUFNQyxHQUNoQyxPQUFPbkgsR0FBUWtILEVBQU0sS0FBTSxLQUFNQyxJQUdsQ25ILEdBQU9zRyxnQkFBa0IsU0FBVXpJLEVBQU1xSixHQUd4QyxHQUZBeEcsRUFBYTdDLEdBRVIxQixFQUFRbUssaUJBQW1CMUYsSUFDOUJTLEVBQXdCNkYsRUFBTyxRQUM3QnBHLElBQWtCQSxFQUFjdHBDLEtBQU0wdkMsT0FDdENyRyxJQUFrQkEsRUFBVXJwQyxLQUFNMHZDLElBRXJDLElBQ0MsSUFBSXpKLEVBQU1rQyxFQUFRNTFDLEtBQU04ekMsRUFBTXFKLEdBRzlCLEdBQUt6SixHQUFPdEIsRUFBUXdLLG1CQUluQjlJLEVBQUtqd0MsVUFBdUMsS0FBM0Jpd0MsRUFBS2p3QyxTQUFTK1AsU0FDL0IsT0FBTzgvQixFQUVQLE1BQVEvc0MsR0FDVDJ3QyxFQUF3QjZGLEdBQU0sR0FJaEMsT0FBT2xILEdBQVFrSCxFQUFNdDVDLEVBQVUsS0FBTSxDQUFFaXdDLElBQVNyd0MsT0FBUyxHQUcxRHd5QyxHQUFPaE0sU0FBVyxTQUFVMWtDLEVBQVN1dUMsR0FVcEMsT0FIT3Z1QyxFQUFRd00sZUFBaUJ4TSxJQUFhMUIsR0FDNUM4eUMsRUFBYXB4QyxHQUVQMGtDLEVBQVUxa0MsRUFBU3V1QyxJQUczQm1DLEdBQU9vSCxLQUFPLFNBQVV2SixFQUFNMXpDLElBT3RCMHpDLEVBQUsvaEMsZUFBaUIraEMsSUFBVWp3QyxHQUN0Qzh5QyxFQUFhN0MsR0FHZCxJQUFJWCxFQUFLK0MsRUFBSytFLFdBQVk3NkMsRUFBS3VNLGVBRzlCekssRUFBTWl4QyxHQUFNbEIsRUFBT2p5QyxLQUFNazJDLEVBQUsrRSxXQUFZNzZDLEVBQUt1TSxlQUM5Q3dtQyxFQUFJVyxFQUFNMXpDLEdBQU95MkMsUUFDakIvQixFQUVGLFlBQWVBLElBQVI1eUMsRUFDTkEsRUFDQWt3QyxFQUFReUYsYUFBZWhCLEVBQ3RCL0MsRUFBS2hCLGFBQWMxeUMsSUFDakI4QixFQUFNNHhDLEVBQUt1SSxpQkFBa0JqOEMsS0FBWThCLEVBQUlvN0MsVUFDOUNwN0MsRUFBSXBCLE1BQ0osTUFHSm0xQyxHQUFPdnVDLE9BQVMsU0FBVTYxQyxHQUN6QixPQUFTQSxFQUFNLElBQUs5MUMsUUFBU3l4QyxHQUFZQyxLQUcxQ2xELEdBQU90cUMsTUFBUSxTQUFVc3BDLEdBQ3hCLE1BQU0sSUFBSW52QyxNQUFPLDBDQUE0Q212QyxJQU85RGdCLEdBQU91SCxXQUFhLFNBQVVoSSxHQUM3QixJQUFJMUIsRUFDSDJKLEVBQWEsR0FDYm5KLEVBQUksRUFDSnowQyxFQUFJLEVBT0wsR0FKQTYyQyxHQUFnQnRFLEVBQVFzTCxpQkFDeEJqSCxHQUFhckUsRUFBUXVMLFlBQWNuSSxFQUFRNW9DLE1BQU8sR0FDbEQ0b0MsRUFBUWpCLEtBQU1nRCxHQUVUYixFQUFlLENBQ25CLEtBQVU1QyxFQUFPMEIsRUFBUzMxQyxNQUNwQmkwQyxJQUFTMEIsRUFBUzMxQyxLQUN0QnkwQyxFQUFJbUosRUFBVzExQyxLQUFNbEksSUFHdkIsS0FBUXkwQyxLQUNQa0IsRUFBUWhCLE9BQVFpSixFQUFZbkosR0FBSyxHQVFuQyxPQUZBbUMsRUFBWSxLQUVMakIsR0FPUlcsRUFBVUYsR0FBT0UsUUFBVSxTQUFVckMsR0FDcEMsSUFBSS9sQixFQUNIMmxCLEVBQU0sR0FDTjd6QyxFQUFJLEVBQ0orVCxFQUFXa2dDLEVBQUtsZ0MsU0FFakIsR0FBTUEsR0FRQyxHQUFrQixJQUFiQSxHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUFrQixDQUlqRSxHQUFpQyxpQkFBckJrZ0MsRUFBS2xoQyxZQUNoQixPQUFPa2hDLEVBQUtsaEMsWUFJWixJQUFNa2hDLEVBQU9BLEVBQUt2Z0MsV0FBWXVnQyxFQUFNQSxFQUFPQSxFQUFLN2xCLFlBQy9DeWxCLEdBQU95QyxFQUFTckMsUUFHWixHQUFrQixJQUFibGdDLEdBQStCLElBQWJBLEVBQzdCLE9BQU9rZ0MsRUFBS2pnQyxlQW5CWixLQUFVa2EsRUFBTytsQixFQUFNajBDLE1BR3RCNnpDLEdBQU95QyxFQUFTcG9CLEdBcUJsQixPQUFPMmxCLElBR1J3QyxFQUFPRCxHQUFPMkgsVUFBWSxDQUd6QmxELFlBQWEsR0FFYm1ELGFBQWNsRCxHQUVkcHJDLE1BQU9ncEMsRUFFUDBDLFdBQVksR0FFWm1CLEtBQU0sR0FFTjBCLFNBQVUsQ0FDVCxJQUFLLENBQUVyRSxJQUFLLGFBQWMxRixPQUFPLEdBQ2pDLElBQUssQ0FBRTBGLElBQUssY0FDWixJQUFLLENBQUVBLElBQUssa0JBQW1CMUYsT0FBTyxHQUN0QyxJQUFLLENBQUUwRixJQUFLLG9CQUdic0UsVUFBVyxDQUNWLEtBQVEsU0FBVXh1QyxHQVdqQixPQVZBQSxFQUFPLEdBQU1BLEVBQU8sR0FBSTlILFFBQVNxeEMsR0FBV0MsSUFHNUN4cEMsRUFBTyxJQUFRQSxFQUFPLElBQU9BLEVBQU8sSUFDbkNBLEVBQU8sSUFBTyxJQUFLOUgsUUFBU3F4QyxHQUFXQyxJQUVwQixPQUFmeHBDLEVBQU8sS0FDWEEsRUFBTyxHQUFNLElBQU1BLEVBQU8sR0FBTSxLQUcxQkEsRUFBTTNDLE1BQU8sRUFBRyxJQUd4QixNQUFTLFNBQVUyQyxHQWlDbEIsT0FyQkFBLEVBQU8sR0FBTUEsRUFBTyxHQUFJNUMsY0FFVSxRQUE3QjRDLEVBQU8sR0FBSTNDLE1BQU8sRUFBRyxJQUduQjJDLEVBQU8sSUFDWjBtQyxHQUFPdHFDLE1BQU80RCxFQUFPLElBS3RCQSxFQUFPLEtBQVNBLEVBQU8sR0FDdEJBLEVBQU8sSUFBUUEsRUFBTyxJQUFPLEdBQzdCLEdBQXFCLFNBQWZBLEVBQU8sSUFBaUMsUUFBZkEsRUFBTyxLQUN2Q0EsRUFBTyxLQUFXQSxFQUFPLEdBQU1BLEVBQU8sSUFBd0IsUUFBZkEsRUFBTyxLQUczQ0EsRUFBTyxJQUNsQjBtQyxHQUFPdHFDLE1BQU80RCxFQUFPLElBR2ZBLEdBR1IsT0FBVSxTQUFVQSxHQUNuQixJQUFJeXVDLEVBQ0hDLEdBQVkxdUMsRUFBTyxJQUFPQSxFQUFPLEdBRWxDLE9BQUtncEMsRUFBQSxNQUFxQjlxQyxLQUFNOEIsRUFBTyxJQUMvQixNQUlIQSxFQUFPLEdBQ1hBLEVBQU8sR0FBTUEsRUFBTyxJQUFPQSxFQUFPLElBQU8sR0FHOUIwdUMsR0FBWTVGLEVBQVE1cUMsS0FBTXd3QyxLQUduQ0QsRUFBUzNILEVBQVU0SCxHQUFVLE1BRzdCRCxFQUFTQyxFQUFTcG5DLFFBQVMsSUFBS29uQyxFQUFTeDZDLE9BQVN1NkMsR0FBV0MsRUFBU3g2QyxVQUd4RThMLEVBQU8sR0FBTUEsRUFBTyxHQUFJM0MsTUFBTyxFQUFHb3hDLEdBQ2xDenVDLEVBQU8sR0FBTTB1QyxFQUFTcnhDLE1BQU8sRUFBR294QyxJQUkxQnp1QyxFQUFNM0MsTUFBTyxFQUFHLE1BSXpCc3ZDLE9BQVEsQ0FFUCxJQUFPLFNBQVVnQyxHQUNoQixJQUFJN3RDLEVBQVc2dEMsRUFBaUJ6MkMsUUFBU3F4QyxHQUFXQyxJQUFZcHNDLGNBQ2hFLE1BQTRCLE1BQXJCdXhDLEVBQ04sV0FDQyxPQUFPLEdBRVIsU0FBVXBLLEdBQ1QsT0FBT0EsRUFBS3pqQyxVQUFZeWpDLEVBQUt6akMsU0FBUzFELGdCQUFrQjBELElBSTNELE1BQVMsU0FBVThnQyxHQUNsQixJQUFJZ04sRUFBVWpILEVBQVkvRixFQUFZLEtBRXRDLE9BQU9nTixJQUNKQSxFQUFVLElBQUluRyxPQUFRLE1BQVFMLEVBQy9CLElBQU14RyxFQUFZLElBQU13RyxFQUFhLFNBQWFULEVBQ2pEL0YsR0FBVyxTQUFVMkMsR0FDcEIsT0FBT3FLLEVBQVExd0MsS0FDWSxpQkFBbkJxbUMsRUFBSzNDLFdBQTBCMkMsRUFBSzNDLGdCQUNkLElBQXRCMkMsRUFBS2hCLGNBQ1hnQixFQUFLaEIsYUFBYyxVQUNwQixRQUtOLEtBQVEsU0FBVTF5QyxFQUFNZytDLEVBQVVDLEdBQ2pDLE9BQU8sU0FBVXZLLEdBQ2hCLElBQUl3SyxFQUFTckksR0FBT29ILEtBQU12SixFQUFNMXpDLEdBRWhDLE9BQWUsTUFBVmsrQyxFQUNnQixPQUFiRixHQUVGQSxJQUlORSxHQUFVLEdBSVUsTUFBYkYsRUFBbUJFLElBQVdELEVBQ3ZCLE9BQWJELEVBQW9CRSxJQUFXRCxFQUNsQixPQUFiRCxFQUFvQkMsR0FBcUMsSUFBNUJDLEVBQU96bkMsUUFBU3duQyxHQUNoQyxPQUFiRCxFQUFvQkMsR0FBU0MsRUFBT3puQyxRQUFTd25DLElBQVcsRUFDM0MsT0FBYkQsRUFBb0JDLEdBQVNDLEVBQU8xeEMsT0FBUXl4QyxFQUFNNTZDLFVBQWE0NkMsRUFDbEQsT0FBYkQsR0FBc0IsSUFBTUUsRUFBTzcyQyxRQUFTc3dDLEVBQWEsS0FBUSxLQUFNbGhDLFFBQVN3bkMsSUFBVyxFQUM5RSxPQUFiRCxJQUFvQkUsSUFBV0QsR0FBU0MsRUFBTzF4QyxNQUFPLEVBQUd5eEMsRUFBTTU2QyxPQUFTLEtBQVE0NkMsRUFBUSxRQU8zRixNQUFTLFNBQVVqM0MsRUFBTW0zQyxFQUFNQyxFQUFXekssRUFBT3pSLEdBQ2hELElBQUltYyxFQUFnQyxRQUF2QnIzQyxFQUFLd0YsTUFBTyxFQUFHLEdBQzNCOHhDLEVBQStCLFNBQXJCdDNDLEVBQUt3RixPQUFRLEdBQ3ZCK3hDLEVBQWtCLFlBQVRKLEVBRVYsT0FBaUIsSUFBVnhLLEdBQXdCLElBQVR6UixFQUdyQixTQUFVd1IsR0FDVCxRQUFTQSxFQUFLdjdCLFlBR2YsU0FBVXU3QixFQUFNN3BDLEVBQVUyMEMsR0FDekIsSUFBSW5FLEVBQU9vRSxFQUFhQyxFQUFZL3dCLEVBQU1neEIsRUFBV2p3QixFQUNwRDJxQixFQUFNZ0YsSUFBV0MsRUFBVSxjQUFnQixrQkFDM0NqTyxFQUFTcUQsRUFBS3Y3QixXQUNkblksRUFBT3UrQyxHQUFVN0ssRUFBS3pqQyxTQUFTMUQsY0FDL0JxeUMsR0FBWUosSUFBUUQsRUFDcEJ2RCxHQUFPLEVBRVIsR0FBSzNLLEVBQVMsQ0FHYixHQUFLZ08sRUFBUyxDQUNiLEtBQVFoRixHQUFNLENBRWIsSUFEQTFyQixFQUFPK2xCLEVBQ0cvbEIsRUFBT0EsRUFBTTByQixJQUN0QixHQUFLa0YsRUFDSjV3QixFQUFLMWQsU0FBUzFELGdCQUFrQnZNLEVBQ2QsSUFBbEIydEIsRUFBS25hLFNBRUwsT0FBTyxFQUtUa2IsRUFBUTJxQixFQUFlLFNBQVRyeUMsSUFBb0IwbkIsR0FBUyxjQUU1QyxPQUFPLEVBTVIsR0FIQUEsRUFBUSxDQUFFNHZCLEVBQVVqTyxFQUFPbDlCLFdBQWFrOUIsRUFBTzk4QixXQUcxQytxQyxHQUFXTSxHQWtCZixJQUhBNUQsR0FEQTJELEdBREF0RSxHQUhBb0UsR0FKQUMsR0FEQS93QixFQUFPMGlCLEdBQ1lzRSxLQUFlaG5CLEVBQU1nbkIsR0FBWSxLQUkxQmhuQixFQUFLa3hCLFlBQzVCSCxFQUFZL3dCLEVBQUtreEIsVUFBYSxLQUVaNzNDLElBQVUsSUFDWixLQUFRNnZDLEdBQVd3RCxFQUFPLEtBQ3pCQSxFQUFPLEdBQzNCMXNCLEVBQU9neEIsR0FBYXRPLEVBQU9pSixXQUFZcUYsR0FFN0JoeEIsSUFBU2d4QixHQUFhaHhCLEdBQVFBLEVBQU0wckIsS0FHM0MyQixFQUFPMkQsRUFBWSxJQUFPandCLEVBQU15Z0IsT0FHbEMsR0FBdUIsSUFBbEJ4aEIsRUFBS25hLFlBQW9Cd25DLEdBQVFydEIsSUFBUytsQixFQUFPLENBQ3JEK0ssRUFBYXozQyxHQUFTLENBQUU2dkMsRUFBUzhILEVBQVczRCxHQUM1QyxZQXlCRixHQWxCSzRELElBYUo1RCxFQURBMkQsR0FEQXRFLEdBSEFvRSxHQUpBQyxHQURBL3dCLEVBQU8rbEIsR0FDWWlCLEtBQWVobkIsRUFBTWduQixHQUFZLEtBSTFCaG5CLEVBQUtreEIsWUFDNUJILEVBQVkvd0IsRUFBS2t4QixVQUFhLEtBRVo3M0MsSUFBVSxJQUNaLEtBQVE2dkMsR0FBV3dELEVBQU8sS0FNaEMsSUFBVFcsRUFHSixNQUFVcnRCLElBQVNneEIsR0FBYWh4QixHQUFRQSxFQUFNMHJCLEtBQzNDMkIsRUFBTzJELEVBQVksSUFBT2p3QixFQUFNeWdCLFVBRTNCb1AsRUFDTjV3QixFQUFLMWQsU0FBUzFELGdCQUFrQnZNLEVBQ2QsSUFBbEIydEIsRUFBS25hLGNBQ0h3bkMsSUFHRzRELEtBTUpILEdBTEFDLEVBQWEvd0IsRUFBTWduQixLQUNoQmhuQixFQUFNZ25CLEdBQVksS0FJS2huQixFQUFLa3hCLFlBQzVCSCxFQUFZL3dCLEVBQUtreEIsVUFBYSxLQUVwQjczQyxHQUFTLENBQUU2dkMsRUFBU21FLElBRzdCcnRCLElBQVMrbEIsTUFVbEIsT0FEQXNILEdBQVE5WSxLQUNReVIsR0FBV3FILEVBQU9ySCxHQUFVLEdBQUtxSCxFQUFPckgsR0FBUyxLQUtyRSxPQUFVLFNBQVVtTCxFQUFReEQsR0FNM0IsSUFBSXlELEVBQ0hoTSxFQUFLK0MsRUFBSzRCLFFBQVNvSCxJQUFZaEosRUFBS2tKLFdBQVlGLEVBQU92eUMsZ0JBQ3REc3BDLEdBQU90cUMsTUFBTyx1QkFBeUJ1ekMsR0FLekMsT0FBSy9MLEVBQUk0QixHQUNENUIsRUFBSXVJLEdBSVB2SSxFQUFHMXZDLE9BQVMsR0FDaEIwN0MsRUFBTyxDQUFFRCxFQUFRQSxFQUFRLEdBQUl4RCxHQUN0QnhGLEVBQUtrSixXQUFXMTlDLGVBQWdCdzlDLEVBQU92eUMsZUFDN0NndUMsSUFBYyxTQUFVZixFQUFNaEUsR0FJN0IsSUFIQSxJQUFJeUosRUFDSEMsRUFBVW5NLEVBQUl5RyxFQUFNOEIsR0FDcEI3N0MsRUFBSXkvQyxFQUFRNzdDLE9BQ0w1RCxLQUVQKzVDLEVBREF5RixFQUFNeG9DLEVBQVMraUMsRUFBTTBGLEVBQVN6L0MsT0FDYisxQyxFQUFTeUosR0FBUUMsRUFBU3ovQyxPQUc3QyxTQUFVaTBDLEdBQ1QsT0FBT1gsRUFBSVcsRUFBTSxFQUFHcUwsS0FJaEJoTSxJQUlUMkUsUUFBUyxDQUdSLElBQU82QyxJQUFjLFNBQVV6SCxHQUs5QixJQUFJeDdCLEVBQVEsR0FDWDg5QixFQUFVLEdBQ1YrSixFQUFVakosRUFBU3BELEVBQVN6ckMsUUFBU3d3QyxFQUFPLE9BRTdDLE9BQU9zSCxFQUFTeEssR0FDZjRGLElBQWMsU0FBVWYsRUFBTWhFLEVBQVMzckMsRUFBVTIwQyxHQU1oRCxJQUxBLElBQUk5SyxFQUNIMEwsRUFBWUQsRUFBUzNGLEVBQU0sS0FBTWdGLEVBQUssSUFDdEMvK0MsRUFBSSs1QyxFQUFLbjJDLE9BR0Y1RCxNQUNBaTBDLEVBQU8wTCxFQUFXMy9DLE1BQ3hCKzVDLEVBQU0vNUMsS0FBUysxQyxFQUFTLzFDLEdBQU1pMEMsT0FJakMsU0FBVUEsRUFBTTdwQyxFQUFVMjBDLEdBTXpCLE9BTEFsbkMsRUFBTyxHQUFNbzhCLEVBQ2J5TCxFQUFTN25DLEVBQU8sS0FBTWtuQyxFQUFLcEosR0FHM0I5OUIsRUFBTyxHQUFNLE1BQ0w4OUIsRUFBUWpHLFVBSW5CLElBQU9vTCxJQUFjLFNBQVV6SCxHQUM5QixPQUFPLFNBQVVZLEdBQ2hCLE9BQU9tQyxHQUFRL0MsRUFBVVksR0FBT3J3QyxPQUFTLE1BSTNDLFNBQVlrM0MsSUFBYyxTQUFVOXVCLEdBRW5DLE9BREFBLEVBQU9BLEVBQUtwa0IsUUFBU3F4QyxHQUFXQyxJQUN6QixTQUFVakYsR0FDaEIsT0FBU0EsRUFBS2xoQyxhQUFldWpDLEVBQVNyQyxJQUFTajlCLFFBQVNnVixJQUFVLE1BV3BFLEtBQVE4dUIsSUFBYyxTQUFVOEUsR0FPL0IsT0FKTW5ILEVBQVk3cUMsS0FBTWd5QyxHQUFRLEtBQy9CeEosR0FBT3RxQyxNQUFPLHFCQUF1Qjh6QyxHQUV0Q0EsRUFBT0EsRUFBS2g0QyxRQUFTcXhDLEdBQVdDLElBQVlwc0MsY0FDckMsU0FBVW1uQyxHQUNoQixJQUFJNEwsRUFDSixHQUNDLEdBQU9BLEVBQVc3SSxFQUNqQi9DLEVBQUsyTCxLQUNMM0wsRUFBS2hCLGFBQWMsYUFBZ0JnQixFQUFLaEIsYUFBYyxRQUd0RCxPQURBNE0sRUFBV0EsRUFBUy95QyxpQkFDQTh5QyxHQUEyQyxJQUFuQ0MsRUFBUzdvQyxRQUFTNG9DLEVBQU8sWUFFM0MzTCxFQUFPQSxFQUFLdjdCLGFBQWtDLElBQWxCdTdCLEVBQUtsZ0MsVUFDN0MsT0FBTyxNQUtULE9BQVUsU0FBVWtnQyxHQUNuQixJQUFJNkwsRUFBT3Z6QyxFQUFPd2MsVUFBWXhjLEVBQU93YyxTQUFTKzJCLEtBQzlDLE9BQU9BLEdBQVFBLEVBQUsveUMsTUFBTyxLQUFRa25DLEVBQUtyekIsSUFHekMsS0FBUSxTQUFVcXpCLEdBQ2pCLE9BQU9BLElBQVM4QyxHQUdqQixNQUFTLFNBQVU5QyxHQUNsQixPQUFPQSxJQUFTandDLEVBQVNvTixpQkFDckJwTixFQUFTKzdDLFVBQVkvN0MsRUFBUys3QyxnQkFDN0I5TCxFQUFLMXNDLE1BQVEwc0MsRUFBS3psQixPQUFTeWxCLEVBQUsrTCxXQUl0QyxRQUFXckUsSUFBc0IsR0FDakMsU0FBWUEsSUFBc0IsR0FFbEMsUUFBVyxTQUFVMUgsR0FJcEIsSUFBSXpqQyxFQUFXeWpDLEVBQUt6akMsU0FBUzFELGNBQzdCLE1BQXNCLFVBQWIwRCxLQUEwQnlqQyxFQUFLL2lDLFNBQ3hCLFdBQWJWLEtBQTJCeWpDLEVBQUsxaEMsVUFHcEMsU0FBWSxTQUFVMGhDLEdBU3JCLE9BTEtBLEVBQUt2N0IsWUFFVHU3QixFQUFLdjdCLFdBQVd1bkMsZUFHUSxJQUFsQmhNLEVBQUsxaEMsVUFJYixNQUFTLFNBQVUwaEMsR0FNbEIsSUFBTUEsRUFBT0EsRUFBS3ZnQyxXQUFZdWdDLEVBQU1BLEVBQU9BLEVBQUs3bEIsWUFDL0MsR0FBSzZsQixFQUFLbGdDLFNBQVcsRUFDcEIsT0FBTyxFQUdULE9BQU8sR0FHUixPQUFVLFNBQVVrZ0MsR0FDbkIsT0FBUW9DLEVBQUs0QixRQUFMLE1BQXlCaEUsSUFJbEMsT0FBVSxTQUFVQSxHQUNuQixPQUFPNEUsRUFBUWpyQyxLQUFNcW1DLEVBQUt6akMsV0FHM0IsTUFBUyxTQUFVeWpDLEdBQ2xCLE9BQU8yRSxFQUFRaHJDLEtBQU1xbUMsRUFBS3pqQyxXQUczQixPQUFVLFNBQVV5akMsR0FDbkIsSUFBSTF6QyxFQUFPMHpDLEVBQUt6akMsU0FBUzFELGNBQ3pCLE1BQWdCLFVBQVR2TSxHQUFrQyxXQUFkMHpDLEVBQUsxc0MsTUFBOEIsV0FBVGhILEdBR3RELEtBQVEsU0FBVTB6QyxHQUNqQixJQUFJdUosRUFDSixNQUF1QyxVQUFoQ3ZKLEVBQUt6akMsU0FBUzFELGVBQ04sU0FBZG1uQyxFQUFLMXNDLE9BSXVDLE9BQXhDaTJDLEVBQU92SixFQUFLaEIsYUFBYyxVQUNOLFNBQXZCdUssRUFBSzF3QyxnQkFJUixNQUFTOHVDLElBQXdCLFdBQ2hDLE1BQU8sQ0FBRSxNQUdWLEtBQVFBLElBQXdCLFNBQVVzRSxFQUFldDhDLEdBQ3hELE1BQU8sQ0FBRUEsRUFBUyxNQUduQixHQUFNZzRDLElBQXdCLFNBQVVzRSxFQUFldDhDLEVBQVFpNEMsR0FDOUQsTUFBTyxDQUFFQSxFQUFXLEVBQUlBLEVBQVdqNEMsRUFBU2k0QyxNQUc3QyxLQUFRRCxJQUF3QixTQUFVRSxFQUFjbDRDLEdBRXZELElBREEsSUFBSTVELEVBQUksRUFDQUEsRUFBSTRELEVBQVE1RCxHQUFLLEVBQ3hCODdDLEVBQWE1ekMsS0FBTWxJLEdBRXBCLE9BQU84N0MsS0FHUixJQUFPRixJQUF3QixTQUFVRSxFQUFjbDRDLEdBRXRELElBREEsSUFBSTVELEVBQUksRUFDQUEsRUFBSTRELEVBQVE1RCxHQUFLLEVBQ3hCODdDLEVBQWE1ekMsS0FBTWxJLEdBRXBCLE9BQU84N0MsS0FHUixHQUFNRixJQUF3QixTQUFVRSxFQUFjbDRDLEVBQVFpNEMsR0FNN0QsSUFMQSxJQUFJNzdDLEVBQUk2N0MsRUFBVyxFQUNsQkEsRUFBV2o0QyxFQUNYaTRDLEVBQVdqNEMsRUFDVkEsRUFDQWk0QyxJQUNRNzdDLEdBQUssR0FDZDg3QyxFQUFhNXpDLEtBQU1sSSxHQUVwQixPQUFPODdDLEtBR1IsR0FBTUYsSUFBd0IsU0FBVUUsRUFBY2w0QyxFQUFRaTRDLEdBRTdELElBREEsSUFBSTc3QyxFQUFJNjdDLEVBQVcsRUFBSUEsRUFBV2o0QyxFQUFTaTRDLElBQ2pDNzdDLEVBQUk0RCxHQUNiazRDLEVBQWE1ekMsS0FBTWxJLEdBRXBCLE9BQU84N0MsUUFLTDdELFFBQUwsSUFBd0I1QixFQUFLNEIsUUFBTCxHQUdiLENBQUVrSSxPQUFPLEVBQU1DLFVBQVUsRUFBTUMsTUFBTSxFQUFNejBCLFVBQVUsRUFBTTAwQixPQUFPLEdBQzVFakssRUFBSzRCLFFBQVNqNEMsR0FBTXk3QyxHQUFtQno3QyxHQUV4QyxJQUFNQSxJQUFLLENBQUV1Z0QsUUFBUSxFQUFNQyxPQUFPLEdBQ2pDbkssRUFBSzRCLFFBQVNqNEMsR0FBTTA3QyxHQUFvQjE3QyxHQUl6QyxTQUFTdS9DLE1BMEVULFNBQVM3RSxHQUFZK0YsR0FJcEIsSUFIQSxJQUFJemdELEVBQUksRUFDUHcwQyxFQUFNaU0sRUFBTzc4QyxPQUNieXZDLEVBQVcsR0FDSnJ6QyxFQUFJdzBDLEVBQUt4MEMsSUFDaEJxekMsR0FBWW9OLEVBQVF6Z0QsR0FBSWlCLE1BRXpCLE9BQU9veUMsRUFHUixTQUFTc0csR0FBZStGLEVBQVNnQixFQUFZbnBDLEdBQzVDLElBQUlxaUMsRUFBTThHLEVBQVc5RyxJQUNwQitHLEVBQU9ELEVBQVd0NEMsS0FDbEI3RyxFQUFNby9DLEdBQVEvRyxFQUNkZ0gsRUFBbUJycEMsR0FBZ0IsZUFBUmhXLEVBQzNCcy9DLEVBQVd4NEMsSUFFWixPQUFPcTRDLEVBQVd4TSxNQUdqQixTQUFVRCxFQUFNdnVDLEVBQVNxNUMsR0FDeEIsS0FBVTlLLEVBQU9BLEVBQU0yRixJQUN0QixHQUF1QixJQUFsQjNGLEVBQUtsZ0MsVUFBa0I2c0MsRUFDM0IsT0FBT2xCLEVBQVN6TCxFQUFNdnVDLEVBQVNxNUMsR0FHakMsT0FBTyxHQUlSLFNBQVU5SyxFQUFNdnVDLEVBQVNxNUMsR0FDeEIsSUFBSStCLEVBQVU5QixFQUFhQyxFQUMxQjhCLEVBQVcsQ0FBRTNKLEVBQVN5SixHQUd2QixHQUFLOUIsR0FDSixLQUFVOUssRUFBT0EsRUFBTTJGLElBQ3RCLElBQXVCLElBQWxCM0YsRUFBS2xnQyxVQUFrQjZzQyxJQUN0QmxCLEVBQVN6TCxFQUFNdnVDLEVBQVNxNUMsR0FDNUIsT0FBTyxPQUtWLEtBQVU5SyxFQUFPQSxFQUFNMkYsSUFDdEIsR0FBdUIsSUFBbEIzRixFQUFLbGdDLFVBQWtCNnNDLEVBUTNCLEdBSEE1QixHQUpBQyxFQUFhaEwsRUFBTWlCLEtBQWVqQixFQUFNaUIsR0FBWSxLQUkxQmpCLEVBQUttTCxZQUM1QkgsRUFBWWhMLEVBQUttTCxVQUFhLElBRTVCdUIsR0FBUUEsSUFBUzFNLEVBQUt6akMsU0FBUzFELGNBQ25DbW5DLEVBQU9BLEVBQU0yRixJQUFTM0YsTUFDaEIsS0FBTzZNLEVBQVc5QixFQUFhejlDLEtBQ3JDdS9DLEVBQVUsS0FBUTFKLEdBQVcwSixFQUFVLEtBQVFELEVBRy9DLE9BQVNFLEVBQVUsR0FBTUQsRUFBVSxHQU9uQyxHQUhBOUIsRUFBYXo5QyxHQUFRdy9DLEVBR2RBLEVBQVUsR0FBTXJCLEVBQVN6TCxFQUFNdnVDLEVBQVNxNUMsR0FDOUMsT0FBTyxFQU1aLE9BQU8sR0FJVixTQUFTaUMsR0FBZ0JDLEdBQ3hCLE9BQU9BLEVBQVNyOUMsT0FBUyxFQUN4QixTQUFVcXdDLEVBQU12dUMsRUFBU3E1QyxHQUV4QixJQURBLElBQUkvK0MsRUFBSWloRCxFQUFTcjlDLE9BQ1Q1RCxLQUNQLElBQU1paEQsRUFBVWpoRCxHQUFLaTBDLEVBQU12dUMsRUFBU3E1QyxHQUNuQyxPQUFPLEVBR1QsT0FBTyxHQUVSa0MsRUFBVSxHQVlaLFNBQVNDLEdBQVV2QixFQUFXOThDLEVBQUt3NUMsRUFBUTMyQyxFQUFTcTVDLEdBT25ELElBTkEsSUFBSTlLLEVBQ0hrTixFQUFlLEdBQ2ZuaEQsRUFBSSxFQUNKdzBDLEVBQU1tTCxFQUFVLzdDLE9BQ2hCdzlDLEVBQWdCLE1BQVB2K0MsRUFFRjdDLEVBQUl3MEMsRUFBS3gwQyxLQUNUaTBDLEVBQU8wTCxFQUFXMy9DLE1BQ2xCcThDLElBQVVBLEVBQVFwSSxFQUFNdnVDLEVBQVNxNUMsS0FDdENvQyxFQUFhajVDLEtBQU0rckMsR0FDZG1OLEdBQ0p2K0MsRUFBSXFGLEtBQU1sSSxLQU1kLE9BQU9taEQsRUFHUixTQUFTRSxHQUFZbkQsRUFBVzdLLEVBQVVxTSxFQUFTNEIsRUFBWUMsRUFBWUMsR0FPMUUsT0FOS0YsSUFBZUEsRUFBWXBNLEtBQy9Cb00sRUFBYUQsR0FBWUMsSUFFckJDLElBQWVBLEVBQVlyTSxLQUMvQnFNLEVBQWFGLEdBQVlFLEVBQVlDLElBRS9CMUcsSUFBYyxTQUFVZixFQUFNcEUsRUFBU2p3QyxFQUFTcTVDLEdBQ3RELElBQUlwTyxFQUFNM3dDLEVBQUdpMEMsRUFDWndOLEVBQVMsR0FDVEMsRUFBVSxHQUNWQyxFQUFjaE0sRUFBUS94QyxPQUd0Qmd3QyxFQUFRbUcsR0E1Q1gsU0FBMkIxRyxFQUFVdU8sRUFBVWpNLEdBRzlDLElBRkEsSUFBSTMxQyxFQUFJLEVBQ1B3MEMsRUFBTW9OLEVBQVNoK0MsT0FDUjVELEVBQUl3MEMsRUFBS3gwQyxJQUNoQm8yQyxHQUFRL0MsRUFBVXVPLEVBQVU1aEQsR0FBSzIxQyxHQUVsQyxPQUFPQSxFQXNDV2tNLENBQ2Z4TyxHQUFZLElBQ1ozdEMsRUFBUXFPLFNBQVcsQ0FBRXJPLEdBQVlBLEVBQ2pDLElBSURvOEMsR0FBWTVELElBQWVuRSxHQUFTMUcsRUFFbkNPLEVBREFzTixHQUFVdE4sRUFBTzZOLEVBQVF2RCxFQUFXeDRDLEVBQVNxNUMsR0FHOUNnRCxFQUFhckMsRUFHWjZCLElBQWdCeEgsRUFBT21FLEVBQVl5RCxHQUFlTCxHQUdqRCxHQUdBM0wsRUFDRG1NLEVBUUYsR0FMS3BDLEdBQ0pBLEVBQVNvQyxFQUFXQyxFQUFZcjhDLEVBQVNxNUMsR0FJckN1QyxFQU1KLElBTEEzUSxFQUFPdVEsR0FBVWEsRUFBWUwsR0FDN0JKLEVBQVkzUSxFQUFNLEdBQUlqckMsRUFBU3E1QyxHQUcvQi8rQyxFQUFJMndDLEVBQUsvc0MsT0FDRDVELE1BQ0FpMEMsRUFBT3RELEVBQU0zd0MsTUFDbkIraEQsRUFBWUwsRUFBUzFoRCxNQUFXOGhELEVBQVdKLEVBQVMxaEQsSUFBUWkwQyxJQUsvRCxHQUFLOEYsR0FDSixHQUFLd0gsR0FBY3JELEVBQVksQ0FDOUIsR0FBS3FELEVBQWEsQ0FLakIsSUFGQTVRLEVBQU8sR0FDUDN3QyxFQUFJK2hELEVBQVduK0MsT0FDUDVELE1BQ0FpMEMsRUFBTzhOLEVBQVkvaEQsS0FHekIyd0MsRUFBS3pvQyxLQUFRNDVDLEVBQVc5aEQsR0FBTWkwQyxHQUdoQ3NOLEVBQVksS0FBUVEsRUFBYSxHQUFNcFIsRUFBTW9PLEdBSzlDLElBREEvK0MsRUFBSStoRCxFQUFXbitDLE9BQ1A1RCxNQUNBaTBDLEVBQU84TixFQUFZL2hELE1BQ3ZCMndDLEVBQU80USxFQUFhdnFDLEVBQVMraUMsRUFBTTlGLEdBQVN3TixFQUFRemhELEtBQVMsSUFFL0QrNUMsRUFBTXBKLEtBQVlnRixFQUFTaEYsR0FBU3NELFVBT3ZDOE4sRUFBYWIsR0FDWmEsSUFBZXBNLEVBQ2RvTSxFQUFXcE4sT0FBUWdOLEVBQWFJLEVBQVduK0MsUUFDM0NtK0MsR0FFR1IsRUFDSkEsRUFBWSxLQUFNNUwsRUFBU29NLEVBQVloRCxHQUV2QzcyQyxFQUFLbUIsTUFBT3NzQyxFQUFTb00sTUFNekIsU0FBU0MsR0FBbUJ2QixHQXlCM0IsSUF4QkEsSUFBSXdCLEVBQWN2QyxFQUFTakwsRUFDMUJELEVBQU1pTSxFQUFPNzhDLE9BQ2JzK0MsRUFBa0I3TCxFQUFLNEgsU0FBVXdDLEVBQVEsR0FBSWw1QyxNQUM3QzQ2QyxFQUFtQkQsR0FBbUI3TCxFQUFLNEgsU0FBVSxLQUNyRGorQyxFQUFJa2lELEVBQWtCLEVBQUksRUFHMUJFLEVBQWV6SSxJQUFlLFNBQVUxRixHQUN2QyxPQUFPQSxJQUFTZ08sSUFDZEUsR0FBa0IsR0FDckJFLEVBQWtCMUksSUFBZSxTQUFVMUYsR0FDMUMsT0FBT2o5QixFQUFTaXJDLEVBQWNoTyxJQUFVLElBQ3RDa08sR0FBa0IsR0FDckJsQixFQUFXLENBQUUsU0FBVWhOLEVBQU12dUMsRUFBU3E1QyxHQUNyQyxJQUFJbEwsR0FBU3FPLElBQXFCbkQsR0FBT3I1QyxJQUFZaXhDLE1BQ2xEc0wsRUFBZXY4QyxHQUFVcU8sU0FDMUJxdUMsRUFBY25PLEVBQU12dUMsRUFBU3E1QyxHQUM3QnNELEVBQWlCcE8sRUFBTXZ1QyxFQUFTcTVDLElBSWxDLE9BREFrRCxFQUFlLEtBQ1JwTyxJQUdEN3pDLEVBQUl3MEMsRUFBS3gwQyxJQUNoQixHQUFPMC9DLEVBQVVySixFQUFLNEgsU0FBVXdDLEVBQVF6Z0QsR0FBSXVILE1BQzNDMDVDLEVBQVcsQ0FBRXRILEdBQWVxSCxHQUFnQkMsR0FBWXZCLFFBQ2xELENBSU4sSUFIQUEsRUFBVXJKLEVBQUtnRyxPQUFRb0UsRUFBUXpnRCxHQUFJdUgsTUFBTzhCLE1BQU8sS0FBTW8zQyxFQUFRemdELEdBQUkrMUMsVUFHckRiLEdBQVksQ0FJekIsSUFEQVQsSUFBTXowQyxFQUNFeTBDLEVBQUlELElBQ042QixFQUFLNEgsU0FBVXdDLEVBQVFoTSxHQUFJbHRDLE1BRGhCa3RDLEtBS2pCLE9BQU80TSxHQUNOcmhELEVBQUksR0FBS2doRCxHQUFnQkMsR0FDekJqaEQsRUFBSSxHQUFLMDZDLEdBR1QrRixFQUNFMXpDLE1BQU8sRUFBRy9NLEVBQUksR0FDZCt2QixPQUFRLENBQUU5dUIsTUFBZ0MsTUFBekJ3L0MsRUFBUXpnRCxFQUFJLEdBQUl1SCxLQUFlLElBQU0sTUFDdERLLFFBQVN3d0MsRUFBTyxNQUNsQnNILEVBQ0ExL0MsRUFBSXkwQyxHQUFLdU4sR0FBbUJ2QixFQUFPMXpDLE1BQU8vTSxFQUFHeTBDLElBQzdDQSxFQUFJRCxHQUFPd04sR0FBcUJ2QixFQUFTQSxFQUFPMXpDLE1BQU8wbkMsSUFDdkRBLEVBQUlELEdBQU9rRyxHQUFZK0YsSUFHekJRLEVBQVMvNEMsS0FBTXczQyxHQUlqQixPQUFPc0IsR0FBZ0JDLEdBb1R4QixPQXRwQkExQixHQUFXMzlDLFVBQVl5MEMsRUFBS2lNLFFBQVVqTSxFQUFLNEIsUUFDM0M1QixFQUFLa0osV0FBYSxJQUFJQSxHQUV0Qi9JLEVBQVdKLEdBQU9JLFNBQVcsU0FBVW5ELEVBQVVrUCxHQUNoRCxJQUFJOUMsRUFBUy92QyxFQUFPK3dDLEVBQVFsNUMsRUFDM0JpN0MsRUFBT3ZJLEVBQVF3SSxFQUNmQyxFQUFTbkwsRUFBWWxFLEVBQVcsS0FFakMsR0FBS3FQLEVBQ0osT0FBT0gsRUFBWSxFQUFJRyxFQUFPMzFDLE1BQU8sR0FPdEMsSUFKQXkxQyxFQUFRblAsRUFDUjRHLEVBQVMsR0FDVHdJLEVBQWFwTSxFQUFLNkgsVUFFVnNFLEdBQVEsQ0EyQmYsSUFBTWo3QyxLQXhCQWs0QyxLQUFhL3ZDLEVBQVEyb0MsRUFBTytCLEtBQU1vSSxNQUNsQzl5QyxJQUdKOHlDLEVBQVFBLEVBQU16MUMsTUFBTzJDLEVBQU8sR0FBSTlMLFNBQVk0K0MsR0FFN0N2SSxFQUFPL3hDLEtBQVF1NEMsRUFBUyxLQUd6QmhCLEdBQVUsR0FHSC92QyxFQUFRNG9DLEVBQWE4QixLQUFNb0ksTUFDakMvQyxFQUFVL3ZDLEVBQU00TixRQUNoQm1qQyxFQUFPdjRDLEtBQU0sQ0FDWmpILE1BQU93K0MsRUFHUGw0QyxLQUFNbUksRUFBTyxHQUFJOUgsUUFBU3d3QyxFQUFPLE9BRWxDb0ssRUFBUUEsRUFBTXoxQyxNQUFPMHlDLEVBQVE3N0MsU0FJaEJ5eUMsRUFBS2dHLFNBQ1gzc0MsRUFBUWdwQyxFQUFXbnhDLEdBQU82eUMsS0FBTW9JLEtBQWdCQyxFQUFZbDdDLE1BQ2hFbUksRUFBUSt5QyxFQUFZbDdDLEdBQVFtSSxNQUM5Qit2QyxFQUFVL3ZDLEVBQU00TixRQUNoQm1qQyxFQUFPdjRDLEtBQU0sQ0FDWmpILE1BQU93K0MsRUFDUGw0QyxLQUFNQSxFQUNOd3VDLFFBQVNybUMsSUFFVjh5QyxFQUFRQSxFQUFNejFDLE1BQU8weUMsRUFBUTc3QyxTQUkvQixJQUFNNjdDLEVBQ0wsTUFPRixPQUFPOEMsRUFDTkMsRUFBTTUrQyxPQUNONCtDLEVBQ0NwTSxHQUFPdHFDLE1BQU91bkMsR0FHZGtFLEVBQVlsRSxFQUFVNEcsR0FBU2x0QyxNQUFPLElBNFp6QzBwQyxFQUFVTCxHQUFPSyxRQUFVLFNBQVVwRCxFQUFVM2pDLEdBQzlDLElBQUkxUCxFQUNIMmlELEVBQWMsR0FDZEMsRUFBa0IsR0FDbEJGLEVBQVNsTCxFQUFlbkUsRUFBVyxLQUVwQyxJQUFNcVAsRUFBUyxDQU9kLElBSk1oekMsSUFDTEEsRUFBUThtQyxFQUFVbkQsSUFFbkJyekMsRUFBSTBQLEVBQU05TCxPQUNGNUQsTUFDUDBpRCxFQUFTVixHQUFtQnR5QyxFQUFPMVAsS0FDdEJrMUMsR0FDWnlOLEVBQVl6NkMsS0FBTXc2QyxHQUVsQkUsRUFBZ0IxNkMsS0FBTXc2QyxJQUt4QkEsRUFBU2xMLEVBQ1JuRSxFQXJKSCxTQUFtQ3VQLEVBQWlCRCxHQUNuRCxJQUFJRSxFQUFRRixFQUFZLytDLE9BQVMsRUFDaENrL0MsRUFBWUYsRUFBZ0JoL0MsT0FBUyxFQUNyQ20vQyxFQUFlLFNBQVVoSixFQUFNcjBDLEVBQVNxNUMsRUFBS3BKLEVBQVNxTixHQUNyRCxJQUFJL08sRUFBTVEsRUFBR2lMLEVBQ1p1RCxFQUFlLEVBQ2ZqakQsRUFBSSxJQUNKMi9DLEVBQVk1RixHQUFRLEdBQ3BCbUosRUFBYSxHQUNiQyxFQUFnQnhNLEVBR2hCL0MsRUFBUW1HLEdBQVErSSxHQUFhek0sRUFBS2tHLEtBQUwsSUFBb0IsSUFBS3lHLEdBR3RESSxFQUFrQmhNLEdBQTRCLE1BQWpCK0wsRUFBd0IsRUFBSW5qQyxLQUFLd1EsVUFBWSxHQUMxRWdrQixFQUFNWixFQUFNaHdDLE9BY2IsSUFaS28vQyxJQU1Kck0sRUFBbUJqeEMsR0FBVzFCLEdBQVkwQixHQUFXczlDLEdBTTlDaGpELElBQU13MEMsR0FBZ0MsT0FBdkJQLEVBQU9MLEVBQU81ekMsSUFBZUEsSUFBTSxDQUN6RCxHQUFLOGlELEdBQWE3TyxFQUFPLENBV3hCLElBVkFRLEVBQUksRUFNRS91QyxHQUFXdXVDLEVBQUsvaEMsZUFBaUJsTyxJQUN0Qzh5QyxFQUFhN0MsR0FDYjhLLEdBQU8vSCxHQUVFMEksRUFBVWtELEVBQWlCbk8sTUFDcEMsR0FBS2lMLEVBQVN6TCxFQUFNdnVDLEdBQVcxQixFQUFVKzZDLEdBQVEsQ0FDaERwSixFQUFRenRDLEtBQU0rckMsR0FDZCxNQUdHK08sSUFDSjVMLEVBQVVnTSxHQUtQUCxLQUdHNU8sR0FBUXlMLEdBQVd6TCxJQUN6QmdQLElBSUlsSixHQUNKNEYsRUFBVXozQyxLQUFNK3JDLElBZ0JuQixHQVRBZ1AsR0FBZ0JqakQsRUFTWDZpRCxHQUFTN2lELElBQU1pakQsRUFBZSxDQUVsQyxJQURBeE8sRUFBSSxFQUNNaUwsRUFBVWlELEVBQWFsTyxNQUNoQ2lMLEVBQVNDLEVBQVd1RCxFQUFZeDlDLEVBQVNxNUMsR0FHMUMsR0FBS2hGLEVBQU8sQ0FHWCxHQUFLa0osRUFBZSxFQUNuQixLQUFRampELEtBQ0MyL0MsRUFBVzMvQyxJQUFPa2pELEVBQVlsakQsS0FDckNrakQsRUFBWWxqRCxHQUFNMHZDLEVBQUl2dkMsS0FBTXcxQyxJQU0vQnVOLEVBQWFoQyxHQUFVZ0MsR0FJeEJoN0MsRUFBS21CLE1BQU9zc0MsRUFBU3VOLEdBR2hCRixJQUFjakosR0FBUW1KLEVBQVd0L0MsT0FBUyxHQUM1Q3EvQyxFQUFlTixFQUFZLytDLE9BQVcsR0FFeEN3eUMsR0FBT3VILFdBQVloSSxHQVVyQixPQUxLcU4sSUFDSjVMLEVBQVVnTSxFQUNWek0sRUFBbUJ3TSxHQUdieEQsR0FHVCxPQUFPa0QsRUFDTi9ILEdBQWNpSSxHQUNkQSxFQTRCQ00sQ0FBMEJULEVBQWlCRCxLQUlyQ3RQLFNBQVdBLEVBRW5CLE9BQU9xUCxHQVlSaE0sRUFBU04sR0FBT00sT0FBUyxTQUFVckQsRUFBVTN0QyxFQUFTaXdDLEVBQVNvRSxHQUM5RCxJQUFJLzVDLEVBQUd5Z0QsRUFBUTZDLEVBQU8vN0MsRUFBTWcxQyxFQUMzQmdILEVBQStCLG1CQUFibFEsR0FBMkJBLEVBQzdDM2pDLEdBQVNxcUMsR0FBUXZELEVBQVluRCxFQUFXa1EsRUFBU2xRLFVBQVlBLEdBTTlELEdBSkFzQyxFQUFVQSxHQUFXLEdBSUMsSUFBakJqbUMsRUFBTTlMLE9BQWUsQ0FJekIsSUFEQTY4QyxFQUFTL3dDLEVBQU8sR0FBTUEsRUFBTyxHQUFJM0MsTUFBTyxJQUM1Qm5KLE9BQVMsR0FBc0MsUUFBL0IwL0MsRUFBUTdDLEVBQVEsSUFBTWw1QyxNQUM1QixJQUFyQjdCLEVBQVFxTyxVQUFrQmlqQyxHQUFrQlgsRUFBSzRILFNBQVV3QyxFQUFRLEdBQUlsNUMsTUFBUyxDQUloRixLQUZBN0IsR0FBWTJ3QyxFQUFLa0csS0FBTCxHQUFtQitHLEVBQU12TixRQUFTLEdBQzVDbnVDLFFBQVNxeEMsR0FBV0MsSUFBYXh6QyxJQUFhLElBQU0sSUFFckQsT0FBT2l3QyxFQUdJNE4sSUFDWDc5QyxFQUFVQSxFQUFRZ1QsWUFHbkIyNkIsRUFBV0EsRUFBU3RtQyxNQUFPMHpDLEVBQU9uakMsUUFBUXJjLE1BQU0yQyxRQUtqRCxJQURBNUQsRUFBSTA0QyxFQUFBLGFBQTRCOXFDLEtBQU15bEMsR0FBYSxFQUFJb04sRUFBTzc4QyxPQUN0RDVELE1BQ1BzakQsRUFBUTdDLEVBQVF6Z0QsSUFHWHEyQyxFQUFLNEgsU0FBWTEyQyxFQUFPKzdDLEVBQU0vN0MsUUFHbkMsSUFBT2cxQyxFQUFPbEcsRUFBS2tHLEtBQU1oMUMsTUFHakJ3eUMsRUFBT3dDLEVBQ2IrRyxFQUFNdk4sUUFBUyxHQUFJbnVDLFFBQVNxeEMsR0FBV0MsSUFDdkNGLEdBQVNwckMsS0FBTTZ5QyxFQUFRLEdBQUlsNUMsT0FBVWl6QyxHQUFhOTBDLEVBQVFnVCxhQUN6RGhULElBQ0ksQ0FLTCxHQUZBKzZDLEVBQU85TCxPQUFRMzBDLEVBQUcsS0FDbEJxekMsRUFBVzBHLEVBQUtuMkMsUUFBVTgyQyxHQUFZK0YsSUFHckMsT0FEQXY0QyxFQUFLbUIsTUFBT3NzQyxFQUFTb0UsR0FDZHBFLEVBR1IsT0FlSixPQVBFNE4sR0FBWTlNLEVBQVNwRCxFQUFVM2pDLElBQ2hDcXFDLEVBQ0FyMEMsR0FDQ3N4QyxFQUNEckIsR0FDQ2p3QyxHQUFXc3pDLEdBQVNwckMsS0FBTXlsQyxJQUFjbUgsR0FBYTkwQyxFQUFRZ1QsYUFBZ0JoVCxHQUV4RWl3QyxHQU1ScEQsRUFBUXVMLFdBQWE1SSxFQUFRbHlDLE1BQU8sSUFBSzB4QyxLQUFNZ0QsR0FBWTUwQyxLQUFNLE1BQVNveUMsRUFJMUUzQyxFQUFRc0wsbUJBQXFCaEgsRUFHN0JDLElBSUF2RSxFQUFRMkssYUFBZW5DLElBQVEsU0FBVUMsR0FHeEMsT0FBNEUsRUFBckVBLEVBQUczUSx3QkFBeUJybUMsRUFBU3FHLGNBQWUsZ0JBTXREMHdDLElBQVEsU0FBVUMsR0FFdkIsT0FEQUEsRUFBR3huQyxVQUFZLG1CQUNpQyxNQUF6Q3duQyxFQUFHdG5DLFdBQVd1L0IsYUFBYyxZQUVuQ2dJLEdBQVcsMEJBQTBCLFNBQVVoSCxFQUFNMXpDLEVBQU1nMkMsR0FDMUQsSUFBTUEsRUFDTCxPQUFPdEMsRUFBS2hCLGFBQWMxeUMsRUFBNkIsU0FBdkJBLEVBQUt1TSxjQUEyQixFQUFJLE1BT2pFeWxDLEVBQVF5RixZQUFlK0MsSUFBUSxTQUFVQyxHQUc5QyxPQUZBQSxFQUFHeG5DLFVBQVksV0FDZnduQyxFQUFHdG5DLFdBQVczRixhQUFjLFFBQVMsSUFDWSxLQUExQ2l0QyxFQUFHdG5DLFdBQVd1L0IsYUFBYyxhQUVuQ2dJLEdBQVcsU0FBUyxTQUFVaEgsRUFBTXVQLEVBQU9qTixHQUMxQyxJQUFNQSxHQUF5QyxVQUFoQ3RDLEVBQUt6akMsU0FBUzFELGNBQzVCLE9BQU9tbkMsRUFBS3ppQyxnQkFPVHVwQyxJQUFRLFNBQVVDLEdBQ3ZCLE9BQXdDLE1BQWpDQSxFQUFHL0gsYUFBYyxnQkFFeEJnSSxHQUFXcEQsR0FBVSxTQUFVNUQsRUFBTTF6QyxFQUFNZzJDLEdBQzFDLElBQUlsMEMsRUFDSixJQUFNazBDLEVBQ0wsT0FBd0IsSUFBakJ0QyxFQUFNMXpDLEdBQWtCQSxFQUFLdU0sZUFDakN6SyxFQUFNNHhDLEVBQUt1SSxpQkFBa0JqOEMsS0FBWThCLEVBQUlvN0MsVUFDOUNwN0MsRUFBSXBCLE1BQ0osUUFLRW0xQyxHQTE0RUwsQ0E0NEVHN3BDLEdBSUw2bUMsRUFBT21KLEtBQU9uRyxHQUNkaEQsRUFBT2tLLEtBQU9sSCxFQUFPMkgsV0FHUixLQUFRM0ssRUFBT2tLLEtBQUtyRixRQUNqQzdFLEVBQU91SyxXQUFhdkssRUFBT3FRLE9BQVNyTixFQUFPdUgsV0FDM0N2SyxFQUFPcG5CLEtBQU9vcUIsRUFBT0UsUUFDckJsRCxFQUFPc1EsU0FBV3ROLEVBQU9HLE1BQ3pCbkQsRUFBT2hKLFNBQVdnTSxFQUFPaE0sU0FDekJnSixFQUFPdVEsZUFBaUJ2TixFQUFPdnVDLE9BSy9CLElBQUkreEMsRUFBTSxTQUFVM0YsRUFBTTJGLEVBQUtnSyxHQUk5QixJQUhBLElBQUluRSxFQUFVLEdBQ2JvRSxPQUFxQjVPLElBQVYyTyxHQUVGM1AsRUFBT0EsRUFBTTJGLEtBQTZCLElBQWxCM0YsRUFBS2xnQyxVQUN0QyxHQUF1QixJQUFsQmtnQyxFQUFLbGdDLFNBQWlCLENBQzFCLEdBQUs4dkMsR0FBWXpRLEVBQVFhLEdBQU8zN0IsR0FBSXNyQyxHQUNuQyxNQUVEbkUsRUFBUXYzQyxLQUFNK3JDLEdBR2hCLE9BQU93TCxHQUlKcUUsRUFBVyxTQUFVcmlELEVBQUd3eUMsR0FHM0IsSUFGQSxJQUFJd0wsRUFBVSxHQUVOaCtDLEVBQUdBLEVBQUlBLEVBQUUyc0IsWUFDSSxJQUFmM3NCLEVBQUVzUyxVQUFrQnRTLElBQU13eUMsR0FDOUJ3TCxFQUFRdjNDLEtBQU16RyxHQUloQixPQUFPZytDLEdBSUpzRSxFQUFnQjNRLEVBQU9rSyxLQUFLNXRDLE1BQU1zMEMsYUFJdEMsU0FBU3h6QyxFQUFVeWpDLEVBQU0xekMsR0FFdkIsT0FBTzB6QyxFQUFLempDLFVBQVl5akMsRUFBS3pqQyxTQUFTMUQsZ0JBQWtCdk0sRUFBS3VNLGNBRy9ELElBQUltM0MsRUFBZSxrRUFLbkIsU0FBU0MsRUFBUTNHLEVBQVU0RyxFQUFXQyxHQUNyQyxPQUFLNVIsRUFBWTJSLEdBQ1QvUSxFQUFPaUIsS0FBTWtKLEdBQVUsU0FBVXRKLEVBQU1qMEMsR0FDN0MsUUFBU21rRCxFQUFVaGtELEtBQU04ekMsRUFBTWowQyxFQUFHaTBDLEtBQVdtUSxLQUsxQ0QsRUFBVXB3QyxTQUNQcS9CLEVBQU9pQixLQUFNa0osR0FBVSxTQUFVdEosR0FDdkMsT0FBU0EsSUFBU2tRLElBQWdCQyxLQUtWLGlCQUFkRCxFQUNKL1EsRUFBT2lCLEtBQU1rSixHQUFVLFNBQVV0SixHQUN2QyxPQUFTajlCLEVBQVE3VyxLQUFNZ2tELEVBQVdsUSxJQUFVLElBQVFtUSxLQUsvQ2hSLEVBQU9pSixPQUFROEgsRUFBVzVHLEVBQVU2RyxHQUc1Q2hSLEVBQU9pSixPQUFTLFNBQVVpQixFQUFNMUosRUFBT3dRLEdBQ3RDLElBQUluUSxFQUFPTCxFQUFPLEdBTWxCLE9BSkt3USxJQUNKOUcsRUFBTyxRQUFVQSxFQUFPLEtBR0gsSUFBakIxSixFQUFNaHdDLFFBQWtDLElBQWxCcXdDLEVBQUtsZ0MsU0FDeEJxL0IsRUFBT21KLEtBQUtHLGdCQUFpQnpJLEVBQU1xSixHQUFTLENBQUVySixHQUFTLEdBR3hEYixFQUFPbUosS0FBS3hHLFFBQVN1SCxFQUFNbEssRUFBT2lCLEtBQU1ULEdBQU8sU0FBVUssR0FDL0QsT0FBeUIsSUFBbEJBLEVBQUtsZ0MsY0FJZHEvQixFQUFPRSxHQUFHL0ksT0FBUSxDQUNqQmdTLEtBQU0sU0FBVWxKLEdBQ2YsSUFBSXJ6QyxFQUFHNnpDLEVBQ05XLEVBQU1odkMsS0FBSzVCLE9BQ1h5Z0QsRUFBTzcrQyxLQUVSLEdBQXlCLGlCQUFiNnRDLEVBQ1gsT0FBTzd0QyxLQUFLbXVDLFVBQVdQLEVBQVFDLEdBQVdnSixRQUFRLFdBQ2pELElBQU1yOEMsRUFBSSxFQUFHQSxFQUFJdzBDLEVBQUt4MEMsSUFDckIsR0FBS296QyxFQUFPaEosU0FBVWlhLEVBQU1ya0QsR0FBS3dGLE1BQ2hDLE9BQU8sTUFRWCxJQUZBcXVDLEVBQU1ydUMsS0FBS211QyxVQUFXLElBRWhCM3pDLEVBQUksRUFBR0EsRUFBSXcwQyxFQUFLeDBDLElBQ3JCb3pDLEVBQU9tSixLQUFNbEosRUFBVWdSLEVBQU1ya0QsR0FBSzZ6QyxHQUduQyxPQUFPVyxFQUFNLEVBQUlwQixFQUFPdUssV0FBWTlKLEdBQVFBLEdBRTdDd0ksT0FBUSxTQUFVaEosR0FDakIsT0FBTzd0QyxLQUFLbXVDLFVBQVd1USxFQUFRMStDLEtBQU02dEMsR0FBWSxJQUFJLEtBRXREK1EsSUFBSyxTQUFVL1EsR0FDZCxPQUFPN3RDLEtBQUttdUMsVUFBV3VRLEVBQVExK0MsS0FBTTZ0QyxHQUFZLElBQUksS0FFdEQvNkIsR0FBSSxTQUFVKzZCLEdBQ2IsUUFBUzZRLEVBQ1IxK0MsS0FJb0IsaUJBQWI2dEMsR0FBeUIwUSxFQUFjbjJDLEtBQU15bEMsR0FDbkRELEVBQVFDLEdBQ1JBLEdBQVksSUFDYixHQUNDenZDLFVBU0osSUFBSTBnRCxFQU1IdkwsRUFBYSx1Q0FFTjNGLEVBQU9FLEdBQUdDLEtBQU8sU0FBVUYsRUFBVTN0QyxFQUFTNitDLEdBQ3BELElBQUk3MEMsRUFBT3VrQyxFQUdYLElBQU1aLEVBQ0wsT0FBTzd0QyxLQVFSLEdBSEErK0MsRUFBT0EsR0FBUUQsRUFHVSxpQkFBYmpSLEVBQXdCLENBYW5DLEtBUEMzakMsRUFMc0IsTUFBbEIyakMsRUFBVSxJQUNzQixNQUFwQ0EsRUFBVUEsRUFBU3p2QyxPQUFTLElBQzVCeXZDLEVBQVN6dkMsUUFBVSxFQUdYLENBQUUsS0FBTXl2QyxFQUFVLE1BR2xCMEYsRUFBV3FCLEtBQU0vRyxNQUlWM2pDLEVBQU8sSUFBUWhLLEVBNkN4QixPQUFNQSxHQUFXQSxFQUFRK3RDLFFBQ3RCL3RDLEdBQVc2K0MsR0FBT2hJLEtBQU1sSixHQUsxQjd0QyxLQUFLWSxZQUFhVixHQUFVNjJDLEtBQU1sSixHQWhEekMsR0FBSzNqQyxFQUFPLEdBQU0sQ0FZakIsR0FYQWhLLEVBQVVBLGFBQW1CMHRDLEVBQVMxdEMsRUFBUyxHQUFNQSxFQUlyRDB0QyxFQUFPVSxNQUFPdHVDLEtBQU00dEMsRUFBT29SLFVBQzFCOTBDLEVBQU8sR0FDUGhLLEdBQVdBLEVBQVFxTyxTQUFXck8sRUFBUXdNLGVBQWlCeE0sRUFBVTFCLEdBQ2pFLElBSUlpZ0QsRUFBV3IyQyxLQUFNOEIsRUFBTyxLQUFTMGpDLEVBQU80QixjQUFldHZDLEdBQzNELElBQU1nSyxLQUFTaEssRUFHVDhzQyxFQUFZaHRDLEtBQU1rSyxJQUN0QmxLLEtBQU1rSyxHQUFTaEssRUFBU2dLLElBSXhCbEssS0FBS2c0QyxLQUFNOXRDLEVBQU9oSyxFQUFTZ0ssSUFLOUIsT0FBT2xLLEtBWVAsT0FSQXl1QyxFQUFPandDLEVBQVNDLGVBQWdCeUwsRUFBTyxPQUt0Q2xLLEtBQU0sR0FBTXl1QyxFQUNaenVDLEtBQUs1QixPQUFTLEdBRVI0QixLQWNILE9BQUs2dEMsRUFBU3QvQixVQUNwQnZPLEtBQU0sR0FBTTZ0QyxFQUNaN3RDLEtBQUs1QixPQUFTLEVBQ1A0QixNQUlJZ3RDLEVBQVlhLFFBQ0Q0QixJQUFmc1AsRUFBS0UsTUFDWEYsRUFBS0UsTUFBT3BSLEdBR1pBLEVBQVVELEdBR0xBLEVBQU9zQyxVQUFXckMsRUFBVTd0QyxRQUloQzVELFVBQVl3eEMsRUFBT0UsR0FHeEJnUixFQUFhbFIsRUFBUXB2QyxHQUdyQixJQUFJMGdELEVBQWUsaUNBR2xCQyxFQUFtQixDQUNsQno5QyxVQUFVLEVBQ1YwOUMsVUFBVSxFQUNWeDhDLE1BQU0sRUFDTnk4QyxNQUFNLEdBb0ZSLFNBQVMzcEMsRUFBU29nQyxFQUFLMUIsR0FDdEIsTUFBVTBCLEVBQU1BLEVBQUsxQixLQUE0QixJQUFqQjBCLEVBQUl2bkMsV0FDcEMsT0FBT3VuQyxFQW5GUmxJLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCbGEsSUFBSyxTQUFVL3NCLEdBQ2QsSUFBSXdoRCxFQUFVMVIsRUFBUTl2QyxFQUFRa0MsTUFDN0J2RixFQUFJNmtELEVBQVFsaEQsT0FFYixPQUFPNEIsS0FBSzYyQyxRQUFRLFdBRW5CLElBREEsSUFBSXI4QyxFQUFJLEVBQ0FBLEVBQUlDLEVBQUdELElBQ2QsR0FBS296QyxFQUFPaEosU0FBVTVrQyxLQUFNcy9DLEVBQVM5a0QsSUFDcEMsT0FBTyxNQU1YK2tELFFBQVMsU0FBVWhILEVBQVdyNEMsR0FDN0IsSUFBSTQxQyxFQUNIdDdDLEVBQUksRUFDSkMsRUFBSXVGLEtBQUs1QixPQUNUNjdDLEVBQVUsR0FDVnFGLEVBQStCLGlCQUFkL0csR0FBMEIzSyxFQUFRMkssR0FHcEQsSUFBTWdHLEVBQWNuMkMsS0FBTW13QyxHQUN6QixLQUFRLzlDLEVBQUlDLEVBQUdELElBQ2QsSUFBTXM3QyxFQUFNOTFDLEtBQU14RixHQUFLczdDLEdBQU9BLElBQVE1MUMsRUFBUzQxQyxFQUFNQSxFQUFJNWlDLFdBR3hELEdBQUs0aUMsRUFBSXZuQyxTQUFXLEtBQVErd0MsRUFDM0JBLEVBQVE3cUIsTUFBT3FoQixJQUFTLEVBR1AsSUFBakJBLEVBQUl2bkMsVUFDSHEvQixFQUFPbUosS0FBS0csZ0JBQWlCcEIsRUFBS3lDLElBQWdCLENBRW5EMEIsRUFBUXYzQyxLQUFNb3pDLEdBQ2QsTUFNSixPQUFPOTFDLEtBQUttdUMsVUFBVzhMLEVBQVE3N0MsT0FBUyxFQUFJd3ZDLEVBQU91SyxXQUFZOEIsR0FBWUEsSUFJNUV4bEIsTUFBTyxTQUFVZ2EsR0FHaEIsT0FBTUEsRUFLZSxpQkFBVEEsRUFDSmo5QixFQUFRN1csS0FBTWl6QyxFQUFRYSxHQUFRenVDLEtBQU0sSUFJckN3UixFQUFRN1csS0FBTXFGLEtBR3BCeXVDLEVBQUtSLE9BQVNRLEVBQU0sR0FBTUEsR0FaakJ6dUMsS0FBTSxJQUFPQSxLQUFNLEdBQUlrVCxXQUFlbFQsS0FBSzB1QyxRQUFROFEsVUFBVXBoRCxRQUFVLEdBZ0JsRnlJLElBQUssU0FBVWduQyxFQUFVM3RDLEdBQ3hCLE9BQU9GLEtBQUttdUMsVUFDWFAsRUFBT3VLLFdBQ052SyxFQUFPVSxNQUFPdHVDLEtBQUszRSxNQUFPdXlDLEVBQVFDLEVBQVUzdEMsT0FLL0N1L0MsUUFBUyxTQUFVNVIsR0FDbEIsT0FBTzd0QyxLQUFLNkcsSUFBaUIsTUFBWmduQyxFQUNoQjd0QyxLQUFLdXVDLFdBQWF2dUMsS0FBS3V1QyxXQUFXc0ksT0FBUWhKLE9BVTdDRCxFQUFPWSxLQUFNLENBQ1pwRCxPQUFRLFNBQVVxRCxHQUNqQixJQUFJckQsRUFBU3FELEVBQUt2N0IsV0FDbEIsT0FBT2s0QixHQUE4QixLQUFwQkEsRUFBTzc4QixTQUFrQjY4QixFQUFTLE1BRXBEc1UsUUFBUyxTQUFValIsR0FDbEIsT0FBTzJGLEVBQUszRixFQUFNLGVBRW5Ca1IsYUFBYyxTQUFVbFIsRUFBTWtDLEVBQUl5TixHQUNqQyxPQUFPaEssRUFBSzNGLEVBQU0sYUFBYzJQLElBRWpDeDdDLEtBQU0sU0FBVTZyQyxHQUNmLE9BQU8vNEIsRUFBUys0QixFQUFNLGdCQUV2QjRRLEtBQU0sU0FBVTVRLEdBQ2YsT0FBTy80QixFQUFTKzRCLEVBQU0sb0JBRXZCbVIsUUFBUyxTQUFVblIsR0FDbEIsT0FBTzJGLEVBQUszRixFQUFNLGdCQUVuQitRLFFBQVMsU0FBVS9RLEdBQ2xCLE9BQU8yRixFQUFLM0YsRUFBTSxvQkFFbkJvUixVQUFXLFNBQVVwUixFQUFNa0MsRUFBSXlOLEdBQzlCLE9BQU9oSyxFQUFLM0YsRUFBTSxjQUFlMlAsSUFFbEMwQixVQUFXLFNBQVVyUixFQUFNa0MsRUFBSXlOLEdBQzlCLE9BQU9oSyxFQUFLM0YsRUFBTSxrQkFBbUIyUCxJQUV0Q0UsU0FBVSxTQUFVN1AsR0FDbkIsT0FBTzZQLEdBQVk3UCxFQUFLdjdCLFlBQWMsSUFBS2hGLFdBQVl1Z0MsSUFFeEQvc0MsU0FBVSxTQUFVK3NDLEdBQ25CLE9BQU82UCxFQUFVN1AsRUFBS3ZnQyxhQUV2Qmt4QyxTQUFVLFNBQVUzUSxHQUNuQixPQUE2QixNQUF4QkEsRUFBS3NSLGlCQUtUeFQsRUFBVWtDLEVBQUtzUixpQkFFUnRSLEVBQUtzUixpQkFNUi8wQyxFQUFVeWpDLEVBQU0sY0FDcEJBLEVBQU9BLEVBQUt1UixTQUFXdlIsR0FHakJiLEVBQU9VLE1BQU8sR0FBSUcsRUFBSzRGLGdCQUU3QixTQUFVdDVDLEVBQU0reUMsR0FDbEJGLEVBQU9FLEdBQUkveUMsR0FBUyxTQUFVcWpELEVBQU92USxHQUNwQyxJQUFJb00sRUFBVXJNLEVBQU92d0MsSUFBSzJDLEtBQU04dEMsRUFBSXNRLEdBdUJwQyxNQXJCMEIsVUFBckJyakQsRUFBS3dNLE9BQVEsS0FDakJzbUMsRUFBV3VRLEdBR1B2USxHQUFnQyxpQkFBYkEsSUFDdkJvTSxFQUFVck0sRUFBT2lKLE9BQVFoSixFQUFVb00sSUFHL0JqNkMsS0FBSzVCLE9BQVMsSUFHWitnRCxFQUFrQnBrRCxJQUN2QjZ5QyxFQUFPdUssV0FBWThCLEdBSWZpRixFQUFhOTJDLEtBQU1yTixJQUN2QmsvQyxFQUFRZ0csV0FJSGpnRCxLQUFLbXVDLFVBQVc4TCxPQUd6QixJQUFJaUcsRUFBa0Isb0JBc090QixTQUFTQyxFQUFVbmhELEdBQ2xCLE9BQU9BLEVBRVIsU0FBU29oRCxFQUFTQyxHQUNqQixNQUFNQSxFQUdQLFNBQVNDLEVBQVk3a0QsRUFBTzhrRCxFQUFTQyxFQUFRQyxHQUM1QyxJQUFJQyxFQUVKLElBR01qbEQsR0FBU3V4QyxFQUFjMFQsRUFBU2psRCxFQUFNa2xELFNBQzFDRCxFQUFPL2xELEtBQU1jLEdBQVFvSCxLQUFNMDlDLEdBQVVLLEtBQU1KLEdBR2hDL2tELEdBQVN1eEMsRUFBYzBULEVBQVNqbEQsRUFBTXlILE1BQ2pEdzlDLEVBQU8vbEQsS0FBTWMsRUFBTzhrRCxFQUFTQyxHQVE3QkQsRUFBUTE4QyxXQUFPNHJDLEVBQVcsQ0FBRWgwQyxHQUFROEwsTUFBT2s1QyxJQU0zQyxNQUFRaGxELEdBSVQra0QsRUFBTzM4QyxXQUFPNHJDLEVBQVcsQ0FBRWgwQyxLQXZPN0JteUMsRUFBT2lULFVBQVksU0FBVS96QyxHQUk1QkEsRUFBNkIsaUJBQVpBLEVBbENsQixTQUF3QkEsR0FDdkIsSUFBSTVRLEVBQVMsR0FJYixPQUhBMHhDLEVBQU9ZLEtBQU0xaEMsRUFBUTVDLE1BQU9nMkMsSUFBbUIsSUFBSSxTQUFVWSxFQUFHQyxHQUMvRDdrRCxFQUFRNmtELElBQVMsS0FFWDdrRCxFQThCTjhrRCxDQUFlbDBDLEdBQ2Y4Z0MsRUFBTzdJLE9BQVEsR0FBSWo0QixHQUVwQixJQUNDbTBDLEVBR0FDLEVBR0FDLEVBR0FDLEVBR0FoUCxFQUFPLEdBR1B2YSxFQUFRLEdBR1J3cEIsR0FBZSxFQUdmQyxFQUFPLFdBUU4sSUFMQUYsRUFBU0EsR0FBVXQwQyxFQUFReTBDLEtBSTNCSixFQUFRRixHQUFTLEVBQ1RwcEIsRUFBTXo1QixPQUFRaWpELEdBQWUsRUFFcEMsSUFEQUgsRUFBU3JwQixFQUFNL2YsVUFDTHVwQyxFQUFjalAsRUFBS2gwQyxTQUdtQyxJQUExRGcwQyxFQUFNaVAsR0FBY3g5QyxNQUFPcTlDLEVBQVEsR0FBS0EsRUFBUSxLQUNwRHAwQyxFQUFRMDBDLGNBR1JILEVBQWNqUCxFQUFLaDBDLE9BQ25COGlELEdBQVMsR0FNTnAwQyxFQUFRbzBDLFNBQ2JBLEdBQVMsR0FHVkQsR0FBUyxFQUdKRyxJQUlIaFAsRUFESThPLEVBQ0csR0FJQSxLQU1WckMsRUFBTyxDQUdOaDRDLElBQUssV0EyQkosT0ExQkt1ckMsSUFHQzhPLElBQVdELElBQ2ZJLEVBQWNqUCxFQUFLaDBDLE9BQVMsRUFDNUJ5NUIsRUFBTW4xQixLQUFNdytDLElBR2IsU0FBV3I2QyxFQUFLaXpDLEdBQ2ZsTSxFQUFPWSxLQUFNc0wsR0FBTSxTQUFVZ0gsRUFBR3JRLEdBQzFCekQsRUFBWXlELEdBQ1YzakMsRUFBUW14QyxRQUFXWSxFQUFLaDBCLElBQUs0bEIsSUFDbEMyQixFQUFLMXZDLEtBQU0rdEMsR0FFREEsR0FBT0EsRUFBSXJ5QyxRQUE0QixXQUFsQnV2QyxFQUFROEMsSUFHeEM1cEMsRUFBSzRwQyxNQVRSLENBWUt0eUMsV0FFQStpRCxJQUFXRCxHQUNmSyxLQUdLdGhELE1BSVJ5aEQsT0FBUSxXQVlQLE9BWEE3VCxFQUFPWSxLQUFNcndDLFdBQVcsU0FBVTJpRCxFQUFHclEsR0FFcEMsSUFEQSxJQUFJaGMsR0FDTUEsRUFBUW1aLEVBQU93QyxRQUFTSyxFQUFLMkIsRUFBTTNkLEtBQWEsR0FDekQyZCxFQUFLakQsT0FBUTFhLEVBQU8sR0FHZkEsR0FBUzRzQixHQUNiQSxPQUlJcmhELE1BS1I2cUIsSUFBSyxTQUFVaWpCLEdBQ2QsT0FBT0EsRUFDTkYsRUFBT3dDLFFBQVN0QyxFQUFJc0UsSUFBVSxFQUM5QkEsRUFBS2gwQyxPQUFTLEdBSWhCc2pELE1BQU8sV0FJTixPQUhLdFAsSUFDSkEsRUFBTyxJQUVEcHlDLE1BTVIyaEQsUUFBUyxXQUdSLE9BRkFQLEVBQVN2cEIsRUFBUSxHQUNqQnVhLEVBQU84TyxFQUFTLEdBQ1RsaEQsTUFFUmlOLFNBQVUsV0FDVCxPQUFRbWxDLEdBTVR3UCxLQUFNLFdBS0wsT0FKQVIsRUFBU3ZwQixFQUFRLEdBQ1hxcEIsR0FBV0QsSUFDaEI3TyxFQUFPOE8sRUFBUyxJQUVWbGhELE1BRVJvaEQsT0FBUSxXQUNQLFFBQVNBLEdBSVZTLFNBQVUsU0FBVTNoRCxFQUFTNDVDLEdBUzVCLE9BUk1zSCxJQUVMdEgsRUFBTyxDQUFFNTVDLEdBRFQ0NUMsRUFBT0EsR0FBUSxJQUNRdnlDLE1BQVF1eUMsRUFBS3Z5QyxRQUFVdXlDLEdBQzlDamlCLEVBQU1uMUIsS0FBTW8zQyxHQUNObUgsR0FDTEssS0FHS3RoRCxNQUlSc2hELEtBQU0sV0FFTCxPQURBekMsRUFBS2dELFNBQVU3aEQsS0FBTTdCLFdBQ2Q2QixNQUlSbWhELE1BQU8sV0FDTixRQUFTQSxJQUlaLE9BQU90QyxHQTRDUmpSLEVBQU83SSxPQUFRLENBRWQrYyxTQUFVLFNBQVVDLEdBQ25CLElBQUlDLEVBQVMsQ0FJWCxDQUFFLFNBQVUsV0FBWXBVLEVBQU9pVCxVQUFXLFVBQ3pDalQsRUFBT2lULFVBQVcsVUFBWSxHQUMvQixDQUFFLFVBQVcsT0FBUWpULEVBQU9pVCxVQUFXLGVBQ3RDalQsRUFBT2lULFVBQVcsZUFBaUIsRUFBRyxZQUN2QyxDQUFFLFNBQVUsT0FBUWpULEVBQU9pVCxVQUFXLGVBQ3JDalQsRUFBT2lULFVBQVcsZUFBaUIsRUFBRyxhQUV4Q3R0QixFQUFRLFVBQ1JvdEIsRUFBVSxDQUNUcHRCLE1BQU8sV0FDTixPQUFPQSxHQUVSMHVCLE9BQVEsV0FFUCxPQURBQyxFQUFTci9DLEtBQU0xRSxXQUFZeWlELEtBQU16aUQsV0FDMUI2QixNQUVSLE1BQVMsU0FBVTh0QyxHQUNsQixPQUFPNlMsRUFBUXo5QyxLQUFNLEtBQU00cUMsSUFJNUJxVSxLQUFNLFdBQ0wsSUFBSUMsRUFBTWprRCxVQUVWLE9BQU95dkMsRUFBT2tVLFVBQVUsU0FBVU8sR0FDakN6VSxFQUFPWSxLQUFNd1QsR0FBUSxTQUFVclIsRUFBSTJSLEdBR2xDLElBQUl4VSxFQUFLZCxFQUFZb1YsRUFBS0UsRUFBTyxNQUFXRixFQUFLRSxFQUFPLElBS3hESixFQUFVSSxFQUFPLEtBQU8sV0FDdkIsSUFBSUMsRUFBV3pVLEdBQU1BLEVBQUdqcUMsTUFBTzdELEtBQU03QixXQUNoQ29rRCxHQUFZdlYsRUFBWXVWLEVBQVM1QixTQUNyQzRCLEVBQVM1QixVQUNQNkIsU0FBVUgsRUFBU0ksUUFDbkI1L0MsS0FBTXcvQyxFQUFTOUIsU0FDZkssS0FBTXlCLEVBQVM3QixRQUVqQjZCLEVBQVVDLEVBQU8sR0FBTSxRQUN0QnRpRCxLQUNBOHRDLEVBQUssQ0FBRXlVLEdBQWFwa0QsaUJBS3hCaWtELEVBQU0sUUFDSHpCLFdBRUx6OUMsS0FBTSxTQUFVdy9DLEVBQWFDLEVBQVlDLEdBQ3hDLElBQUlDLEVBQVcsRUFDZixTQUFTdEMsRUFBU3VDLEVBQU9aLEVBQVV2TSxFQUFTb04sR0FDM0MsT0FBTyxXQUNOLElBQUlDLEVBQU9oakQsS0FDVjg1QyxFQUFPMzdDLFVBQ1A4a0QsRUFBYSxXQUNaLElBQUlWLEVBQVVyL0MsRUFLZCxLQUFLNC9DLEVBQVFELEdBQWIsQ0FRQSxJQUpBTixFQUFXNU0sRUFBUTl4QyxNQUFPbS9DLEVBQU1sSixNQUlkb0ksRUFBU3ZCLFVBQzFCLE1BQU0sSUFBSTdqRCxVQUFXLDRCQU90Qm9HLEVBQU9xL0MsSUFLZ0IsaUJBQXBCLElBQU9BLEVBQVAsY0FBT0EsS0FDWSxtQkFBYkEsSUFDUkEsRUFBU3IvQyxLQUdMOHBDLEVBQVk5cEMsR0FHWDYvQyxFQUNKNy9DLEVBQUt2SSxLQUNKNG5ELEVBQ0FoQyxFQUFTc0MsRUFBVVgsRUFBVS9CLEVBQVU0QyxHQUN2Q3hDLEVBQVNzQyxFQUFVWCxFQUFVOUIsRUFBUzJDLEtBT3ZDRixJQUVBMy9DLEVBQUt2SSxLQUNKNG5ELEVBQ0FoQyxFQUFTc0MsRUFBVVgsRUFBVS9CLEVBQVU0QyxHQUN2Q3hDLEVBQVNzQyxFQUFVWCxFQUFVOUIsRUFBUzJDLEdBQ3RDeEMsRUFBU3NDLEVBQVVYLEVBQVUvQixFQUM1QitCLEVBQVNnQixlQVNQdk4sSUFBWXdLLElBQ2hCNkMsT0FBT3ZULEVBQ1BxSyxFQUFPLENBQUV5SSxLQUtSUSxHQUFXYixFQUFTaUIsYUFBZUgsRUFBTWxKLE1BSzdDMXpDLEVBQVUyOEMsRUFDVEUsRUFDQSxXQUNDLElBQ0NBLElBQ0MsTUFBUTNoRCxHQUVKc3NDLEVBQU9rVSxTQUFTc0IsZUFDcEJ4VixFQUFPa1UsU0FBU3NCLGNBQWU5aEQsRUFDOUI4RSxFQUFRaTlDLFlBTUxQLEVBQVEsR0FBS0QsSUFJWmxOLElBQVl5SyxJQUNoQjRDLE9BQU92VCxFQUNQcUssRUFBTyxDQUFFeDRDLElBR1Y0Z0QsRUFBU29CLFdBQVlOLEVBQU1sSixNQVMzQmdKLEVBQ0oxOEMsS0FLS3duQyxFQUFPa1UsU0FBU3lCLGVBQ3BCbjlDLEVBQVFpOUMsV0FBYXpWLEVBQU9rVSxTQUFTeUIsZ0JBRXRDeDhDLEVBQU93bEIsV0FBWW5tQixLQUt0QixPQUFPd25DLEVBQU9rVSxVQUFVLFNBQVVPLEdBR2pDTCxFQUFRLEdBQUssR0FBSW43QyxJQUNoQjA1QyxFQUNDLEVBQ0E4QixFQUNBclYsRUFBWTRWLEdBQ1hBLEVBQ0F6QyxFQUNEa0MsRUFBU2EsYUFLWGxCLEVBQVEsR0FBSyxHQUFJbjdDLElBQ2hCMDVDLEVBQ0MsRUFDQThCLEVBQ0FyVixFQUFZMFYsR0FDWEEsRUFDQXZDLElBS0g2QixFQUFRLEdBQUssR0FBSW43QyxJQUNoQjA1QyxFQUNDLEVBQ0E4QixFQUNBclYsRUFBWTJWLEdBQ1hBLEVBQ0F2QyxPQUdBTyxXQUtMQSxRQUFTLFNBQVUxVCxHQUNsQixPQUFjLE1BQVBBLEVBQWNXLEVBQU83SSxPQUFRa0ksRUFBSzBULEdBQVlBLElBR3ZEdUIsRUFBVyxHQWtFWixPQS9EQXRVLEVBQU9ZLEtBQU13VCxHQUFRLFNBQVV4bkQsRUFBRzhuRCxHQUNqQyxJQUFJbFEsRUFBT2tRLEVBQU8sR0FDakJrQixFQUFjbEIsRUFBTyxHQUt0QjNCLEVBQVMyQixFQUFPLElBQVFsUSxFQUFLdnJDLElBR3hCMjhDLEdBQ0pwUixFQUFLdnJDLEtBQ0osV0FJQzBzQixFQUFRaXdCLElBS1R4QixFQUFRLEVBQUl4bkQsR0FBSyxHQUFJbW5ELFFBSXJCSyxFQUFRLEVBQUl4bkQsR0FBSyxHQUFJbW5ELFFBR3JCSyxFQUFRLEdBQUssR0FBSUosS0FHakJJLEVBQVEsR0FBSyxHQUFJSixNQU9uQnhQLEVBQUt2ckMsSUFBS3k3QyxFQUFPLEdBQUloQixNQUtyQlksRUFBVUksRUFBTyxJQUFRLFdBRXhCLE9BREFKLEVBQVVJLEVBQU8sR0FBTSxRQUFVdGlELE9BQVNraUQsT0FBV3pTLEVBQVl6dkMsS0FBTTdCLFdBQ2hFNkIsTUFNUmtpRCxFQUFVSSxFQUFPLEdBQU0sUUFBV2xRLEVBQUt5UCxZQUl4Q2xCLEVBQVFBLFFBQVN1QixHQUdaSCxHQUNKQSxFQUFLcG5ELEtBQU11bkQsRUFBVUEsR0FJZkEsR0FJUnVCLEtBQU0sU0FBVUMsR0FDZixJQUdDQyxFQUFZeGxELFVBQVVDLE9BR3RCNUQsRUFBSW1wRCxFQUdKQyxFQUFrQmhpRCxNQUFPcEgsR0FDekJxcEQsRUFBZ0J0OEMsRUFBTTVNLEtBQU13RCxXQUc1QjJsRCxFQUFTbFcsRUFBT2tVLFdBR2hCaUMsRUFBYSxTQUFVdnBELEdBQ3RCLE9BQU8sU0FBVWlCLEdBQ2hCbW9ELEVBQWlCcHBELEdBQU13RixLQUN2QjZqRCxFQUFlcnBELEdBQU0yRCxVQUFVQyxPQUFTLEVBQUltSixFQUFNNU0sS0FBTXdELFdBQWMxQyxJQUM1RGtvRCxHQUNURyxFQUFPWCxZQUFhUyxFQUFpQkMsS0FNekMsR0FBS0YsR0FBYSxJQUNqQnJELEVBQVlvRCxFQUFhSSxFQUFPamhELEtBQU1raEQsRUFBWXZwRCxJQUFNK2xELFFBQVN1RCxFQUFPdEQsUUFDdEVtRCxHQUdzQixZQUFuQkcsRUFBT3Z3QixTQUNYeVosRUFBWTZXLEVBQWVycEQsSUFBT3FwRCxFQUFlcnBELEdBQUkwSSxPQUVyRCxPQUFPNGdELEVBQU81Z0QsT0FLaEIsS0FBUTFJLEtBQ1A4bEQsRUFBWXVELEVBQWVycEQsR0FBS3VwRCxFQUFZdnBELEdBQUtzcEQsRUFBT3RELFFBR3pELE9BQU9zRCxFQUFPbkQsYUFPaEIsSUFBSXFELEVBQWMseURBRWxCcFcsRUFBT2tVLFNBQVNzQixjQUFnQixTQUFVOThDLEVBQU8wRCxHQUkzQ2pELEVBQU9WLFNBQVdVLEVBQU9WLFFBQVE0OUMsTUFBUTM5QyxHQUFTMDlDLEVBQVk1N0MsS0FBTTlCLEVBQU12TCxPQUM5RWdNLEVBQU9WLFFBQVE0OUMsS0FBTSw4QkFBZ0MzOUMsRUFBTWc0QixRQUFTaDRCLEVBQU0wRCxNQUFPQSxJQU9uRjRqQyxFQUFPc1csZUFBaUIsU0FBVTU5QyxHQUNqQ1MsRUFBT3dsQixZQUFZLFdBQ2xCLE1BQU1qbUIsTUFRUixJQUFJNjlDLEVBQVl2VyxFQUFPa1UsV0FrRHZCLFNBQVNzQyxJQUNSNWxELEVBQVMrVixvQkFBcUIsbUJBQW9CNnZDLEdBQ2xEcjlDLEVBQU93TixvQkFBcUIsT0FBUTZ2QyxHQUNwQ3hXLEVBQU9xUixRQW5EUnJSLEVBQU9FLEdBQUdtUixNQUFRLFNBQVVuUixHQVkzQixPQVZBcVcsRUFDRWpoRCxLQUFNNHFDLEdBS051VyxPQUFPLFNBQVUvOUMsR0FDakJzbkMsRUFBT3NXLGVBQWdCNTlDLE1BR2xCdEcsTUFHUjR0QyxFQUFPN0ksT0FBUSxDQUdkNEssU0FBUyxFQUlUMlUsVUFBVyxFQUdYckYsTUFBTyxTQUFVc0YsS0FHRixJQUFUQSxJQUFrQjNXLEVBQU8wVyxVQUFZMVcsRUFBTytCLFdBS2pEL0IsRUFBTytCLFNBQVUsR0FHSCxJQUFUNFUsS0FBbUIzVyxFQUFPMFcsVUFBWSxHQUszQ0gsRUFBVWhCLFlBQWEza0QsRUFBVSxDQUFFb3ZDLFFBSXJDQSxFQUFPcVIsTUFBTS83QyxLQUFPaWhELEVBQVVqaEQsS0FhRCxhQUF4QjFFLEVBQVNnbUQsWUFDYSxZQUF4QmhtRCxFQUFTZ21ELGFBQTZCaG1ELEVBQVNpM0IsZ0JBQWdCZ3ZCLFNBR2pFMTlDLEVBQU93bEIsV0FBWXFoQixFQUFPcVIsUUFLMUJ6Z0QsRUFBUzhWLGlCQUFrQixtQkFBb0I4dkMsR0FHL0NyOUMsRUFBT3VOLGlCQUFrQixPQUFROHZDLElBUWxDLElBQUlNLEVBQVMsU0FBVEEsRUFBbUJ0VyxFQUFPTixFQUFJL3hDLEVBQUtOLEVBQU9rcEQsRUFBV0MsRUFBVUMsR0FDbEUsSUFBSXJxRCxFQUFJLEVBQ1B3MEMsRUFBTVosRUFBTWh3QyxPQUNaMG1ELEVBQWMsTUFBUC9vRCxFQUdSLEdBQXVCLFdBQWxCNHhDLEVBQVE1eEMsR0FFWixJQUFNdkIsS0FETm1xRCxHQUFZLEVBQ0Q1b0QsRUFDVjJvRCxFQUFRdFcsRUFBT04sRUFBSXR6QyxFQUFHdUIsRUFBS3ZCLElBQUssRUFBTW9xRCxFQUFVQyxRQUkzQyxRQUFlcFYsSUFBVmgwQyxJQUNYa3BELEdBQVksRUFFTjNYLEVBQVl2eEMsS0FDakJvcEQsR0FBTSxHQUdGQyxJQUdDRCxHQUNKL1csRUFBR256QyxLQUFNeXpDLEVBQU8zeUMsR0FDaEJxeUMsRUFBSyxPQUlMZ1gsRUFBT2hYLEVBQ1BBLEVBQUssU0FBVVcsRUFBTXNXLEVBQU10cEQsR0FDMUIsT0FBT3FwRCxFQUFLbnFELEtBQU1pekMsRUFBUWEsR0FBUWh6QyxNQUtoQ3F5QyxHQUNKLEtBQVF0ekMsRUFBSXcwQyxFQUFLeDBDLElBQ2hCc3pDLEVBQ0NNLEVBQU81ekMsR0FBS3VCLEVBQUs4b0QsRUFDakJwcEQsRUFDQUEsRUFBTWQsS0FBTXl6QyxFQUFPNXpDLEdBQUtBLEVBQUdzekMsRUFBSU0sRUFBTzV6QyxHQUFLdUIsS0FNL0MsT0FBSzRvRCxFQUNHdlcsRUFJSDBXLEVBQ0doWCxFQUFHbnpDLEtBQU15ekMsR0FHVlksRUFBTWxCLEVBQUlNLEVBQU8sR0FBS3J5QyxHQUFRNm9ELEdBS2xDSSxFQUFZLFFBQ2ZDLEVBQWEsWUFHZCxTQUFTQyxFQUFZQyxFQUFNem5ELEdBQzFCLE9BQU9BLEVBQU93SyxjQU1mLFNBQVNrOUMsRUFBV0MsR0FDbkIsT0FBT0EsRUFBT2pqRCxRQUFTNGlELEVBQVcsT0FBUTVpRCxRQUFTNmlELEVBQVlDLEdBRWhFLElBQUlJLEVBQWEsU0FBVUMsR0FRMUIsT0FBMEIsSUFBbkJBLEVBQU1oM0MsVUFBcUMsSUFBbkJnM0MsRUFBTWgzQyxZQUFzQmczQyxFQUFNaDNDLFVBTWxFLFNBQVNpM0MsSUFDUnhsRCxLQUFLMHZDLFFBQVU5QixFQUFPOEIsUUFBVThWLEVBQUtDLE1BR3RDRCxFQUFLQyxJQUFNLEVBRVhELEVBQUtwcEQsVUFBWSxDQUVoQmc1QyxNQUFPLFNBQVVtUSxHQUdoQixJQUFJOXBELEVBQVE4cEQsRUFBT3ZsRCxLQUFLMHZDLFNBNEJ4QixPQXpCTWowQyxJQUNMQSxFQUFRLEdBS0g2cEQsRUFBWUMsS0FJWEEsRUFBTWgzQyxTQUNWZzNDLEVBQU92bEQsS0FBSzB2QyxTQUFZajBDLEVBTXhCUCxPQUFPQyxlQUFnQm9xRCxFQUFPdmxELEtBQUswdkMsUUFBUyxDQUMzQ2owQyxNQUFPQSxFQUNQMlAsY0FBYyxNQU1YM1AsR0FFUjZPLElBQUssU0FBVWk3QyxFQUFPM2xDLEVBQU1ua0IsR0FDM0IsSUFBSWlxRCxFQUNIdFEsRUFBUXAxQyxLQUFLbzFDLE1BQU9tUSxHQUlyQixHQUFxQixpQkFBVDNsQyxFQUNYdzFCLEVBQU9nUSxFQUFXeGxDLElBQVdua0IsT0FNN0IsSUFBTWlxRCxLQUFROWxDLEVBQ2J3MUIsRUFBT2dRLEVBQVdNLElBQVc5bEMsRUFBTThsQyxHQUdyQyxPQUFPdFEsR0FFUi81QyxJQUFLLFNBQVVrcUQsRUFBT3hwRCxHQUNyQixZQUFlMHpDLElBQVIxekMsRUFDTmlFLEtBQUtvMUMsTUFBT21RLEdBR1pBLEVBQU92bEQsS0FBSzB2QyxVQUFhNlYsRUFBT3ZsRCxLQUFLMHZDLFNBQVcwVixFQUFXcnBELEtBRTdEMm9ELE9BQVEsU0FBVWEsRUFBT3hwRCxFQUFLTixHQWE3QixZQUFhZzBDLElBQVIxekMsR0FDQ0EsR0FBc0IsaUJBQVJBLFFBQWdDMHpDLElBQVZoMEMsRUFFbEN1RSxLQUFLM0UsSUFBS2txRCxFQUFPeHBELElBU3pCaUUsS0FBS3NLLElBQUtpN0MsRUFBT3hwRCxFQUFLTixRQUlMZzBDLElBQVZoMEMsRUFBc0JBLEVBQVFNLElBRXRDMGxELE9BQVEsU0FBVThELEVBQU94cEQsR0FDeEIsSUFBSXZCLEVBQ0g0NkMsRUFBUW1RLEVBQU92bEQsS0FBSzB2QyxTQUVyQixRQUFlRCxJQUFWMkYsRUFBTCxDQUlBLFFBQWEzRixJQUFSMXpDLEVBQW9CLENBa0J4QnZCLEdBWEN1QixFQUpJNkYsTUFBTVksUUFBU3pHLEdBSWJBLEVBQUlzQixJQUFLK25ELElBRWZycEQsRUFBTXFwRCxFQUFXcnBELE1BSUpxNUMsRUFDWixDQUFFcjVDLEdBQ0FBLEVBQUltTyxNQUFPZzJDLElBQW1CLElBRzFCOWhELE9BRVIsS0FBUTVELFlBQ0E0NkMsRUFBT3I1QyxFQUFLdkIsVUFLUmkxQyxJQUFSMXpDLEdBQXFCNnhDLEVBQU9vQyxjQUFlb0YsTUFNMUNtUSxFQUFNaDNDLFNBQ1ZnM0MsRUFBT3ZsRCxLQUFLMHZDLGNBQVlELFNBRWpCOFYsRUFBT3ZsRCxLQUFLMHZDLFlBSXRCaVcsUUFBUyxTQUFVSixHQUNsQixJQUFJblEsRUFBUW1RLEVBQU92bEQsS0FBSzB2QyxTQUN4QixZQUFpQkQsSUFBVjJGLElBQXdCeEgsRUFBT29DLGNBQWVvRixLQUd2RCxJQUFJd1EsRUFBVyxJQUFJSixFQUVmSyxFQUFXLElBQUlMLEVBY2ZNLEdBQVMsZ0NBQ1pDLEdBQWEsU0EyQmQsU0FBU0MsR0FBVXZYLEVBQU0xeUMsRUFBSzZqQixHQUM3QixJQUFJN2tCLEVBSUosUUFBYzAwQyxJQUFUN3ZCLEdBQXdDLElBQWxCNnVCLEVBQUtsZ0MsU0FJL0IsR0FIQXhULEVBQU8sUUFBVWdCLEVBQUlxRyxRQUFTMmpELEdBQVksT0FBUXorQyxjQUc3QixpQkFGckJzWSxFQUFPNnVCLEVBQUtoQixhQUFjMXlDLElBRU0sQ0FDL0IsSUFDQzZrQixFQXBDSixTQUFrQkEsR0FDakIsTUFBYyxTQUFUQSxHQUlTLFVBQVRBLElBSVMsU0FBVEEsRUFDRyxLQUlIQSxLQUFVQSxFQUFPLElBQ2JBLEVBR0prbUMsR0FBTzE5QyxLQUFNd1gsR0FDVnNuQixLQUFLK2UsTUFBT3JtQyxHQUdiQSxHQWNHc21DLENBQVN0bUMsR0FDZixNQUFRdGUsSUFHVnVrRCxFQUFTdjdDLElBQUtta0MsRUFBTTF5QyxFQUFLNmpCLFFBRXpCQSxPQUFPNnZCLEVBR1QsT0FBTzd2QixFQUdSZ3VCLEVBQU83SSxPQUFRLENBQ2Q0Z0IsUUFBUyxTQUFVbFgsR0FDbEIsT0FBT29YLEVBQVNGLFFBQVNsWCxJQUFVbVgsRUFBU0QsUUFBU2xYLElBR3REN3VCLEtBQU0sU0FBVTZ1QixFQUFNMXpDLEVBQU02a0IsR0FDM0IsT0FBT2ltQyxFQUFTbkIsT0FBUWpXLEVBQU0xekMsRUFBTTZrQixJQUdyQ3VtQyxXQUFZLFNBQVUxWCxFQUFNMXpDLEdBQzNCOHFELEVBQVNwRSxPQUFRaFQsRUFBTTF6QyxJQUt4QnFyRCxNQUFPLFNBQVUzWCxFQUFNMXpDLEVBQU02a0IsR0FDNUIsT0FBT2dtQyxFQUFTbEIsT0FBUWpXLEVBQU0xekMsRUFBTTZrQixJQUdyQ3ltQyxZQUFhLFNBQVU1WCxFQUFNMXpDLEdBQzVCNnFELEVBQVNuRSxPQUFRaFQsRUFBTTF6QyxNQUl6QjZ5QyxFQUFPRSxHQUFHL0ksT0FBUSxDQUNqQm5sQixLQUFNLFNBQVU3akIsRUFBS04sR0FDcEIsSUFBSWpCLEVBQUdPLEVBQU02a0IsRUFDWjZ1QixFQUFPenVDLEtBQU0sR0FDYjAxQyxFQUFRakgsR0FBUUEsRUFBSytELFdBR3RCLFFBQWEvQyxJQUFSMXpDLEVBQW9CLENBQ3hCLEdBQUtpRSxLQUFLNUIsU0FDVHdoQixFQUFPaW1DLEVBQVN4cUQsSUFBS296QyxHQUVFLElBQWxCQSxFQUFLbGdDLFdBQW1CcTNDLEVBQVN2cUQsSUFBS296QyxFQUFNLGlCQUFtQixDQUVuRSxJQURBajBDLEVBQUlrN0MsRUFBTXQzQyxPQUNGNUQsS0FJRms3QyxFQUFPbDdDLElBRXNCLEtBRGpDTyxFQUFPMjZDLEVBQU9sN0MsR0FBSU8sTUFDUnlXLFFBQVMsV0FDbEJ6VyxFQUFPcXFELEVBQVdycUQsRUFBS3dNLE1BQU8sSUFDOUJ5K0MsR0FBVXZYLEVBQU0xekMsRUFBTTZrQixFQUFNN2tCLEtBSS9CNnFELEVBQVN0N0MsSUFBS21rQyxFQUFNLGdCQUFnQixHQUl0QyxPQUFPN3VCLEVBSVIsTUFBb0IsaUJBQWYsSUFBTzdqQixFQUFQLGNBQU9BLElBQ0ppRSxLQUFLd3VDLE1BQU0sV0FDakJxWCxFQUFTdjdDLElBQUt0SyxLQUFNakUsTUFJZjJvRCxFQUFRMWtELE1BQU0sU0FBVXZFLEdBQzlCLElBQUlta0IsRUFPSixHQUFLNnVCLFFBQWtCZ0IsSUFBVmgwQyxFQUtaLFlBQWNnMEMsS0FEZDd2QixFQUFPaW1DLEVBQVN4cUQsSUFBS296QyxFQUFNMXlDLFVBUWIwekMsS0FEZDd2QixFQUFPb21DLEdBQVV2WCxFQUFNMXlDLElBTGY2akIsT0FXUixFQUlENWYsS0FBS3d1QyxNQUFNLFdBR1ZxWCxFQUFTdjdDLElBQUt0SyxLQUFNakUsRUFBS04sUUFFeEIsS0FBTUEsRUFBTzBDLFVBQVVDLE9BQVMsRUFBRyxNQUFNLElBRzdDK25ELFdBQVksU0FBVXBxRCxHQUNyQixPQUFPaUUsS0FBS3d1QyxNQUFNLFdBQ2pCcVgsRUFBU3BFLE9BQVF6aEQsS0FBTWpFLFNBTTFCNnhDLEVBQU83SSxPQUFRLENBQ2RsTixNQUFPLFNBQVU0VyxFQUFNMXNDLEVBQU02ZCxHQUM1QixJQUFJaVksRUFFSixHQUFLNFcsRUFZSixPQVhBMXNDLEdBQVNBLEdBQVEsTUFBUyxRQUMxQjgxQixFQUFRK3RCLEVBQVN2cUQsSUFBS296QyxFQUFNMXNDLEdBR3ZCNmQsS0FDRWlZLEdBQVNqMkIsTUFBTVksUUFBU29kLEdBQzdCaVksRUFBUSt0QixFQUFTbEIsT0FBUWpXLEVBQU0xc0MsRUFBTTZyQyxFQUFPc0MsVUFBV3R3QixJQUV2RGlZLEVBQU1uMUIsS0FBTWtkLElBR1BpWSxHQUFTLElBSWxCeXVCLFFBQVMsU0FBVTdYLEVBQU0xc0MsR0FHeEIsSUFBSTgxQixFQUFRK1YsRUFBTy9WLE1BQU80VyxFQUYxQjFzQyxFQUFPQSxHQUFRLE1BR2R3a0QsRUFBYzF1QixFQUFNejVCLE9BQ3BCMHZDLEVBQUtqVyxFQUFNL2YsUUFDWDB1QyxFQUFRNVksRUFBTzZZLFlBQWFoWSxFQUFNMXNDLEdBTXZCLGVBQVArckMsSUFDSkEsRUFBS2pXLEVBQU0vZixRQUNYeXVDLEtBR0l6WSxJQUlVLE9BQVQvckMsR0FDSjgxQixFQUFNL0wsUUFBUyxxQkFJVDA2QixFQUFNRSxLQUNiNVksRUFBR256QyxLQUFNOHpDLEdBcEJGLFdBQ05iLEVBQU8wWSxRQUFTN1gsRUFBTTFzQyxLQW1CRnlrRCxLQUdoQkQsR0FBZUMsR0FDcEJBLEVBQU05RSxNQUFNSixRQUtkbUYsWUFBYSxTQUFVaFksRUFBTTFzQyxHQUM1QixJQUFJaEcsRUFBTWdHLEVBQU8sYUFDakIsT0FBTzZqRCxFQUFTdnFELElBQUtvekMsRUFBTTF5QyxJQUFTNnBELEVBQVNsQixPQUFRalcsRUFBTTF5QyxFQUFLLENBQy9EMmxELE1BQU85VCxFQUFPaVQsVUFBVyxlQUFnQmg2QyxLQUFLLFdBQzdDKytDLEVBQVNuRSxPQUFRaFQsRUFBTSxDQUFFMXNDLEVBQU8sUUFBU2hHLFlBTTdDNnhDLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCbE4sTUFBTyxTQUFVOTFCLEVBQU02ZCxHQUN0QixJQUFJK21DLEVBQVMsRUFRYixNQU5xQixpQkFBVDVrRCxJQUNYNmQsRUFBTzdkLEVBQ1BBLEVBQU8sS0FDUDRrRCxLQUdJeG9ELFVBQVVDLE9BQVN1b0QsRUFDaEIvWSxFQUFPL1YsTUFBTzczQixLQUFNLEdBQUsrQixRQUdqQjB0QyxJQUFUN3ZCLEVBQ041ZixLQUNBQSxLQUFLd3VDLE1BQU0sV0FDVixJQUFJM1csRUFBUStWLEVBQU8vVixNQUFPNzNCLEtBQU0rQixFQUFNNmQsR0FHdENndUIsRUFBTzZZLFlBQWF6bUQsS0FBTStCLEdBRVosT0FBVEEsR0FBZ0MsZUFBZjgxQixFQUFPLElBQzVCK1YsRUFBTzBZLFFBQVN0bUQsS0FBTStCLE9BSTFCdWtELFFBQVMsU0FBVXZrRCxHQUNsQixPQUFPL0IsS0FBS3d1QyxNQUFNLFdBQ2pCWixFQUFPMFksUUFBU3RtRCxLQUFNK0IsT0FHeEI2a0QsV0FBWSxTQUFVN2tELEdBQ3JCLE9BQU8vQixLQUFLNjNCLE1BQU85MUIsR0FBUSxLQUFNLEtBS2xDNCtDLFFBQVMsU0FBVTUrQyxFQUFNa3JDLEdBQ3hCLElBQUlnSyxFQUNIbnpDLEVBQVEsRUFDUitpRCxFQUFRalosRUFBT2tVLFdBQ2YvSixFQUFXLzNDLEtBQ1h4RixFQUFJd0YsS0FBSzVCLE9BQ1RtaUQsRUFBVSxhQUNDejhDLEdBQ1QraUQsRUFBTTFELFlBQWFwTCxFQUFVLENBQUVBLEtBVWxDLElBTnFCLGlCQUFUaDJDLElBQ1hrckMsRUFBTWxyQyxFQUNOQSxPQUFPMHRDLEdBRVIxdEMsRUFBT0EsR0FBUSxLQUVQdkgsTUFDUHk4QyxFQUFNMk8sRUFBU3ZxRCxJQUFLMDhDLEVBQVV2OUMsR0FBS3VILEVBQU8sZ0JBQzlCazFDLEVBQUl5SyxRQUNmNTlDLElBQ0FtekMsRUFBSXlLLE1BQU03NkMsSUFBSzA1QyxJQUlqQixPQURBQSxJQUNPc0csRUFBTWxHLFFBQVMxVCxNQUd4QixJQUFJNlosR0FBUyxzQ0FBd0Mvb0QsT0FFakRncEQsR0FBVSxJQUFJcFUsT0FBUSxpQkFBbUJtVSxHQUFPLGNBQWUsS0FHL0RFLEdBQVksQ0FBRSxNQUFPLFFBQVMsU0FBVSxRQUV4Q3Z4QixHQUFrQmozQixFQUFTaTNCLGdCQUkxQnd4QixHQUFhLFNBQVV4WSxHQUN6QixPQUFPYixFQUFPaEosU0FBVTZKLEVBQUsvaEMsY0FBZStoQyxJQUU3Q3lZLEdBQVcsQ0FBRUEsVUFBVSxHQU9uQnp4QixHQUFnQjB4QixjQUNwQkYsR0FBYSxTQUFVeFksR0FDdEIsT0FBT2IsRUFBT2hKLFNBQVU2SixFQUFLL2hDLGNBQWUraEMsSUFDM0NBLEVBQUswWSxZQUFhRCxNQUFlelksRUFBSy9oQyxnQkFHMUMsSUFBSTA2QyxHQUFxQixTQUFVM1ksRUFBTStHLEdBT3ZDLE1BQThCLFVBSDlCL0csRUFBTytHLEdBQU0vRyxHQUdEbDlCLE1BQU1zdUIsU0FDTSxLQUF2QjRPLEVBQUtsOUIsTUFBTXN1QixTQU1Yb25CLEdBQVl4WSxJQUVzQixTQUFsQ2IsRUFBT3laLElBQUs1WSxFQUFNLFlBS3JCLFNBQVM2WSxHQUFXN1ksRUFBTWlYLEVBQU02QixFQUFZQyxHQUMzQyxJQUFJQyxFQUFVQyxFQUNiQyxFQUFnQixHQUNoQkMsRUFBZUosRUFDZCxXQUNDLE9BQU9BLEVBQU0xUixPQUVkLFdBQ0MsT0FBT2xJLEVBQU95WixJQUFLNVksRUFBTWlYLEVBQU0sS0FFakNtQyxFQUFVRCxJQUNWRSxFQUFPUCxHQUFjQSxFQUFZLEtBQVMzWixFQUFPbWEsVUFBV3JDLEdBQVMsR0FBSyxNQUcxRXNDLEVBQWdCdlosRUFBS2xnQyxXQUNsQnEvQixFQUFPbWEsVUFBV3JDLElBQW1CLE9BQVRvQyxJQUFrQkQsSUFDaERkLEdBQVFuUyxLQUFNaEgsRUFBT3laLElBQUs1WSxFQUFNaVgsSUFFbEMsR0FBS3NDLEdBQWlCQSxFQUFlLEtBQVFGLEVBQU8sQ0FZbkQsSUFSQUQsR0FBb0IsRUFHcEJDLEVBQU9BLEdBQVFFLEVBQWUsR0FHOUJBLEdBQWlCSCxHQUFXLEVBRXBCRixLQUlQL1osRUFBT3I4QixNQUFPazlCLEVBQU1pWCxFQUFNc0MsRUFBZ0JGLElBQ25DLEVBQUlKLElBQVksR0FBTUEsRUFBUUUsSUFBaUJDLEdBQVcsTUFBVyxJQUMzRUYsRUFBZ0IsR0FFakJLLEdBQWdDTixFQUtqQzlaLEVBQU9yOEIsTUFBT2s5QixFQUFNaVgsR0FEcEJzQyxHQUFnQyxHQUNVRixHQUcxQ1AsRUFBYUEsR0FBYyxHQWdCNUIsT0FiS0EsSUFDSlMsR0FBaUJBLElBQWtCSCxHQUFXLEVBRzlDSixFQUFXRixFQUFZLEdBQ3RCUyxHQUFrQlQsRUFBWSxHQUFNLEdBQU1BLEVBQVksSUFDckRBLEVBQVksR0FDVEMsSUFDSkEsRUFBTU0sS0FBT0EsRUFDYk4sRUFBTS85QixNQUFRdStCLEVBQ2RSLEVBQU03OUIsSUFBTTg5QixJQUdQQSxFQUlSLElBQUlRLEdBQW9CLEdBRXhCLFNBQVNDLEdBQW1CelosR0FDM0IsSUFBSXRELEVBQ0hvQyxFQUFNa0IsRUFBSy9oQyxjQUNYMUIsRUFBV3lqQyxFQUFLempDLFNBQ2hCNjBCLEVBQVVvb0IsR0FBbUJqOUMsR0FFOUIsT0FBSzYwQixJQUlMc0wsRUFBT29DLEVBQUkxaEMsS0FBS3VDLFlBQWFtL0IsRUFBSTFvQyxjQUFlbUcsSUFDaEQ2MEIsRUFBVStOLEVBQU95WixJQUFLbGMsRUFBTSxXQUU1QkEsRUFBS2o0QixXQUFXL0UsWUFBYWc5QixHQUVaLFNBQVp0TCxJQUNKQSxFQUFVLFNBRVhvb0IsR0FBbUJqOUMsR0FBYTYwQixFQUV6QkEsR0FHUixTQUFTc29CLEdBQVVwUSxFQUFVMU0sR0FPNUIsSUFOQSxJQUFJeEwsRUFBUzRPLEVBQ1oyWixFQUFTLEdBQ1QzekIsRUFBUSxFQUNScjJCLEVBQVMyNUMsRUFBUzM1QyxPQUdYcTJCLEVBQVFyMkIsRUFBUXEyQixLQUN2QmdhLEVBQU9zSixFQUFVdGpCLElBQ05sakIsUUFJWHN1QixFQUFVNE8sRUFBS2w5QixNQUFNc3VCLFFBQ2hCd0wsR0FLYSxTQUFaeEwsSUFDSnVvQixFQUFRM3pCLEdBQVVteEIsRUFBU3ZxRCxJQUFLb3pDLEVBQU0sWUFBZSxLQUMvQzJaLEVBQVEzekIsS0FDYmdhLEVBQUtsOUIsTUFBTXN1QixRQUFVLEtBR0ssS0FBdkI0TyxFQUFLbDlCLE1BQU1zdUIsU0FBa0J1bkIsR0FBb0IzWSxLQUNyRDJaLEVBQVEzekIsR0FBVXl6QixHQUFtQnpaLEtBR3JCLFNBQVo1TyxJQUNKdW9CLEVBQVEzekIsR0FBVSxPQUdsQm14QixFQUFTdDdDLElBQUtta0MsRUFBTSxVQUFXNU8sS0FNbEMsSUFBTXBMLEVBQVEsRUFBR0EsRUFBUXIyQixFQUFRcTJCLElBQ1IsTUFBbkIyekIsRUFBUTN6QixLQUNac2pCLEVBQVV0akIsR0FBUWxqQixNQUFNc3VCLFFBQVV1b0IsRUFBUTN6QixJQUk1QyxPQUFPc2pCLEVBR1JuSyxFQUFPRSxHQUFHL0ksT0FBUSxDQUNqQnNHLEtBQU0sV0FDTCxPQUFPOGMsR0FBVW5vRCxNQUFNLElBRXhCa3JDLEtBQU0sV0FDTCxPQUFPaWQsR0FBVW5vRCxPQUVsQnFvRCxPQUFRLFNBQVU5MEIsR0FDakIsTUFBc0Isa0JBQVZBLEVBQ0pBLEVBQVF2ekIsS0FBS3FyQyxPQUFTcnJDLEtBQUtrckMsT0FHNUJsckMsS0FBS3d1QyxNQUFNLFdBQ1o0WSxHQUFvQnBuRCxNQUN4QjR0QyxFQUFRNXRDLE1BQU9xckMsT0FFZnVDLEVBQVE1dEMsTUFBT2tyQyxhQUtuQixJQVVFb2QsR0FDQWoyQyxHQVhFazJDLEdBQW1CLHdCQUVuQkMsR0FBYSxpQ0FFYkMsR0FBZ0IscUNBTWxCSCxHQURjOXBELEVBQVNrcUQseUJBQ1J0NkMsWUFBYTVQLEVBQVNxRyxjQUFlLFNBQ3BEd04sR0FBUTdULEVBQVNxRyxjQUFlLFVBTTNCMEQsYUFBYyxPQUFRLFNBQzVCOEosR0FBTTlKLGFBQWMsVUFBVyxXQUMvQjhKLEdBQU05SixhQUFjLE9BQVEsS0FFNUIrL0MsR0FBSWw2QyxZQUFhaUUsSUFJakIwNkIsRUFBUTRiLFdBQWFMLEdBQUlNLFdBQVcsR0FBT0EsV0FBVyxHQUFPdDZDLFVBQVU1QyxRQUl2RTQ4QyxHQUFJdDZDLFVBQVkseUJBQ2hCKytCLEVBQVE4YixpQkFBbUJQLEdBQUlNLFdBQVcsR0FBT3Q2QyxVQUFVdEMsYUFLM0RzOEMsR0FBSXQ2QyxVQUFZLG9CQUNoQisrQixFQUFRK2IsU0FBV1IsR0FBSWg2QyxVQUt4QixJQUFJeTZDLEdBQVUsQ0FLYkMsTUFBTyxDQUFFLEVBQUcsVUFBVyxZQUN2Qi8yQyxJQUFLLENBQUUsRUFBRyxvQkFBcUIsdUJBQy9CZzNDLEdBQUksQ0FBRSxFQUFHLGlCQUFrQixvQkFDM0J6ckMsR0FBSSxDQUFFLEVBQUcscUJBQXNCLHlCQUUvQjByQyxTQUFVLENBQUUsRUFBRyxHQUFJLEtBWXBCLFNBQVNDLEdBQVFqcEQsRUFBU3lLLEdBSXpCLElBQUkwakMsRUFZSixPQVRDQSxPQUQ0QyxJQUFqQ251QyxFQUFRMjBDLHFCQUNiMzBDLEVBQVEyMEMscUJBQXNCbHFDLEdBQU8sVUFFSSxJQUE3QnpLLEVBQVErbUMsaUJBQ3BCL21DLEVBQVErbUMsaUJBQWtCdDhCLEdBQU8sS0FHakMsUUFHTThrQyxJQUFSOWtDLEdBQXFCQSxHQUFPSyxFQUFVOUssRUFBU3lLLEdBQzVDaWpDLEVBQU9VLE1BQU8sQ0FBRXB1QyxHQUFXbXVDLEdBRzVCQSxFQUtSLFNBQVMrYSxHQUFlaGIsRUFBT2liLEdBSTlCLElBSEEsSUFBSTd1RCxFQUFJLEVBQ1BDLEVBQUkyekMsRUFBTWh3QyxPQUVINUQsRUFBSUMsRUFBR0QsSUFDZG9yRCxFQUFTdDdDLElBQ1I4akMsRUFBTzV6QyxHQUNQLGNBQ0M2dUQsR0FBZXpELEVBQVN2cUQsSUFBS2d1RCxFQUFhN3VELEdBQUssZUExQ25EdXVELEdBQVFPLE1BQVFQLEdBQVFRLE1BQVFSLEdBQVFTLFNBQVdULEdBQVFVLFFBQVVWLEdBQVFDLE1BQzdFRCxHQUFRbnlCLEdBQUtteUIsR0FBUXZyQyxHQUdmdXZCLEVBQVErYixTQUNiQyxHQUFRVyxTQUFXWCxHQUFRRCxPQUFTLENBQUUsRUFBRywrQkFBZ0MsY0EyQzFFLElBQUkzVixHQUFRLFlBRVosU0FBU3dXLEdBQWV2YixFQUFPbHVDLEVBQVMwcEQsRUFBU0MsRUFBV0MsR0FPM0QsSUFOQSxJQUFJcmIsRUFBTXdJLEVBQUt0c0MsRUFBS28vQyxFQUFNQyxFQUFVL2EsRUFDbkNnYixFQUFXL3BELEVBQVF3b0QseUJBQ25Cd0IsRUFBUSxHQUNSMXZELEVBQUksRUFDSkMsRUFBSTJ6QyxFQUFNaHdDLE9BRUg1RCxFQUFJQyxFQUFHRCxJQUdkLElBRkFpMEMsRUFBT0wsRUFBTzV6QyxLQUVRLElBQVRpMEMsRUFHWixHQUF3QixXQUFuQmQsRUFBUWMsR0FJWmIsRUFBT1UsTUFBTzRiLEVBQU96YixFQUFLbGdDLFNBQVcsQ0FBRWtnQyxHQUFTQSxRQUcxQyxHQUFNMEUsR0FBTS9xQyxLQUFNcW1DLEdBSWxCLENBVU4sSUFUQXdJLEVBQU1BLEdBQU9nVCxFQUFTNzdDLFlBQWFsTyxFQUFRMkUsY0FBZSxRQUcxRDhGLEdBQVE2OUMsR0FBUzVULEtBQU1uRyxJQUFVLENBQUUsR0FBSSxLQUFRLEdBQUlubkMsY0FDbkR5aUQsRUFBT2hCLEdBQVNwK0MsSUFBU28rQyxHQUFRRyxTQUNqQ2pTLEVBQUlqcEMsVUFBWSs3QyxFQUFNLEdBQU1uYyxFQUFPdWMsY0FBZTFiLEdBQVNzYixFQUFNLEdBR2pFOWEsRUFBSThhLEVBQU0sR0FDRjlhLEtBQ1BnSSxFQUFNQSxFQUFJM29DLFVBS1hzL0IsRUFBT1UsTUFBTzRiLEVBQU9qVCxFQUFJNUMsYUFHekI0QyxFQUFNZ1QsRUFBUy83QyxZQUdYWCxZQUFjLFFBekJsQjI4QyxFQUFNeG5ELEtBQU14QyxFQUFRMjlCLGVBQWdCNFEsSUFrQ3ZDLElBSEF3YixFQUFTMThDLFlBQWMsR0FFdkIvUyxFQUFJLEVBQ01pMEMsRUFBT3liLEVBQU8xdkQsTUFHdkIsR0FBS3F2RCxHQUFhamMsRUFBT3dDLFFBQVMzQixFQUFNb2IsSUFBZSxFQUNqREMsR0FDSkEsRUFBUXBuRCxLQUFNK3JDLFFBZ0JoQixHQVhBdWIsRUFBVy9DLEdBQVl4WSxHQUd2QndJLEVBQU1rUyxHQUFRYyxFQUFTNzdDLFlBQWFxZ0MsR0FBUSxVQUd2Q3ViLEdBQ0paLEdBQWVuUyxHQUlYMlMsRUFFSixJQURBM2EsRUFBSSxFQUNNUixFQUFPd0ksRUFBS2hJLE1BQ2hCd1osR0FBWXJnRCxLQUFNcW1DLEVBQUsxc0MsTUFBUSxLQUNuQzZuRCxFQUFRbG5ELEtBQU0rckMsR0FNbEIsT0FBT3diLEVBSVIsSUFDQ0csR0FBWSxPQUNaQyxHQUFjLGlEQUNkQyxHQUFpQixzQkFFbEIsU0FBU0MsS0FDUixPQUFPLEVBR1IsU0FBU0MsS0FDUixPQUFPLEVBU1IsU0FBU0MsR0FBWWhjLEVBQU0xc0MsR0FDMUIsT0FBUzBzQyxJQU1WLFdBQ0MsSUFDQyxPQUFPandDLEVBQVNvTixjQUNmLE1BQVFoTyxLQVRROHNELEtBQXFDLFVBQVQzb0QsR0FZL0MsU0FBUzRvRCxHQUFJbGMsRUFBTW1jLEVBQU8vYyxFQUFVanVCLEVBQU1rdUIsRUFBSStjLEdBQzdDLElBQUlDLEVBQVEvb0QsRUFHWixHQUFzQixpQkFBakIsSUFBTzZvRCxFQUFQLGNBQU9BLElBQXFCLENBU2hDLElBQU03b0QsSUFObUIsaUJBQWI4ckMsSUFHWGp1QixFQUFPQSxHQUFRaXVCLEVBQ2ZBLE9BQVc0QixHQUVFbWIsRUFDYkQsR0FBSWxjLEVBQU0xc0MsRUFBTThyQyxFQUFVanVCLEVBQU1nckMsRUFBTzdvRCxHQUFROG9ELEdBRWhELE9BQU9wYyxFQXNCUixHQW5CYSxNQUFSN3VCLEdBQXNCLE1BQU5rdUIsR0FHcEJBLEVBQUtELEVBQ0xqdUIsRUFBT2l1QixPQUFXNEIsR0FDRCxNQUFOM0IsSUFDYyxpQkFBYkQsR0FHWEMsRUFBS2x1QixFQUNMQSxPQUFPNnZCLElBSVAzQixFQUFLbHVCLEVBQ0xBLEVBQU9pdUIsRUFDUEEsT0FBVzRCLEtBR0QsSUFBUDNCLEVBQ0pBLEVBQUswYyxRQUNDLElBQU0xYyxFQUNaLE9BQU9XLEVBZVIsT0FaYSxJQUFSb2MsSUFDSkMsRUFBU2hkLEdBQ1RBLEVBQUssU0FBVS9tQixHQUlkLE9BREE2bUIsSUFBU21kLElBQUtoa0MsR0FDUCtqQyxFQUFPam5ELE1BQU83RCxLQUFNN0IsYUFJekJ1eUMsS0FBT29hLEVBQU9wYSxPQUFVb2EsRUFBT3BhLEtBQU85QyxFQUFPOEMsU0FFMUNqQyxFQUFLRCxNQUFNLFdBQ2pCWixFQUFPN21CLE1BQU1sZ0IsSUFBSzdHLEtBQU00cUQsRUFBTzljLEVBQUlsdUIsRUFBTWl1QixNQSthM0MsU0FBU21kLEdBQWdCeFYsRUFBSXp6QyxFQUFNMG9ELEdBRzVCQSxHQVFON0UsRUFBU3Q3QyxJQUFLa3JDLEVBQUl6ekMsR0FBTSxHQUN4QjZyQyxFQUFPN21CLE1BQU1sZ0IsSUFBSzJ1QyxFQUFJenpDLEVBQU0sQ0FDM0J3MEMsV0FBVyxFQUNYWixRQUFTLFNBQVU1dUIsR0FDbEIsSUFBSWtrQyxFQUFVaFMsRUFDYmlTLEVBQVF0RixFQUFTdnFELElBQUsyRSxLQUFNK0IsR0FFN0IsR0FBeUIsRUFBbEJnbEIsRUFBTW9rQyxXQUFtQm5yRCxLQUFNK0IsSUFLckMsR0FBTW1wRCxFQUFNOXNELFFBaUNFd3ZDLEVBQU83bUIsTUFBTWc4QixRQUFTaGhELElBQVUsSUFBS3FwRCxjQUNsRHJrQyxFQUFNdEssdUJBZk4sR0FkQXl1QyxFQUFRM2pELEVBQU01TSxLQUFNd0QsV0FDcEJ5bkQsRUFBU3Q3QyxJQUFLdEssS0FBTStCLEVBQU1tcEQsR0FLMUJELEVBQVdSLEVBQVl6cUQsS0FBTStCLEdBQzdCL0IsS0FBTStCLEtBRURtcEQsS0FETGpTLEVBQVMyTSxFQUFTdnFELElBQUsyRSxLQUFNK0IsS0FDSmtwRCxFQUN4QnJGLEVBQVN0N0MsSUFBS3RLLEtBQU0rQixHQUFNLEdBRTFCazNDLEVBQVMsR0FFTGlTLElBQVVqUyxFQUtkLE9BRkFseUIsRUFBTXNrQywyQkFDTnRrQyxFQUFNdkssaUJBQ0N5OEIsRUFBT3g5QyxXQWVMeXZELEVBQU05c0QsU0FHakJ3bkQsRUFBU3Q3QyxJQUFLdEssS0FBTStCLEVBQU0sQ0FDekJ0RyxNQUFPbXlDLEVBQU83bUIsTUFBTXVrQyxRQUluQjFkLEVBQU83SSxPQUFRbW1CLEVBQU8sR0FBS3RkLEVBQU8yZCxNQUFNbnZELFdBQ3hDOHVELEVBQU0zakQsTUFBTyxHQUNidkgsUUFLRittQixFQUFNc2tDLHFDQXpFMEI1YixJQUE3Qm1XLEVBQVN2cUQsSUFBS202QyxFQUFJenpDLElBQ3RCNnJDLEVBQU83bUIsTUFBTWxnQixJQUFLMnVDLEVBQUl6ekMsRUFBTXdvRCxJQTVhL0IzYyxFQUFPN21CLE1BQVEsQ0FFZG9sQixPQUFRLEdBRVJ0bEMsSUFBSyxTQUFVNG5DLEVBQU1tYyxFQUFPalYsRUFBUy8xQixFQUFNaXVCLEdBRTFDLElBQUkyZCxFQUFhQyxFQUFheFUsRUFDN0J5VSxFQUFRaHdELEVBQUdpd0QsRUFDWDVJLEVBQVM2SSxFQUFVN3BELEVBQU04cEQsRUFBWUMsRUFDckNDLEVBQVduRyxFQUFTdnFELElBQUtvekMsR0FHMUIsR0FBTTZXLEVBQVk3VyxHQXVDbEIsSUFsQ0trSCxFQUFRQSxVQUVaQSxHQURBNlYsRUFBYzdWLEdBQ1FBLFFBQ3RCOUgsRUFBVzJkLEVBQVkzZCxVQUtuQkEsR0FDSkQsRUFBT21KLEtBQUtHLGdCQUFpQnpoQixHQUFpQm9ZLEdBSXpDOEgsRUFBUWpGLE9BQ2JpRixFQUFRakYsS0FBTzlDLEVBQU84QyxTQUlmZ2IsRUFBU0ssRUFBU0wsVUFDekJBLEVBQVNLLEVBQVNMLE9BQVN4d0QsT0FBT1ksT0FBUSxRQUVuQzJ2RCxFQUFjTSxFQUFTQyxVQUM5QlAsRUFBY00sRUFBU0MsT0FBUyxTQUFVMXFELEdBSXpDLFlBQXlCLElBQVhzc0MsR0FBMEJBLEVBQU83bUIsTUFBTWtsQyxZQUFjM3FELEVBQUVTLEtBQ3BFNnJDLEVBQU83bUIsTUFBTXVSLFNBQVN6MEIsTUFBTzRxQyxFQUFNdHdDLGdCQUFjc3hDLElBTXBEL3pDLEdBREFrdkQsR0FBVUEsR0FBUyxJQUFLMWdELE1BQU9nMkMsSUFBbUIsQ0FBRSxLQUMxQzloRCxPQUNGMUMsS0FFUHFHLEVBQU8rcEQsR0FEUDdVLEVBQU1xVCxHQUFlMVYsS0FBTWdXLEVBQU9sdkQsS0FBUyxJQUNwQixHQUN2Qm13RCxHQUFlNVUsRUFBSyxJQUFPLElBQUt6NUMsTUFBTyxLQUFNMHhDLE9BR3ZDbnRDLElBS05naEQsRUFBVW5WLEVBQU83bUIsTUFBTWc4QixRQUFTaGhELElBQVUsR0FHMUNBLEdBQVM4ckMsRUFBV2tWLEVBQVFxSSxhQUFlckksRUFBUW1KLFdBQWNucUQsRUFHakVnaEQsRUFBVW5WLEVBQU83bUIsTUFBTWc4QixRQUFTaGhELElBQVUsR0FHMUM0cEQsRUFBWS9kLEVBQU83SSxPQUFRLENBQzFCaGpDLEtBQU1BLEVBQ04rcEQsU0FBVUEsRUFDVmxzQyxLQUFNQSxFQUNOKzFCLFFBQVNBLEVBQ1RqRixLQUFNaUYsRUFBUWpGLEtBQ2Q3QyxTQUFVQSxFQUNWMlEsYUFBYzNRLEdBQVlELEVBQU9rSyxLQUFLNXRDLE1BQU1zMEMsYUFBYXAyQyxLQUFNeWxDLEdBQy9EMEksVUFBV3NWLEVBQVd2dUQsS0FBTSxNQUMxQmt1RCxJQUdLSSxFQUFXRixFQUFRM3BELE9BQzFCNnBELEVBQVdGLEVBQVEzcEQsR0FBUyxJQUNuQm9xRCxjQUFnQixFQUduQnBKLEVBQVFxSixRQUNpRCxJQUE5RHJKLEVBQVFxSixNQUFNenhELEtBQU04ekMsRUFBTTd1QixFQUFNaXNDLEVBQVlKLElBRXZDaGQsRUFBS242QixrQkFDVG02QixFQUFLbjZCLGlCQUFrQnZTLEVBQU0wcEQsSUFLM0IxSSxFQUFRbDhDLE1BQ1prOEMsRUFBUWw4QyxJQUFJbE0sS0FBTTh6QyxFQUFNa2QsR0FFbEJBLEVBQVVoVyxRQUFRakYsT0FDdkJpYixFQUFVaFcsUUFBUWpGLEtBQU9pRixFQUFRakYsT0FLOUI3QyxFQUNKK2QsRUFBU3pjLE9BQVF5YyxFQUFTTyxnQkFBaUIsRUFBR1IsR0FFOUNDLEVBQVNscEQsS0FBTWlwRCxHQUloQi9kLEVBQU83bUIsTUFBTW9sQixPQUFRcHFDLElBQVMsSUFNaEMwL0MsT0FBUSxTQUFVaFQsRUFBTW1jLEVBQU9qVixFQUFTOUgsRUFBVXdlLEdBRWpELElBQUlwZCxFQUFHcWQsRUFBV3JWLEVBQ2pCeVUsRUFBUWh3RCxFQUFHaXdELEVBQ1g1SSxFQUFTNkksRUFBVTdwRCxFQUFNOHBELEVBQVlDLEVBQ3JDQyxFQUFXbkcsRUFBU0QsUUFBU2xYLElBQVVtWCxFQUFTdnFELElBQUtvekMsR0FFdEQsR0FBTXNkLElBQWVMLEVBQVNLLEVBQVNMLFFBQXZDLENBT0EsSUFEQWh3RCxHQURBa3ZELEdBQVVBLEdBQVMsSUFBSzFnRCxNQUFPZzJDLElBQW1CLENBQUUsS0FDMUM5aEQsT0FDRjFDLEtBTVAsR0FKQXFHLEVBQU8rcEQsR0FEUDdVLEVBQU1xVCxHQUFlMVYsS0FBTWdXLEVBQU9sdkQsS0FBUyxJQUNwQixHQUN2Qm13RCxHQUFlNVUsRUFBSyxJQUFPLElBQUt6NUMsTUFBTyxLQUFNMHhDLE9BR3ZDbnRDLEVBQU4sQ0FlQSxJQVJBZ2hELEVBQVVuVixFQUFPN21CLE1BQU1nOEIsUUFBU2hoRCxJQUFVLEdBRTFDNnBELEVBQVdGLEVBRFgzcEQsR0FBUzhyQyxFQUFXa1YsRUFBUXFJLGFBQWVySSxFQUFRbUosV0FBY25xRCxJQUNwQyxHQUM3QmsxQyxFQUFNQSxFQUFLLElBQ1YsSUFBSXRFLE9BQVEsVUFBWWtaLEVBQVd2dUQsS0FBTSxpQkFBb0IsV0FHOURndkQsRUFBWXJkLEVBQUkyYyxFQUFTeHRELE9BQ2pCNndDLEtBQ1AwYyxFQUFZQyxFQUFVM2MsSUFFZm9kLEdBQWVQLElBQWFILEVBQVVHLFVBQ3pDblcsR0FBV0EsRUFBUWpGLE9BQVNpYixFQUFVamIsTUFDdEN1RyxJQUFPQSxFQUFJN3VDLEtBQU11akQsRUFBVXBWLFlBQzNCMUksR0FBWUEsSUFBYThkLEVBQVU5ZCxXQUN4QixPQUFiQSxJQUFxQjhkLEVBQVU5ZCxZQUNoQytkLEVBQVN6YyxPQUFRRixFQUFHLEdBRWYwYyxFQUFVOWQsVUFDZCtkLEVBQVNPLGdCQUVMcEosRUFBUXRCLFFBQ1pzQixFQUFRdEIsT0FBTzltRCxLQUFNOHpDLEVBQU1rZCxJQU96QlcsSUFBY1YsRUFBU3h0RCxTQUNyQjJrRCxFQUFRd0osV0FDa0QsSUFBL0R4SixFQUFRd0osU0FBUzV4RCxLQUFNOHpDLEVBQU1vZCxFQUFZRSxFQUFTQyxTQUVsRHBlLEVBQU80ZSxZQUFhL2QsRUFBTTFzQyxFQUFNZ3FELEVBQVNDLGVBR25DTixFQUFRM3BELFNBMUNmLElBQU1BLEtBQVEycEQsRUFDYjlkLEVBQU83bUIsTUFBTTA2QixPQUFRaFQsRUFBTTFzQyxFQUFPNm9ELEVBQU9sdkQsR0FBS2k2QyxFQUFTOUgsR0FBVSxHQThDL0RELEVBQU9vQyxjQUFlMGIsSUFDMUI5RixFQUFTbkUsT0FBUWhULEVBQU0sbUJBSXpCblcsU0FBVSxTQUFVdmhCLEdBRW5CLElBQUl2YyxFQUFHeTBDLEVBQUdaLEVBQUs0TCxFQUFTMFIsRUFBV2MsRUFDbEMzUyxFQUFPLElBQUlsNEMsTUFBT3pELFVBQVVDLFFBRzVCMm9CLEVBQVE2bUIsRUFBTzdtQixNQUFNMmxDLElBQUszMUMsR0FFMUI2MEMsR0FDRWhHLEVBQVN2cUQsSUFBSzJFLEtBQU0sV0FBYzlFLE9BQU9ZLE9BQVEsT0FDL0NpckIsRUFBTWhsQixPQUFVLEdBQ3BCZ2hELEVBQVVuVixFQUFPN21CLE1BQU1nOEIsUUFBU2g4QixFQUFNaGxCLE9BQVUsR0FLakQsSUFGQSszQyxFQUFNLEdBQU0veUIsRUFFTnZzQixFQUFJLEVBQUdBLEVBQUkyRCxVQUFVQyxPQUFRNUQsSUFDbENzL0MsRUFBTXQvQyxHQUFNMkQsVUFBVzNELEdBTXhCLEdBSEF1c0IsRUFBTTRsQyxlQUFpQjNzRCxNQUdsQitpRCxFQUFRNkosY0FBMkQsSUFBNUM3SixFQUFRNkosWUFBWWp5RCxLQUFNcUYsS0FBTSttQixHQUE1RCxDQVNBLElBSkEwbEMsRUFBZTdlLEVBQU83bUIsTUFBTTZrQyxTQUFTanhELEtBQU1xRixLQUFNK21CLEVBQU82a0MsR0FHeERweEQsRUFBSSxHQUNNeS9DLEVBQVV3UyxFQUFjanlELFFBQVl1c0IsRUFBTXhLLHdCQUluRCxJQUhBd0ssRUFBTTVLLGNBQWdCODlCLEVBQVF4TCxLQUU5QlEsRUFBSSxHQUNNMGMsRUFBWTFSLEVBQVEyUixTQUFVM2MsUUFDdENsb0IsRUFBTThsQyxpQ0FJRDlsQyxFQUFNK2xDLGFBQXNDLElBQXhCbkIsRUFBVXBWLFlBQ25DeHZCLEVBQU0rbEMsV0FBVzFrRCxLQUFNdWpELEVBQVVwVixhQUVqQ3h2QixFQUFNNGtDLFVBQVlBLEVBQ2xCNWtDLEVBQU1uSCxLQUFPK3JDLEVBQVUvckMsVUFLVjZ2QixLQUhicEIsSUFBVVQsRUFBTzdtQixNQUFNZzhCLFFBQVM0SSxFQUFVRyxXQUFjLElBQUtFLFFBQzVETCxFQUFVaFcsU0FBVTl4QyxNQUFPbzJDLEVBQVF4TCxLQUFNcUwsTUFHVCxLQUF6Qi95QixFQUFNa3lCLE9BQVM1SyxLQUNyQnRuQixFQUFNdkssaUJBQ051SyxFQUFNdEssb0JBWVgsT0FKS3NtQyxFQUFRZ0ssY0FDWmhLLEVBQVFnSyxhQUFhcHlELEtBQU1xRixLQUFNK21CLEdBRzNCQSxFQUFNa3lCLFNBR2QyUyxTQUFVLFNBQVU3a0MsRUFBTzZrQyxHQUMxQixJQUFJcHhELEVBQUdteEQsRUFBV3pULEVBQUs4VSxFQUFpQkMsRUFDdkNSLEVBQWUsR0FDZk4sRUFBZ0JQLEVBQVNPLGNBQ3pCclcsRUFBTS91QixFQUFNanBCLE9BR2IsR0FBS3F1RCxHQUlKclcsRUFBSXZuQyxZQU9jLFVBQWZ3WSxFQUFNaGxCLE1BQW9CZ2xCLEVBQU1ySSxRQUFVLEdBRTdDLEtBQVFvM0IsSUFBUTkxQyxLQUFNODFDLEVBQU1BLEVBQUk1aUMsWUFBY2xULEtBSTdDLEdBQXNCLElBQWpCODFDLEVBQUl2bkMsV0FBb0MsVUFBZndZLEVBQU1obEIsT0FBcUMsSUFBakIrekMsRUFBSTdvQyxVQUFzQixDQUdqRixJQUZBKy9DLEVBQWtCLEdBQ2xCQyxFQUFtQixHQUNienlELEVBQUksRUFBR0EsRUFBSTJ4RCxFQUFlM3hELFNBTUVpMUMsSUFBNUJ3ZCxFQUZML1UsR0FIQXlULEVBQVlDLEVBQVVweEQsSUFHTnF6QyxTQUFXLE9BRzFCb2YsRUFBa0IvVSxHQUFReVQsRUFBVW5OLGFBQ25DNVEsRUFBUXNLLEVBQUtsNEMsTUFBT3kwQixNQUFPcWhCLElBQVMsRUFDcENsSSxFQUFPbUosS0FBTW1CLEVBQUtsNEMsS0FBTSxLQUFNLENBQUU4MUMsSUFBUTEzQyxRQUVyQzZ1RCxFQUFrQi9VLElBQ3RCOFUsRUFBZ0J0cUQsS0FBTWlwRCxHQUduQnFCLEVBQWdCNXVELFFBQ3BCcXVELEVBQWEvcEQsS0FBTSxDQUFFK3JDLEtBQU1xSCxFQUFLOFYsU0FBVW9CLElBWTlDLE9BTEFsWCxFQUFNOTFDLEtBQ0Rtc0QsRUFBZ0JQLEVBQVN4dEQsUUFDN0JxdUQsRUFBYS9wRCxLQUFNLENBQUUrckMsS0FBTXFILEVBQUs4VixTQUFVQSxFQUFTcmtELE1BQU80a0QsS0FHcERNLEdBR1JTLFFBQVMsU0FBVW55RCxFQUFNb3lELEdBQ3hCanlELE9BQU9DLGVBQWdCeXlDLEVBQU8yZCxNQUFNbnZELFVBQVdyQixFQUFNLENBQ3BESyxZQUFZLEVBQ1pnUSxjQUFjLEVBRWQvUCxJQUFLMnhDLEVBQVltZ0IsR0FDaEIsV0FDQyxHQUFLbnRELEtBQUtvdEQsY0FDUixPQUFPRCxFQUFNbnRELEtBQUtvdEQsZ0JBR3JCLFdBQ0MsR0FBS3B0RCxLQUFLb3RELGNBQ1IsT0FBT3B0RCxLQUFLb3RELGNBQWVyeUQsSUFJL0J1UCxJQUFLLFNBQVU3TyxHQUNkUCxPQUFPQyxlQUFnQjZFLEtBQU1qRixFQUFNLENBQ2xDSyxZQUFZLEVBQ1pnUSxjQUFjLEVBQ2RpaUQsVUFBVSxFQUNWNXhELE1BQU9BLFFBTVhpeEQsSUFBSyxTQUFVVSxHQUNkLE9BQU9BLEVBQWV4ZixFQUFPOEIsU0FDNUIwZCxFQUNBLElBQUl4ZixFQUFPMmQsTUFBTzZCLElBR3BCckssUUFBUyxDQUNSdUssS0FBTSxDQUdMQyxVQUFVLEdBRVhDLE1BQU8sQ0FHTnBCLE1BQU8sU0FBVXhzQyxHQUloQixJQUFJNDFCLEVBQUt4MUMsTUFBUTRmLEVBV2pCLE9BUksyb0MsR0FBZW5nRCxLQUFNb3RDLEVBQUd6ekMsT0FDNUJ5ekMsRUFBR2dZLE9BQVN4aUQsRUFBVXdxQyxFQUFJLFVBRzFCd1YsR0FBZ0J4VixFQUFJLFFBQVMrVSxLQUl2QixHQUVSZSxRQUFTLFNBQVUxckMsR0FJbEIsSUFBSTQxQixFQUFLeDFDLE1BQVE0ZixFQVVqQixPQVBLMm9DLEdBQWVuZ0QsS0FBTW90QyxFQUFHenpDLE9BQzVCeXpDLEVBQUdnWSxPQUFTeGlELEVBQVV3cUMsRUFBSSxVQUUxQndWLEdBQWdCeFYsRUFBSSxVQUlkLEdBS1IwVCxTQUFVLFNBQVVuaUMsR0FDbkIsSUFBSWpwQixFQUFTaXBCLEVBQU1qcEIsT0FDbkIsT0FBT3lxRCxHQUFlbmdELEtBQU10SyxFQUFPaUUsT0FDbENqRSxFQUFPMHZELE9BQVN4aUQsRUFBVWxOLEVBQVEsVUFDbEM4bkQsRUFBU3ZxRCxJQUFLeUMsRUFBUSxVQUN0QmtOLEVBQVVsTixFQUFRLE9BSXJCMnZELGFBQWMsQ0FDYlYsYUFBYyxTQUFVaG1DLFFBSUQwb0IsSUFBakIxb0IsRUFBTWt5QixRQUF3Qmx5QixFQUFNcW1DLGdCQUN4Q3JtQyxFQUFNcW1DLGNBQWM5d0MsWUFBY3lLLEVBQU1reUIsWUE4RjdDckwsRUFBTzRlLFlBQWMsU0FBVS9kLEVBQU0xc0MsRUFBTWlxRCxHQUdyQ3ZkLEVBQUtsNkIscUJBQ1RrNkIsRUFBS2w2QixvQkFBcUJ4UyxFQUFNaXFELEtBSWxDcGUsRUFBTzJkLE1BQVEsU0FBVS9mLEVBQUt2ckMsR0FHN0IsS0FBUUQsZ0JBQWdCNHRDLEVBQU8yZCxPQUM5QixPQUFPLElBQUkzZCxFQUFPMmQsTUFBTy9mLEVBQUt2ckMsR0FJMUJ1ckMsR0FBT0EsRUFBSXpwQyxNQUNmL0IsS0FBS290RCxjQUFnQjVoQixFQUNyQnhyQyxLQUFLK0IsS0FBT3lwQyxFQUFJenBDLEtBSWhCL0IsS0FBS29jLG1CQUFxQm92QixFQUFJbnZCLHVCQUNIb3pCLElBQXpCakUsRUFBSW52QixtQkFHZ0IsSUFBcEJtdkIsRUFBSWx2QixZQUNMaXVDLEdBQ0FDLEdBS0R4cUQsS0FBS2xDLE9BQVcwdEMsRUFBSTF0QyxRQUFrQyxJQUF4QjB0QyxFQUFJMXRDLE9BQU95USxTQUN4Q2k5QixFQUFJMXRDLE9BQU9vVixXQUNYczRCLEVBQUkxdEMsT0FFTGtDLEtBQUttYyxjQUFnQnF2QixFQUFJcnZCLGNBQ3pCbmMsS0FBSzRlLGNBQWdCNHNCLEVBQUk1c0IsZUFJekI1ZSxLQUFLK0IsS0FBT3lwQyxFQUlSdnJDLEdBQ0oydEMsRUFBTzdJLE9BQVEva0MsS0FBTUMsR0FJdEJELEtBQUtvZCxVQUFZb3VCLEdBQU9BLEVBQUlwdUIsV0FBYUMsS0FBS0MsTUFHOUN0ZCxLQUFNNHRDLEVBQU84QixVQUFZLElBS2J0ekMsVUFBWSxDQUN4QndFLFlBQWFndEMsRUFBTzJkLE1BQ3BCbnZDLG1CQUFvQm91QyxHQUNwQmp1QyxxQkFBc0JpdUMsR0FDdEJxQyw4QkFBK0JyQyxHQUMvQmtELGFBQWEsRUFFYmx4QyxlQUFnQixXQUNmLElBQUlsYixFQUFJdEIsS0FBS290RCxjQUVicHRELEtBQUtvYyxtQkFBcUJtdUMsR0FFckJqcEQsSUFBTXRCLEtBQUswdEQsYUFDZnBzRCxFQUFFa2Isa0JBR0pDLGdCQUFpQixXQUNoQixJQUFJbmIsRUFBSXRCLEtBQUtvdEQsY0FFYnB0RCxLQUFLdWMscUJBQXVCZ3VDLEdBRXZCanBELElBQU10QixLQUFLMHRELGFBQ2Zwc0QsRUFBRW1iLG1CQUdKNHVDLHlCQUEwQixXQUN6QixJQUFJL3BELEVBQUl0QixLQUFLb3RELGNBRWJwdEQsS0FBSzZzRCw4QkFBZ0N0QyxHQUVoQ2pwRCxJQUFNdEIsS0FBSzB0RCxhQUNmcHNELEVBQUUrcEQsMkJBR0hyckQsS0FBS3ljLG9CQUtQbXhCLEVBQU9ZLEtBQU0sQ0FDWmx3QixRQUFRLEVBQ1JwQixTQUFTLEVBQ1RDLFlBQVksRUFDWnFILGdCQUFnQixFQUNoQnBHLFNBQVMsRUFDVFQsUUFBUSxFQUNSVixZQUFZLEVBQ1pzQixTQUFTLEVBQ1RMLE9BQU8sRUFDUEMsT0FBTyxFQUNQRSxVQUFVLEVBQ1ZYLE1BQU0sRUFDTixNQUFRLEVBQ1I0RixNQUFNLEVBQ056SCxVQUFVLEVBQ1Y5ZixLQUFLLEVBQ0w2ZixTQUFTLEVBQ1Q4QyxRQUFRLEVBQ1JDLFNBQVMsRUFDVFgsU0FBUyxFQUNUQyxTQUFTLEVBQ1QwdkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1R6MkMsV0FBVyxFQUNYZ04sYUFBYSxFQUNickcsU0FBUyxFQUNUQyxTQUFTLEVBQ1R3RyxlQUFlLEVBQ2Z6RixXQUFXLEVBQ1h3RixTQUFTLEVBRVRaLE1BQU8sU0FBVXFELEdBQ2hCLElBQUlySSxFQUFTcUksRUFBTXJJLE9BR25CLE9BQW9CLE1BQWZxSSxFQUFNckQsT0FBaUIwbUMsR0FBVWhpRCxLQUFNMmUsRUFBTWhsQixNQUN4QixNQUFsQmdsQixFQUFNbEwsU0FBbUJrTCxFQUFNbEwsU0FBV2tMLEVBQU1uTCxTQUlsRG1MLEVBQU1yRCxZQUFvQityQixJQUFYL3dCLEdBQXdCMnJDLEdBQVlqaUQsS0FBTTJlLEVBQU1obEIsTUFDdEQsRUFBVDJjLEVBQ0csRUFHTSxFQUFUQSxFQUNHLEVBR00sRUFBVEEsRUFDRyxFQUdELEVBR0RxSSxFQUFNckQsUUFFWmtxQixFQUFPN21CLE1BQU1tbUMsU0FFaEJ0ZixFQUFPWSxLQUFNLENBQUU3TyxNQUFPLFVBQVdrdUIsS0FBTSxhQUFjLFNBQVU5ckQsRUFBTXFwRCxHQUNwRXhkLEVBQU83bUIsTUFBTWc4QixRQUFTaGhELEdBQVMsQ0FHOUJxcUQsTUFBTyxXQVFOLE9BSEFwQixHQUFnQmhyRCxLQUFNK0IsRUFBTTBvRCxLQUdyQixHQUVSYSxRQUFTLFdBTVIsT0FIQU4sR0FBZ0JockQsS0FBTStCLElBR2YsR0FHUnFwRCxhQUFjQSxNQVloQnhkLEVBQU9ZLEtBQU0sQ0FDWnNmLFdBQVksWUFDWkMsV0FBWSxXQUNaQyxhQUFjLGNBQ2RDLGFBQWMsZUFDWixTQUFVQyxFQUFNeEIsR0FDbEI5ZSxFQUFPN21CLE1BQU1nOEIsUUFBU21MLEdBQVMsQ0FDOUI5QyxhQUFjc0IsRUFDZFIsU0FBVVEsRUFFVlYsT0FBUSxTQUFVamxDLEdBQ2pCLElBQUlzbkIsRUFDSHZ3QyxFQUFTa0MsS0FDVG11RCxFQUFVcG5DLEVBQU1uSSxjQUNoQitzQyxFQUFZNWtDLEVBQU00a0MsVUFTbkIsT0FMTXdDLElBQWFBLElBQVlyd0QsR0FBVzh2QyxFQUFPaEosU0FBVTltQyxFQUFRcXdELE1BQ2xFcG5DLEVBQU1obEIsS0FBTzRwRCxFQUFVRyxTQUN2QnpkLEVBQU1zZCxFQUFVaFcsUUFBUTl4QyxNQUFPN0QsS0FBTTdCLFdBQ3JDNG9CLEVBQU1obEIsS0FBTzJxRCxHQUVQcmUsT0FLVlQsRUFBT0UsR0FBRy9JLE9BQVEsQ0FFakI0bEIsR0FBSSxTQUFVQyxFQUFPL2MsRUFBVWp1QixFQUFNa3VCLEdBQ3BDLE9BQU82YyxHQUFJM3FELEtBQU00cUQsRUFBTy9jLEVBQVVqdUIsRUFBTWt1QixJQUV6QytjLElBQUssU0FBVUQsRUFBTy9jLEVBQVVqdUIsRUFBTWt1QixHQUNyQyxPQUFPNmMsR0FBSTNxRCxLQUFNNHFELEVBQU8vYyxFQUFVanVCLEVBQU1rdUIsRUFBSSxJQUU3Q2lkLElBQUssU0FBVUgsRUFBTy9jLEVBQVVDLEdBQy9CLElBQUk2ZCxFQUFXNXBELEVBQ2YsR0FBSzZvRCxHQUFTQSxFQUFNcHVDLGdCQUFrQm91QyxFQUFNZSxVQVczQyxPQVJBQSxFQUFZZixFQUFNZSxVQUNsQi9kLEVBQVFnZCxFQUFNK0IsZ0JBQWlCNUIsSUFDOUJZLEVBQVVwVixVQUNUb1YsRUFBVUcsU0FBVyxJQUFNSCxFQUFVcFYsVUFDckNvVixFQUFVRyxTQUNYSCxFQUFVOWQsU0FDVjhkLEVBQVVoVyxTQUVKMzFDLEtBRVIsR0FBc0IsaUJBQWpCLElBQU80cUQsRUFBUCxjQUFPQSxJQUFxQixDQUdoQyxJQUFNN29ELEtBQVE2b0QsRUFDYjVxRCxLQUFLK3FELElBQUtocEQsRUFBTThyQyxFQUFVK2MsRUFBTzdvRCxJQUVsQyxPQUFPL0IsS0FXUixPQVRrQixJQUFiNnRDLEdBQTBDLG1CQUFiQSxJQUdqQ0MsRUFBS0QsRUFDTEEsT0FBVzRCLElBRUEsSUFBUDNCLElBQ0pBLEVBQUswYyxJQUVDeHFELEtBQUt3dUMsTUFBTSxXQUNqQlosRUFBTzdtQixNQUFNMDZCLE9BQVF6aEQsS0FBTTRxRCxFQUFPOWMsRUFBSUQsU0FNekMsSUFLQ3VnQixHQUFlLHdCQUdmQyxHQUFXLG9DQUNYQyxHQUFlLDJDQUdoQixTQUFTQyxHQUFvQjlmLEVBQU11UixHQUNsQyxPQUFLaDFDLEVBQVV5akMsRUFBTSxVQUNwQnpqQyxFQUErQixLQUFyQmcxQyxFQUFRenhDLFNBQWtCeXhDLEVBQVVBLEVBQVE5eEMsV0FBWSxPQUUzRDAvQixFQUFRYSxHQUFPL3NDLFNBQVUsU0FBVyxJQUdyQytzQyxFQUlSLFNBQVMrZixHQUFlL2YsR0FFdkIsT0FEQUEsRUFBSzFzQyxNQUF5QyxPQUFoQzBzQyxFQUFLaEIsYUFBYyxTQUFzQixJQUFNZ0IsRUFBSzFzQyxLQUMzRDBzQyxFQUVSLFNBQVNnZ0IsR0FBZWhnQixHQU92QixNQU4yQyxXQUFwQ0EsRUFBSzFzQyxNQUFRLElBQUt3RixNQUFPLEVBQUcsR0FDbENrbkMsRUFBSzFzQyxLQUFPMHNDLEVBQUsxc0MsS0FBS3dGLE1BQU8sR0FFN0JrbkMsRUFBS25tQyxnQkFBaUIsUUFHaEJtbUMsRUFHUixTQUFTaWdCLEdBQWdCbGpCLEVBQUttakIsR0FDN0IsSUFBSW4wRCxFQUFHQyxFQUFHc0gsRUFBZ0I2c0QsRUFBVUMsRUFBVW5ELEVBRTlDLEdBQXVCLElBQWxCaUQsRUFBS3BnRCxTQUFWLENBS0EsR0FBS3EzQyxFQUFTRCxRQUFTbmEsS0FFdEJrZ0IsRUFEVzlGLEVBQVN2cUQsSUFBS213QyxHQUNQa2dCLFFBS2pCLElBQU0zcEQsS0FGTjZqRCxFQUFTbkUsT0FBUWtOLEVBQU0saUJBRVRqRCxFQUNiLElBQU1seEQsRUFBSSxFQUFHQyxFQUFJaXhELEVBQVEzcEQsR0FBTzNELE9BQVE1RCxFQUFJQyxFQUFHRCxJQUM5Q296QyxFQUFPN21CLE1BQU1sZ0IsSUFBSzhuRCxFQUFNNXNELEVBQU0ycEQsRUFBUTNwRCxHQUFRdkgsSUFPN0NxckQsRUFBU0YsUUFBU25hLEtBQ3RCb2pCLEVBQVcvSSxFQUFTbkIsT0FBUWxaLEdBQzVCcWpCLEVBQVdqaEIsRUFBTzdJLE9BQVEsR0FBSTZwQixHQUU5Qi9JLEVBQVN2N0MsSUFBS3FrRCxFQUFNRSxLQUt0QixTQUFTQyxHQUFVdGpCLEVBQUttakIsR0FDdkIsSUFBSTNqRCxFQUFXMmpELEVBQUszakQsU0FBUzFELGNBR1gsVUFBYjBELEdBQXdCdTlDLEdBQWVuZ0QsS0FBTW9qQyxFQUFJenBDLE1BQ3JENHNELEVBQUtqakQsUUFBVTgvQixFQUFJOS9CLFFBR0ssVUFBYlYsR0FBcUMsYUFBYkEsSUFDbkMyakQsRUFBSzNpRCxhQUFldy9CLEVBQUl4L0IsY0FJMUIsU0FBUytpRCxHQUFVQyxFQUFZbFYsRUFBTXhuQixFQUFVdzNCLEdBRzlDaFEsRUFBT3JOLEVBQU1xTixHQUViLElBQUltUSxFQUFVdmIsRUFBT2tiLEVBQVNxRixFQUFZdm1DLEVBQU02a0IsRUFDL0MveUMsRUFBSSxFQUNKQyxFQUFJdTBELEVBQVc1d0QsT0FDZjh3RCxFQUFXejBELEVBQUksRUFDZmdCLEVBQVFxK0MsRUFBTSxHQUNkcVYsRUFBa0JuaUIsRUFBWXZ4QyxHQUcvQixHQUFLMHpELEdBQ0QxMEQsRUFBSSxHQUFzQixpQkFBVmdCLElBQ2hCc3hDLEVBQVE0YixZQUFjMEYsR0FBU2ptRCxLQUFNM00sR0FDeEMsT0FBT3V6RCxFQUFXeGdCLE1BQU0sU0FBVS9aLEdBQ2pDLElBQUlvcUIsRUFBT21RLEVBQVdyZ0IsR0FBSWxhLEdBQ3JCMDZCLElBQ0pyVixFQUFNLEdBQU1yK0MsRUFBTWQsS0FBTXFGLEtBQU15MEIsRUFBT29xQixFQUFLdlQsU0FFM0N5akIsR0FBVWxRLEVBQU0vRSxFQUFNeG5CLEVBQVV3M0IsTUFJbEMsR0FBS3J2RCxJQUVKaTBDLEdBREF1YixFQUFXTixHQUFlN1AsRUFBTWtWLEVBQVksR0FBSXRpRCxlQUFlLEVBQU9zaUQsRUFBWWxGLElBQ2pFNTdDLFdBRW1CLElBQS9CKzdDLEVBQVM1VixXQUFXajJDLFNBQ3hCNnJELEVBQVd2YixHQUlQQSxHQUFTb2IsR0FBVSxDQU92QixJQUxBbUYsR0FEQXJGLEVBQVVoYyxFQUFPdndDLElBQUs4ckQsR0FBUWMsRUFBVSxVQUFZdUUsS0FDL0Jwd0QsT0FLYjVELEVBQUlDLEVBQUdELElBQ2RrdUIsRUFBT3VoQyxFQUVGenZELElBQU0wMEQsSUFDVnhtQyxFQUFPa2xCLEVBQU8wQixNQUFPNW1CLEdBQU0sR0FBTSxHQUc1QnVtQyxHQUlKcmhCLEVBQU9VLE1BQU9zYixFQUFTVCxHQUFRemdDLEVBQU0sWUFJdkM0SixFQUFTMzNCLEtBQU1xMEQsRUFBWXgwRCxHQUFLa3VCLEVBQU1sdUIsR0FHdkMsR0FBS3kwRCxFQU9KLElBTkExaEIsRUFBTXFjLEVBQVNBLEVBQVF4ckQsT0FBUyxHQUFJc08sY0FHcENraEMsRUFBT3Z3QyxJQUFLdXNELEVBQVM2RSxJQUdmajBELEVBQUksRUFBR0EsRUFBSXkwRCxFQUFZejBELElBQzVCa3VCLEVBQU9raEMsRUFBU3B2RCxHQUNYaXVELEdBQVlyZ0QsS0FBTXNnQixFQUFLM21CLE1BQVEsTUFDbEM2akQsRUFBU2xCLE9BQVFoOEIsRUFBTSxlQUN4QmtsQixFQUFPaEosU0FBVTJJLEVBQUs3a0IsS0FFakJBLEVBQUs4aUIsS0FBOEMsWUFBckM5aUIsRUFBSzNtQixNQUFRLElBQUt1RixjQUcvQnNtQyxFQUFPd2hCLFdBQWExbUMsRUFBSzJrQixVQUM3Qk8sRUFBT3doQixTQUFVMW1DLEVBQUs4aUIsSUFBSyxDQUMxQjRCLE1BQU8xa0IsRUFBSzBrQixPQUFTMWtCLEVBQUsra0IsYUFBYyxVQUN0Q0YsR0FHSkQsRUFBUzVrQixFQUFLbmIsWUFBWW5MLFFBQVNrc0QsR0FBYyxJQUFNNWxDLEVBQU02a0IsSUFRbkUsT0FBT3loQixFQUdSLFNBQVN2TixHQUFRaFQsRUFBTVosRUFBVXdoQixHQUtoQyxJQUpBLElBQUkzbUMsRUFDSHdoQyxFQUFRcmMsRUFBV0QsRUFBT2lKLE9BQVFoSixFQUFVWSxHQUFTQSxFQUNyRGowQyxFQUFJLEVBRTRCLE9BQXZCa3VCLEVBQU93aEMsRUFBTzF2RCxJQUFlQSxJQUNoQzYwRCxHQUE4QixJQUFsQjNtQyxFQUFLbmEsVUFDdEJxL0IsRUFBTzBoQixVQUFXbkcsR0FBUXpnQyxJQUd0QkEsRUFBS3hWLGFBQ0ptOEMsR0FBWXBJLEdBQVl2K0IsSUFDNUIwZ0MsR0FBZUQsR0FBUXpnQyxFQUFNLFdBRTlCQSxFQUFLeFYsV0FBVy9FLFlBQWF1YSxJQUkvQixPQUFPK2xCLEVBR1JiLEVBQU83SSxPQUFRLENBQ2RvbEIsY0FBZSxTQUFVN2UsR0FDeEIsT0FBT0EsR0FHUmdFLE1BQU8sU0FBVWIsRUFBTThnQixFQUFlQyxHQUNyQyxJQUFJaDFELEVBQUdDLEVBQUdnMUQsRUFBYUMsRUFDdEJwZ0IsRUFBUWIsRUFBS21hLFdBQVcsR0FDeEIrRyxFQUFTMUksR0FBWXhZLEdBR3RCLEtBQU0xQixFQUFROGIsZ0JBQXNDLElBQWxCcGEsRUFBS2xnQyxVQUFvQyxLQUFsQmtnQyxFQUFLbGdDLFVBQzNEcS9CLEVBQU9zUSxTQUFVelAsSUFNbkIsSUFIQWloQixFQUFldkcsR0FBUTdaLEdBR2pCOTBDLEVBQUksRUFBR0MsR0FGYmcxRCxFQUFjdEcsR0FBUTFhLElBRU9yd0MsT0FBUTVELEVBQUlDLEVBQUdELElBQzNDczBELEdBQVVXLEVBQWFqMUQsR0FBS2sxRCxFQUFjbDFELElBSzVDLEdBQUsrMEQsRUFDSixHQUFLQyxFQUlKLElBSEFDLEVBQWNBLEdBQWV0RyxHQUFRMWEsR0FDckNpaEIsRUFBZUEsR0FBZ0J2RyxHQUFRN1osR0FFakM5MEMsRUFBSSxFQUFHQyxFQUFJZzFELEVBQVlyeEQsT0FBUTVELEVBQUlDLEVBQUdELElBQzNDazBELEdBQWdCZSxFQUFhajFELEdBQUtrMUQsRUFBY2wxRCxTQUdqRGswRCxHQUFnQmpnQixFQUFNYSxHQVd4QixPQU5Bb2dCLEVBQWV2RyxHQUFRN1osRUFBTyxXQUNabHhDLE9BQVMsR0FDMUJnckQsR0FBZXNHLEdBQWVDLEdBQVV4RyxHQUFRMWEsRUFBTSxXQUloRGEsR0FHUmdnQixVQUFXLFNBQVVsaEIsR0FLcEIsSUFKQSxJQUFJeHVCLEVBQU02dUIsRUFBTTFzQyxFQUNmZ2hELEVBQVVuVixFQUFPN21CLE1BQU1nOEIsUUFDdkJ2b0QsRUFBSSxPQUU2QmkxQyxLQUF4QmhCLEVBQU9MLEVBQU81ekMsSUFBcUJBLElBQzVDLEdBQUs4cUQsRUFBWTdXLEdBQVMsQ0FDekIsR0FBTzd1QixFQUFPNnVCLEVBQU1tWCxFQUFTbFcsU0FBYyxDQUMxQyxHQUFLOXZCLEVBQUs4ckMsT0FDVCxJQUFNM3BELEtBQVE2ZCxFQUFLOHJDLE9BQ2IzSSxFQUFTaGhELEdBQ2I2ckMsRUFBTzdtQixNQUFNMDZCLE9BQVFoVCxFQUFNMXNDLEdBSTNCNnJDLEVBQU80ZSxZQUFhL2QsRUFBTTFzQyxFQUFNNmQsRUFBS29zQyxRQU94Q3ZkLEVBQU1tWCxFQUFTbFcsY0FBWUQsRUFFdkJoQixFQUFNb1gsRUFBU25XLFdBSW5CakIsRUFBTW9YLEVBQVNuVyxjQUFZRCxPQU9oQzdCLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCNnFCLE9BQVEsU0FBVS9oQixHQUNqQixPQUFPNFQsR0FBUXpoRCxLQUFNNnRDLEdBQVUsSUFHaEM0VCxPQUFRLFNBQVU1VCxHQUNqQixPQUFPNFQsR0FBUXpoRCxLQUFNNnRDLElBR3RCcm5CLEtBQU0sU0FBVS9xQixHQUNmLE9BQU9pcEQsRUFBUTFrRCxNQUFNLFNBQVV2RSxHQUM5QixZQUFpQmcwQyxJQUFWaDBDLEVBQ05teUMsRUFBT3BuQixLQUFNeG1CLE1BQ2JBLEtBQUswaEQsUUFBUWxULE1BQU0sV0FDSyxJQUFsQnh1QyxLQUFLdU8sVUFBb0MsS0FBbEJ2TyxLQUFLdU8sVUFBcUMsSUFBbEJ2TyxLQUFLdU8sV0FDeER2TyxLQUFLdU4sWUFBYzlSLFFBR3BCLEtBQU1BLEVBQU8wQyxVQUFVQyxTQUczQnl4RCxPQUFRLFdBQ1AsT0FBT2QsR0FBVS91RCxLQUFNN0IsV0FBVyxTQUFVc3dDLEdBQ3BCLElBQWxCenVDLEtBQUt1TyxVQUFvQyxLQUFsQnZPLEtBQUt1TyxVQUFxQyxJQUFsQnZPLEtBQUt1TyxVQUMzQ2dnRCxHQUFvQnZ1RCxLQUFNeXVDLEdBQ2hDcmdDLFlBQWFxZ0MsT0FLdkJxaEIsUUFBUyxXQUNSLE9BQU9mLEdBQVUvdUQsS0FBTTdCLFdBQVcsU0FBVXN3QyxHQUMzQyxHQUF1QixJQUFsQnp1QyxLQUFLdU8sVUFBb0MsS0FBbEJ2TyxLQUFLdU8sVUFBcUMsSUFBbEJ2TyxLQUFLdU8sU0FBaUIsQ0FDekUsSUFBSXpRLEVBQVN5d0QsR0FBb0J2dUQsS0FBTXl1QyxHQUN2QzN3QyxFQUFPd2lDLGFBQWNtTyxFQUFNM3dDLEVBQU9vUSxpQkFLckM2aEQsT0FBUSxXQUNQLE9BQU9oQixHQUFVL3VELEtBQU03QixXQUFXLFNBQVVzd0MsR0FDdEN6dUMsS0FBS2tULFlBQ1RsVCxLQUFLa1QsV0FBV290QixhQUFjbU8sRUFBTXp1QyxVQUt2Q2d3RCxNQUFPLFdBQ04sT0FBT2pCLEdBQVUvdUQsS0FBTTdCLFdBQVcsU0FBVXN3QyxHQUN0Q3p1QyxLQUFLa1QsWUFDVGxULEtBQUtrVCxXQUFXb3RCLGFBQWNtTyxFQUFNenVDLEtBQUs0b0IsaUJBSzVDODRCLE1BQU8sV0FJTixJQUhBLElBQUlqVCxFQUNIajBDLEVBQUksRUFFMkIsT0FBdEJpMEMsRUFBT3p1QyxLQUFNeEYsSUFBZUEsSUFDZCxJQUFsQmkwQyxFQUFLbGdDLFdBR1RxL0IsRUFBTzBoQixVQUFXbkcsR0FBUTFhLEdBQU0sSUFHaENBLEVBQUtsaEMsWUFBYyxJQUlyQixPQUFPdk4sTUFHUnN2QyxNQUFPLFNBQVVpZ0IsRUFBZUMsR0FJL0IsT0FIQUQsRUFBaUMsTUFBakJBLEdBQWdDQSxFQUNoREMsRUFBeUMsTUFBckJBLEVBQTRCRCxFQUFnQkMsRUFFekR4dkQsS0FBSzNDLEtBQUssV0FDaEIsT0FBT3V3QyxFQUFPMEIsTUFBT3R2QyxLQUFNdXZELEVBQWVDLE9BSTVDbGtCLEtBQU0sU0FBVTd2QyxHQUNmLE9BQU9pcEQsRUFBUTFrRCxNQUFNLFNBQVV2RSxHQUM5QixJQUFJZ3pDLEVBQU96dUMsS0FBTSxJQUFPLEdBQ3ZCeEYsRUFBSSxFQUNKQyxFQUFJdUYsS0FBSzVCLE9BRVYsUUFBZXF4QyxJQUFWaDBDLEdBQXlDLElBQWxCZ3pDLEVBQUtsZ0MsU0FDaEMsT0FBT2tnQyxFQUFLemdDLFVBSWIsR0FBc0IsaUJBQVZ2UyxJQUF1QjJ5RCxHQUFhaG1ELEtBQU0zTSxLQUNwRHN0RCxJQUFXUCxHQUFTNVQsS0FBTW41QyxJQUFXLENBQUUsR0FBSSxLQUFRLEdBQUk2TCxlQUFrQixDQUUxRTdMLEVBQVFteUMsRUFBT3VjLGNBQWUxdUQsR0FFOUIsSUFDQyxLQUFRakIsRUFBSUMsRUFBR0QsSUFJUyxLQUh2QmkwQyxFQUFPenVDLEtBQU14RixJQUFPLElBR1YrVCxXQUNUcS9CLEVBQU8waEIsVUFBV25HLEdBQVExYSxHQUFNLElBQ2hDQSxFQUFLemdDLFVBQVl2UyxHQUluQmd6QyxFQUFPLEVBR04sTUFBUW50QyxLQUdObXRDLEdBQ0p6dUMsS0FBSzBoRCxRQUFRbU8sT0FBUXAwRCxLQUVwQixLQUFNQSxFQUFPMEMsVUFBVUMsU0FHM0I2eEQsWUFBYSxXQUNaLElBQUluRyxFQUFVLEdBR2QsT0FBT2lGLEdBQVUvdUQsS0FBTTdCLFdBQVcsU0FBVXN3QyxHQUMzQyxJQUFJckQsRUFBU3ByQyxLQUFLa1QsV0FFYjA2QixFQUFPd0MsUUFBU3B3QyxLQUFNOHBELEdBQVksSUFDdENsYyxFQUFPMGhCLFVBQVduRyxHQUFRbnBELE9BQ3JCb3JDLEdBQ0pBLEVBQU84a0IsYUFBY3poQixFQUFNenVDLFNBSzNCOHBELE1BSUxsYyxFQUFPWSxLQUFNLENBQ1oyaEIsU0FBVSxTQUNWQyxVQUFXLFVBQ1g5dkIsYUFBYyxTQUNkK3ZCLFlBQWEsUUFDYkMsV0FBWSxnQkFDVixTQUFVdjFELEVBQU13MUQsR0FDbEIzaUIsRUFBT0UsR0FBSS95QyxHQUFTLFNBQVU4eUMsR0FPN0IsSUFOQSxJQUFJTyxFQUNIQyxFQUFNLEdBQ05taUIsRUFBUzVpQixFQUFRQyxHQUNqQjVRLEVBQU91ekIsRUFBT3B5RCxPQUFTLEVBQ3ZCNUQsRUFBSSxFQUVHQSxHQUFLeWlDLEVBQU16aUMsSUFDbEI0ekMsRUFBUTV6QyxJQUFNeWlDLEVBQU9qOUIsS0FBT0EsS0FBS3N2QyxPQUFPLEdBQ3hDMUIsRUFBUTRpQixFQUFRaDJELElBQU8rMUQsR0FBWW5pQixHQUluQzFyQyxFQUFLbUIsTUFBT3dxQyxFQUFLRCxFQUFNL3lDLE9BR3hCLE9BQU8yRSxLQUFLbXVDLFVBQVdFLE9BR3pCLElBQUlvaUIsR0FBWSxJQUFJOWQsT0FBUSxLQUFPbVUsR0FBTyxrQkFBbUIsS0FFekQ0SixHQUFZLFNBQVVqaUIsR0FLeEIsSUFBSS93QixFQUFPK3dCLEVBQUsvaEMsY0FBY29kLFlBTTlCLE9BSk1wTSxHQUFTQSxFQUFLaXpDLFNBQ25CanpDLEVBQU8zVyxHQUdEMlcsRUFBS2t6QyxpQkFBa0JuaUIsSUFHNUJvaUIsR0FBTyxTQUFVcGlCLEVBQU0zaEMsRUFBU3dsQixHQUNuQyxJQUFJK2IsRUFBS3R6QyxFQUNSKzFELEVBQU0sR0FHUCxJQUFNLzFELEtBQVErUixFQUNiZ2tELEVBQUsvMUQsR0FBUzB6QyxFQUFLbDlCLE1BQU94VyxHQUMxQjB6QyxFQUFLbDlCLE1BQU94VyxHQUFTK1IsRUFBUy9SLEdBTS9CLElBQU1BLEtBSE5zekMsRUFBTS9iLEVBQVMzM0IsS0FBTTh6QyxHQUdQM2hDLEVBQ2IyaEMsRUFBS2w5QixNQUFPeFcsR0FBUysxRCxFQUFLLzFELEdBRzNCLE9BQU9zekMsR0FJSjBpQixHQUFZLElBQUlwZSxPQUFRcVUsR0FBVTFwRCxLQUFNLEtBQU8sS0E4SG5ELFNBQVMwekQsR0FBUXZpQixFQUFNMXpDLEVBQU1rMkQsR0FDNUIsSUFBSXJ0QyxFQUFPc3RDLEVBQVVDLEVBQVU5aUIsRUFNOUI5OEIsRUFBUWs5QixFQUFLbDlCLE1BcUNkLE9BbkNBMC9DLEVBQVdBLEdBQVlQLEdBQVdqaUIsTUFRcEIsTUFGYkosRUFBTTRpQixFQUFTRyxpQkFBa0JyMkQsSUFBVWsyRCxFQUFVbDJELEtBRWpDa3NELEdBQVl4WSxLQUMvQkosRUFBTVQsRUFBT3I4QixNQUFPazlCLEVBQU0xekMsS0FRckJneUMsRUFBUXNrQixrQkFBb0JaLEdBQVVyb0QsS0FBTWltQyxJQUFTMGlCLEdBQVUzb0QsS0FBTXJOLEtBRzFFNm9CLEVBQVFyUyxFQUFNcVMsTUFDZHN0QyxFQUFXMy9DLEVBQU0yL0MsU0FDakJDLEVBQVc1L0MsRUFBTTQvQyxTQUdqQjUvQyxFQUFNMi9DLFNBQVczL0MsRUFBTTQvQyxTQUFXNS9DLEVBQU1xUyxNQUFReXFCLEVBQ2hEQSxFQUFNNGlCLEVBQVNydEMsTUFHZnJTLEVBQU1xUyxNQUFRQSxFQUNkclMsRUFBTTIvQyxTQUFXQSxFQUNqQjMvQyxFQUFNNC9DLFNBQVdBLFNBSUoxaEIsSUFBUnBCLEVBSU5BLEVBQU0sR0FDTkEsRUFJRixTQUFTaWpCLEdBQWNDLEVBQWFDLEdBR25DLE1BQU8sQ0FDTm4yRCxJQUFLLFdBQ0osSUFBS2syRCxJQVNMLE9BQVN2eEQsS0FBSzNFLElBQU1tMkQsR0FBUzN0RCxNQUFPN0QsS0FBTTdCLGtCQUxsQzZCLEtBQUszRSxPQXhMaEIsV0FJQyxTQUFTbzJELElBR1IsR0FBTW5KLEVBQU4sQ0FJQW9KLEVBQVVuZ0QsTUFBTW9nRCxRQUFVLCtFQUUxQnJKLEVBQUkvMkMsTUFBTW9nRCxRQUNULDRIQUdEbDhCLEdBQWdCcm5CLFlBQWFzakQsR0FBWXRqRCxZQUFhazZDLEdBRXRELElBQUlzSixFQUFXN3FELEVBQU82cEQsaUJBQWtCdEksR0FDeEN1SixFQUFvQyxPQUFqQkQsRUFBU3JzQixJQUc1QnVzQixFQUFzRSxLQUE5Q0MsRUFBb0JILEVBQVNJLFlBSXJEMUosRUFBSS8yQyxNQUFNMGdELE1BQVEsTUFDbEJDLEVBQTZELEtBQXpDSCxFQUFvQkgsRUFBU0ssT0FJakRFLEVBQWdFLEtBQXpDSixFQUFvQkgsRUFBU2h1QyxPQU1wRDBrQyxFQUFJLzJDLE1BQU02Z0QsU0FBVyxXQUNyQkMsRUFBaUUsS0FBOUNOLEVBQW9CekosRUFBSWdLLFlBQWMsR0FFekQ3OEIsR0FBZ0J0bkIsWUFBYXVqRCxHQUk3QnBKLEVBQU0sTUFHUCxTQUFTeUosRUFBb0JRLEdBQzVCLE9BQU8vM0MsS0FBS2c0QyxNQUFPQyxXQUFZRixJQUdoQyxJQUFJVixFQUFrQk0sRUFBc0JFLEVBQWtCSCxFQUM3RFEsRUFBeUJaLEVBQ3pCSixFQUFZbHpELEVBQVNxRyxjQUFlLE9BQ3BDeWpELEVBQU05cEQsRUFBU3FHLGNBQWUsT0FHekJ5akQsRUFBSS8yQyxRQU1WKzJDLEVBQUkvMkMsTUFBTW9oRCxlQUFpQixjQUMzQnJLLEVBQUlNLFdBQVcsR0FBT3IzQyxNQUFNb2hELGVBQWlCLEdBQzdDNWxCLEVBQVE2bEIsZ0JBQStDLGdCQUE3QnRLLEVBQUkvMkMsTUFBTW9oRCxlQUVwQy9rQixFQUFPN0ksT0FBUWdJLEVBQVMsQ0FDdkI4bEIsa0JBQW1CLFdBRWxCLE9BREFwQixJQUNPVSxHQUVSZCxlQUFnQixXQUVmLE9BREFJLElBQ09TLEdBRVJZLGNBQWUsV0FFZCxPQURBckIsSUFDT0ksR0FFUmtCLG1CQUFvQixXQUVuQixPQURBdEIsSUFDT0ssR0FFUmtCLGNBQWUsV0FFZCxPQURBdkIsSUFDT1ksR0FRUlkscUJBQXNCLFdBQ3JCLElBQUlDLEVBQU9qSyxFQUFJa0ssRUFBU0MsRUFvQnhCLE9BbkJnQyxNQUEzQlYsSUFDSlEsRUFBUTEwRCxFQUFTcUcsY0FBZSxTQUNoQ29rRCxFQUFLenFELEVBQVNxRyxjQUFlLE1BQzdCc3VELEVBQVUzMEQsRUFBU3FHLGNBQWUsT0FFbENxdUQsRUFBTTNoRCxNQUFNb2dELFFBQVUsa0NBQ3RCMUksRUFBRzEzQyxNQUFNc1MsT0FBUyxNQUNsQnN2QyxFQUFRNWhELE1BQU1zUyxPQUFTLE1BRXZCNFIsR0FDRXJuQixZQUFhOGtELEdBQ2I5a0QsWUFBYTY2QyxHQUNiNzZDLFlBQWEra0QsR0FFZkMsRUFBVXJzRCxFQUFPNnBELGlCQUFrQjNILEdBQ25DeUosRUFBMEJXLFNBQVVELEVBQVF2dkMsUUFBVyxFQUV2RDRSLEdBQWdCdG5CLFlBQWEra0QsSUFFdkJSLE1BcEhWLEdBbU1BLElBQUlZLEdBQWMsQ0FBRSxTQUFVLE1BQU8sTUFDcENDLEdBQWEvMEQsRUFBU3FHLGNBQWUsT0FBUTBNLE1BQzdDaWlELEdBQWMsR0FrQmYsU0FBU0MsR0FBZTE0RCxHQUN2QixJQUFJMjRELEVBQVE5bEIsRUFBTytsQixTQUFVNTRELElBQVV5NEQsR0FBYXo0RCxHQUVwRCxPQUFLMjRELElBR0EzNEQsS0FBUXc0RCxHQUNMeDRELEVBRUR5NEQsR0FBYXo0RCxHQXhCckIsU0FBeUJBLEdBTXhCLElBSEEsSUFBSTY0RCxFQUFVNzRELEVBQU0sR0FBSW1OLGNBQWdCbk4sRUFBS3dNLE1BQU8sR0FDbkQvTSxFQUFJODRELEdBQVlsMUQsT0FFVDVELEtBRVAsSUFEQU8sRUFBT3U0RCxHQUFhOTRELEdBQU1vNUQsS0FDYkwsR0FDWixPQUFPeDRELEVBZW9CODRELENBQWdCOTRELElBQVVBLEdBSXhELElBS0MrNEQsR0FBZSw0QkFDZkMsR0FBYyxNQUNkQyxHQUFVLENBQUU1QixTQUFVLFdBQVk2QixXQUFZLFNBQVVwMEIsUUFBUyxTQUNqRXEwQixHQUFxQixDQUNwQkMsY0FBZSxJQUNmamtELFdBQVksT0FHZCxTQUFTa2tELEdBQW1CdGxCLEVBQU9yekMsRUFBTzQ0RCxHQUl6QyxJQUFJOWpCLEVBQVV3VyxHQUFRblMsS0FBTW41QyxHQUM1QixPQUFPODBDLEVBR04vMUIsS0FBSzg1QyxJQUFLLEVBQUcvakIsRUFBUyxJQUFROGpCLEdBQVksS0FBVTlqQixFQUFTLElBQU8sTUFDcEU5MEMsRUFHRixTQUFTODRELEdBQW9COWxCLEVBQU0rbEIsRUFBV0MsRUFBS0MsRUFBYUMsRUFBUUMsR0FDdkUsSUFBSXA2RCxFQUFrQixVQUFkZzZELEVBQXdCLEVBQUksRUFDbkNLLEVBQVEsRUFDUkMsRUFBUSxFQUdULEdBQUtMLEtBQVVDLEVBQWMsU0FBVyxXQUN2QyxPQUFPLEVBR1IsS0FBUWw2RCxFQUFJLEVBQUdBLEdBQUssRUFHTixXQUFSaTZELElBQ0pLLEdBQVNsbkIsRUFBT3laLElBQUs1WSxFQUFNZ21CLEVBQU16TixHQUFXeHNELElBQUssRUFBTW02RCxJQUlsREQsR0FtQlEsWUFBUkQsSUFDSkssR0FBU2xuQixFQUFPeVosSUFBSzVZLEVBQU0sVUFBWXVZLEdBQVd4c0QsSUFBSyxFQUFNbTZELElBSWpELFdBQVJGLElBQ0pLLEdBQVNsbkIsRUFBT3laLElBQUs1WSxFQUFNLFNBQVd1WSxHQUFXeHNELEdBQU0sU0FBUyxFQUFNbTZELE1BdEJ2RUcsR0FBU2xuQixFQUFPeVosSUFBSzVZLEVBQU0sVUFBWXVZLEdBQVd4c0QsSUFBSyxFQUFNbTZELEdBR2hELFlBQVJGLEVBQ0pLLEdBQVNsbkIsRUFBT3laLElBQUs1WSxFQUFNLFNBQVd1WSxHQUFXeHNELEdBQU0sU0FBUyxFQUFNbTZELEdBSXRFRSxHQUFTam5CLEVBQU95WixJQUFLNVksRUFBTSxTQUFXdVksR0FBV3hzRCxHQUFNLFNBQVMsRUFBTW02RCxJQW9DekUsT0FoQk1ELEdBQWVFLEdBQWUsSUFJbkNFLEdBQVN0NkMsS0FBSzg1QyxJQUFLLEVBQUc5NUMsS0FBS3VtQixLQUMxQjBOLEVBQU0sU0FBVytsQixFQUFXLEdBQUl0c0QsY0FBZ0Jzc0QsRUFBVWp0RCxNQUFPLElBQ2pFcXRELEVBQ0FFLEVBQ0FELEVBQ0EsTUFJTSxHQUdEQyxFQUdSLFNBQVNDLEdBQWtCdG1CLEVBQU0rbEIsRUFBV0ssR0FHM0MsSUFBSUYsRUFBU2pFLEdBQVdqaUIsR0FLdkJpbUIsSUFEbUIzbkIsRUFBUThsQixxQkFBdUJnQyxJQUVFLGVBQW5Eam5CLEVBQU95WixJQUFLNVksRUFBTSxhQUFhLEVBQU9rbUIsR0FDdkNLLEVBQW1CTixFQUVuQjczRCxFQUFNbTBELEdBQVF2aUIsRUFBTStsQixFQUFXRyxHQUMvQk0sRUFBYSxTQUFXVCxFQUFXLEdBQUl0c0QsY0FBZ0Jzc0QsRUFBVWp0RCxNQUFPLEdBSXpFLEdBQUtrcEQsR0FBVXJvRCxLQUFNdkwsR0FBUSxDQUM1QixJQUFNZzRELEVBQ0wsT0FBT2g0RCxFQUVSQSxFQUFNLE9BeUNQLFFBbENRa3dDLEVBQVE4bEIscUJBQXVCNkIsSUFNckMzbkIsRUFBUWttQix3QkFBMEJqb0QsRUFBVXlqQyxFQUFNLE9BSTNDLFNBQVI1eEMsSUFJQzQxRCxXQUFZNTFELElBQTBELFdBQWpEK3dDLEVBQU95WixJQUFLNVksRUFBTSxXQUFXLEVBQU9rbUIsS0FHMURsbUIsRUFBS3ltQixpQkFBaUI5MkQsU0FFdEJzMkQsRUFBaUUsZUFBbkQ5bUIsRUFBT3laLElBQUs1WSxFQUFNLGFBQWEsRUFBT2ttQixJQUtwREssRUFBbUJDLEtBQWN4bUIsS0FFaEM1eEMsRUFBTTR4QyxFQUFNd21CLE1BS2RwNEQsRUFBTTQxRCxXQUFZNTFELElBQVMsR0FJMUIwM0QsR0FDQzlsQixFQUNBK2xCLEVBQ0FLLElBQVdILEVBQWMsU0FBVyxXQUNwQ00sRUFDQUwsRUFHQTkzRCxHQUVFLEtBK1NMLFNBQVNzNEQsR0FBTzFtQixFQUFNM2hDLEVBQVM0NEMsRUFBTS83QixFQUFLeXJDLEdBQ3pDLE9BQU8sSUFBSUQsR0FBTS80RCxVQUFVMnhDLEtBQU1VLEVBQU0zaEMsRUFBUzQ0QyxFQUFNLzdCLEVBQUt5ckMsR0E3UzVEeG5CLEVBQU83SSxPQUFRLENBSWRzd0IsU0FBVSxDQUNUaGxELFFBQVMsQ0FDUmhWLElBQUssU0FBVW96QyxFQUFNd2lCLEdBQ3BCLEdBQUtBLEVBQVcsQ0FHZixJQUFJNWlCLEVBQU0yaUIsR0FBUXZpQixFQUFNLFdBQ3hCLE1BQWUsS0FBUkosRUFBYSxJQUFNQSxNQU85QjBaLFVBQVcsQ0FDVix5QkFBMkIsRUFDM0IsYUFBZSxFQUNmLGFBQWUsRUFDZixVQUFZLEVBQ1osWUFBYyxFQUNkLFlBQWMsRUFDZCxVQUFZLEVBQ1osWUFBYyxFQUNkLGVBQWlCLEVBQ2pCLGlCQUFtQixFQUNuQixTQUFXLEVBQ1gsWUFBYyxFQUNkLGNBQWdCLEVBQ2hCLFlBQWMsRUFDZCxTQUFXLEVBQ1gsT0FBUyxFQUNULFNBQVcsRUFDWCxRQUFVLEVBQ1YsUUFBVSxFQUNWLE1BQVEsR0FLVDRMLFNBQVUsR0FHVnBpRCxNQUFPLFNBQVVrOUIsRUFBTTF6QyxFQUFNVSxFQUFPbzVELEdBR25DLEdBQU1wbUIsR0FBMEIsSUFBbEJBLEVBQUtsZ0MsVUFBb0MsSUFBbEJrZ0MsRUFBS2xnQyxVQUFtQmtnQyxFQUFLbDlCLE1BQWxFLENBS0EsSUFBSTg4QixFQUFLdHNDLEVBQU15a0QsRUFDZDhPLEVBQVdsUSxFQUFXcnFELEdBQ3RCdzZELEVBQWV4QixHQUFZM3JELEtBQU1yTixHQUNqQ3dXLEVBQVFrOUIsRUFBS2w5QixNQWFkLEdBUk1na0QsSUFDTHg2RCxFQUFPMDRELEdBQWU2QixJQUl2QjlPLEVBQVE1WSxFQUFPeW5CLFNBQVV0NkQsSUFBVTZ5QyxFQUFPeW5CLFNBQVVDLFFBR3JDN2xCLElBQVZoMEMsRUEwQ0osT0FBSytxRCxHQUFTLFFBQVNBLFFBQ3dCL1csS0FBNUNwQixFQUFNbVksRUFBTW5yRCxJQUFLb3pDLEdBQU0sRUFBT29tQixJQUV6QnhtQixFQUlEOThCLEVBQU94VyxHQTdDQSxZQUhkZ0gsT0FBQSxJQUFjdEcsRUFBZCxjQUFjQSxNQUdjNHlDLEVBQU0wWSxHQUFRblMsS0FBTW41QyxLQUFhNHlDLEVBQUssS0FDakU1eUMsRUFBUTZyRCxHQUFXN1ksRUFBTTF6QyxFQUFNc3pDLEdBRy9CdHNDLEVBQU8sVUFJTSxNQUFUdEcsR0FBaUJBLEdBQVVBLElBT2xCLFdBQVRzRyxHQUFzQnd6RCxJQUMxQjk1RCxHQUFTNHlDLEdBQU9BLEVBQUssS0FBU1QsRUFBT21hLFVBQVd1TixHQUFhLEdBQUssT0FJN0R2b0IsRUFBUTZsQixpQkFBNkIsS0FBVm4zRCxHQUFpRCxJQUFqQ1YsRUFBS3lXLFFBQVMsZ0JBQzlERCxFQUFPeFcsR0FBUyxXQUlYeXJELEdBQVksUUFBU0EsUUFDc0IvVyxLQUE5Q2gwQyxFQUFRK3FELEVBQU1sOEMsSUFBS21rQyxFQUFNaHpDLEVBQU9vNUQsTUFFN0JVLEVBQ0poa0QsRUFBTUUsWUFBYTFXLEVBQU1VLEdBRXpCOFYsRUFBT3hXLEdBQVNVLE1Ba0JwQjRyRCxJQUFLLFNBQVU1WSxFQUFNMXpDLEVBQU04NUQsRUFBT0YsR0FDakMsSUFBSTkzRCxFQUFLcXhDLEVBQUtzWSxFQUNiOE8sRUFBV2xRLEVBQVdycUQsR0E2QnZCLE9BNUJnQmc1RCxHQUFZM3JELEtBQU1yTixLQU1qQ0EsRUFBTzA0RCxHQUFlNkIsS0FJdkI5TyxFQUFRNVksRUFBT3luQixTQUFVdDZELElBQVU2eUMsRUFBT3luQixTQUFVQyxLQUd0QyxRQUFTOU8sSUFDdEIzcEQsRUFBTTJwRCxFQUFNbnJELElBQUtvekMsR0FBTSxFQUFNb21CLFNBSWpCcGxCLElBQVI1eUMsSUFDSkEsRUFBTW0wRCxHQUFRdmlCLEVBQU0xekMsRUFBTTQ1RCxJQUlkLFdBQVI5M0QsR0FBb0I5QixLQUFRbTVELEtBQ2hDcjNELEVBQU1xM0QsR0FBb0JuNUQsSUFJWixLQUFWODVELEdBQWdCQSxHQUNwQjNtQixFQUFNdWtCLFdBQVk1MUQsSUFDRCxJQUFWZzRELEdBQWtCVyxTQUFVdG5CLEdBQVFBLEdBQU8sRUFBSXJ4QyxHQUdoREEsS0FJVCt3QyxFQUFPWSxLQUFNLENBQUUsU0FBVSxVQUFXLFNBQVVtQyxFQUFJNmpCLEdBQ2pENW1CLEVBQU95bkIsU0FBVWIsR0FBYyxDQUM5Qm41RCxJQUFLLFNBQVVvekMsRUFBTXdpQixFQUFVNEQsR0FDOUIsR0FBSzVELEVBSUosT0FBTzZDLEdBQWExckQsS0FBTXdsQyxFQUFPeVosSUFBSzVZLEVBQU0sYUFReENBLEVBQUt5bUIsaUJBQWlCOTJELFFBQVdxd0MsRUFBS2duQix3QkFBd0I3eEMsTUFJaEVteEMsR0FBa0J0bUIsRUFBTStsQixFQUFXSyxHQUhuQ2hFLEdBQU1waUIsRUFBTXVsQixJQUFTLFdBQ3BCLE9BQU9lLEdBQWtCdG1CLEVBQU0rbEIsRUFBV0ssT0FNL0N2cUQsSUFBSyxTQUFVbWtDLEVBQU1oekMsRUFBT281RCxHQUMzQixJQUFJdGtCLEVBQ0hva0IsRUFBU2pFLEdBQVdqaUIsR0FJcEJpbkIsR0FBc0Izb0IsRUFBUWltQixpQkFDVCxhQUFwQjJCLEVBQU92QyxTQUlSc0MsR0FEa0JnQixHQUFzQmIsSUFFWSxlQUFuRGpuQixFQUFPeVosSUFBSzVZLEVBQU0sYUFBYSxFQUFPa21CLEdBQ3ZDTixFQUFXUSxFQUNWTixHQUNDOWxCLEVBQ0ErbEIsRUFDQUssRUFDQUgsRUFDQUMsR0FFRCxFQXFCRixPQWpCS0QsR0FBZWdCLElBQ25CckIsR0FBWTc1QyxLQUFLdW1CLEtBQ2hCME4sRUFBTSxTQUFXK2xCLEVBQVcsR0FBSXRzRCxjQUFnQnNzRCxFQUFVanRELE1BQU8sSUFDakVrckQsV0FBWWtDLEVBQVFILElBQ3BCRCxHQUFvQjlsQixFQUFNK2xCLEVBQVcsVUFBVSxFQUFPRyxHQUN0RCxLQUtHTixJQUFjOWpCLEVBQVV3VyxHQUFRblMsS0FBTW41QyxLQUNiLFFBQTNCODBDLEVBQVMsSUFBTyxRQUVsQjlCLEVBQUtsOUIsTUFBT2lqRCxHQUFjLzRELEVBQzFCQSxFQUFRbXlDLEVBQU95WixJQUFLNVksRUFBTStsQixJQUdwQkosR0FBbUIzbEIsRUFBTWh6QyxFQUFPNDRELFFBSzFDem1CLEVBQU95bkIsU0FBU3JELFdBQWFWLEdBQWN2a0IsRUFBUWdtQixvQkFDbEQsU0FBVXRrQixFQUFNd2lCLEdBQ2YsR0FBS0EsRUFDSixPQUFTd0IsV0FBWXpCLEdBQVF2aUIsRUFBTSxnQkFDbENBLEVBQUtnbkIsd0JBQXdCcHdCLEtBQzVCd3JCLEdBQU1waUIsRUFBTSxDQUFFdWpCLFdBQVksSUFBSyxXQUM5QixPQUFPdmpCLEVBQUtnbkIsd0JBQXdCcHdCLFNBRWxDLFFBTVJ1SSxFQUFPWSxLQUFNLENBQ1ptbkIsT0FBUSxHQUNSQyxRQUFTLEdBQ1RDLE9BQVEsVUFDTixTQUFVQyxFQUFRQyxHQUNwQm5vQixFQUFPeW5CLFNBQVVTLEVBQVNDLEdBQVcsQ0FDcENDLE9BQVEsU0FBVXY2RCxHQU9qQixJQU5BLElBQUlqQixFQUFJLEVBQ1B5N0QsRUFBVyxHQUdYQyxFQUF5QixpQkFBVno2RCxFQUFxQkEsRUFBTStCLE1BQU8sS0FBUSxDQUFFL0IsR0FFcERqQixFQUFJLEVBQUdBLElBQ2R5N0QsRUFBVUgsRUFBUzlPLEdBQVd4c0QsR0FBTXU3RCxHQUNuQ0csRUFBTzE3RCxJQUFPMDdELEVBQU8xN0QsRUFBSSxJQUFPMDdELEVBQU8sR0FHekMsT0FBT0QsSUFJTyxXQUFYSCxJQUNKbG9CLEVBQU95bkIsU0FBVVMsRUFBU0MsR0FBU3pyRCxJQUFNOHBELE9BSTNDeG1CLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCc2lCLElBQUssU0FBVXRzRCxFQUFNVSxHQUNwQixPQUFPaXBELEVBQVExa0QsTUFBTSxTQUFVeXVDLEVBQU0xekMsRUFBTVUsR0FDMUMsSUFBSWs1RCxFQUFRM2xCLEVBQ1gzeEMsRUFBTSxHQUNON0MsRUFBSSxFQUVMLEdBQUtvSCxNQUFNWSxRQUFTekgsR0FBUyxDQUk1QixJQUhBNDVELEVBQVNqRSxHQUFXamlCLEdBQ3BCTyxFQUFNajBDLEVBQUtxRCxPQUVINUQsRUFBSXcwQyxFQUFLeDBDLElBQ2hCNkMsRUFBS3RDLEVBQU1QLElBQVFvekMsRUFBT3laLElBQUs1WSxFQUFNMXpDLEVBQU1QLElBQUssRUFBT202RCxHQUd4RCxPQUFPdDNELEVBR1IsWUFBaUJveUMsSUFBVmgwQyxFQUNObXlDLEVBQU9yOEIsTUFBT2s5QixFQUFNMXpDLEVBQU1VLEdBQzFCbXlDLEVBQU95WixJQUFLNVksRUFBTTF6QyxLQUNqQkEsRUFBTVUsRUFBTzBDLFVBQVVDLE9BQVMsTUFRckN3dkMsRUFBT3VuQixNQUFRQSxHQUVmQSxHQUFNLzRELFVBQVksQ0FDakJ3RSxZQUFhdTBELEdBQ2JwbkIsS0FBTSxTQUFVVSxFQUFNM2hDLEVBQVM0NEMsRUFBTS83QixFQUFLeXJDLEVBQVF0TixHQUNqRDluRCxLQUFLeXVDLEtBQU9BLEVBQ1p6dUMsS0FBSzBsRCxLQUFPQSxFQUNaMWxELEtBQUtvMUQsT0FBU0EsR0FBVXhuQixFQUFPd25CLE9BQU9sTSxTQUN0Q2xwRCxLQUFLOE0sUUFBVUEsRUFDZjlNLEtBQUt5cEIsTUFBUXpwQixLQUFLc2QsSUFBTXRkLEtBQUs4MUMsTUFDN0I5MUMsS0FBSzJwQixJQUFNQSxFQUNYM3BCLEtBQUs4bkQsS0FBT0EsSUFBVWxhLEVBQU9tYSxVQUFXckMsR0FBUyxHQUFLLE9BRXZENVAsSUFBSyxXQUNKLElBQUkwUSxFQUFRMk8sR0FBTWdCLFVBQVduMkQsS0FBSzBsRCxNQUVsQyxPQUFPYyxHQUFTQSxFQUFNbnJELElBQ3JCbXJELEVBQU1uckQsSUFBSzJFLE1BQ1htMUQsR0FBTWdCLFVBQVVqTixTQUFTN3RELElBQUsyRSxPQUVoQ28yRCxJQUFLLFNBQVVDLEdBQ2QsSUFBSUMsRUFDSDlQLEVBQVEyTyxHQUFNZ0IsVUFBV24yRCxLQUFLMGxELE1Bb0IvQixPQWxCSzFsRCxLQUFLOE0sUUFBUXlwRCxTQUNqQnYyRCxLQUFLdzJELElBQU1GLEVBQVExb0IsRUFBT3duQixPQUFRcDFELEtBQUtvMUQsUUFDdENpQixFQUFTcjJELEtBQUs4TSxRQUFReXBELFNBQVdGLEVBQVMsRUFBRyxFQUFHcjJELEtBQUs4TSxRQUFReXBELFVBRzlEdjJELEtBQUt3MkQsSUFBTUYsRUFBUUQsRUFFcEJyMkQsS0FBS3NkLEtBQVF0ZCxLQUFLMnBCLElBQU0zcEIsS0FBS3lwQixPQUFVNnNDLEVBQVF0MkQsS0FBS3lwQixNQUUvQ3pwQixLQUFLOE0sUUFBUTJwRCxNQUNqQnoyRCxLQUFLOE0sUUFBUTJwRCxLQUFLOTdELEtBQU1xRixLQUFLeXVDLEtBQU16dUMsS0FBS3NkLElBQUt0ZCxNQUd6Q3dtRCxHQUFTQSxFQUFNbDhDLElBQ25CazhDLEVBQU1sOEMsSUFBS3RLLE1BRVhtMUQsR0FBTWdCLFVBQVVqTixTQUFTNStDLElBQUt0SyxNQUV4QkEsT0FJVG0xRCxHQUFNLzRELFVBQVUyeEMsS0FBSzN4QyxVQUFZKzRELEdBQU0vNEQsVUFFdkMrNEQsR0FBTWdCLFVBQVksQ0FDakJqTixTQUFVLENBQ1Q3dEQsSUFBSyxTQUFVbXNELEdBQ2QsSUFBSXZPLEVBSUosT0FBNkIsSUFBeEJ1TyxFQUFNL1ksS0FBS2xnQyxVQUNhLE1BQTVCaTVDLEVBQU0vWSxLQUFNK1ksRUFBTTlCLE9BQW9ELE1BQWxDOEIsRUFBTS9ZLEtBQUtsOUIsTUFBT2kyQyxFQUFNOUIsTUFDckQ4QixFQUFNL1ksS0FBTStZLEVBQU05QixPQU8xQnpNLEVBQVNyTCxFQUFPeVosSUFBS0csRUFBTS9ZLEtBQU0rWSxFQUFNOUIsS0FBTSxNQUdoQixTQUFYek0sRUFBd0JBLEVBQUosR0FFdkMzdUMsSUFBSyxTQUFVazlDLEdBS1Q1WixFQUFPOG9CLEdBQUdELEtBQU1qUCxFQUFNOUIsTUFDMUI5WCxFQUFPOG9CLEdBQUdELEtBQU1qUCxFQUFNOUIsTUFBUThCLEdBQ0ssSUFBeEJBLEVBQU0vWSxLQUFLbGdDLFdBQ3JCcS9CLEVBQU95bkIsU0FBVTdOLEVBQU05QixPQUM0QixNQUFuRDhCLEVBQU0vWSxLQUFLbDlCLE1BQU9raUQsR0FBZWpNLEVBQU05QixPQUd4QzhCLEVBQU0vWSxLQUFNK1ksRUFBTTlCLE1BQVM4QixFQUFNbHFDLElBRmpDc3dCLEVBQU9yOEIsTUFBT2kyQyxFQUFNL1ksS0FBTStZLEVBQU05QixLQUFNOEIsRUFBTWxxQyxJQUFNa3FDLEVBQU1NLFNBVTVEcU4sR0FBTWdCLFVBQVUzd0IsVUFBWTJ2QixHQUFNZ0IsVUFBVTd3QixXQUFhLENBQ3hEaDdCLElBQUssU0FBVWs5QyxHQUNUQSxFQUFNL1ksS0FBS2xnQyxVQUFZaTVDLEVBQU0vWSxLQUFLdjdCLGFBQ3RDczBDLEVBQU0vWSxLQUFNK1ksRUFBTTlCLE1BQVM4QixFQUFNbHFDLE9BS3BDc3dCLEVBQU93bkIsT0FBUyxDQUNmdUIsT0FBUSxTQUFVcjZELEdBQ2pCLE9BQU9BLEdBRVJzNkQsTUFBTyxTQUFVdDZELEdBQ2hCLE1BQU8sR0FBTWtlLEtBQUtxOEMsSUFBS3Y2RCxFQUFJa2UsS0FBS3M4QyxJQUFPLEdBRXhDNU4sU0FBVSxVQUdYdGIsRUFBTzhvQixHQUFLdkIsR0FBTS80RCxVQUFVMnhDLE1BR2xCMG9CLEtBQU8sR0FLakIsSUFDQ00sR0FBT0MsR0FDUEMsR0FBVyx5QkFDWEMsR0FBTyxjQUVSLFNBQVNDLEtBQ0hILE1BQ3FCLElBQXBCeDRELEVBQVM0NEQsUUFBb0Jyd0QsRUFBTzZpQyxzQkFDeEM3aUMsRUFBTzZpQyxzQkFBdUJ1dEIsSUFFOUJwd0QsRUFBT3dsQixXQUFZNHFDLEdBQVV2cEIsRUFBTzhvQixHQUFHVyxVQUd4Q3pwQixFQUFPOG9CLEdBQUdZLFFBS1osU0FBU0MsS0FJUixPQUhBeHdELEVBQU93bEIsWUFBWSxXQUNsQndxQyxRQUFRdG5CLEtBRUFzbkIsR0FBUTE1QyxLQUFLQyxNQUl2QixTQUFTazZDLEdBQU96MUQsRUFBTTAxRCxHQUNyQixJQUFJL3pDLEVBQ0hscEIsRUFBSSxFQUNKazdDLEVBQVEsQ0FBRTd4QixPQUFROWhCLEdBS25CLElBREEwMUQsRUFBZUEsRUFBZSxFQUFJLEVBQzFCajlELEVBQUksRUFBR0EsR0FBSyxFQUFJaTlELEVBRXZCL2hCLEVBQU8sVUFEUGh5QixFQUFRc2pDLEdBQVd4c0QsS0FDU2s3QyxFQUFPLFVBQVloeUIsR0FBVTNoQixFQU8xRCxPQUpLMDFELElBQ0ovaEIsRUFBTXJsQyxRQUFVcWxDLEVBQU05eEIsTUFBUTdoQixHQUd4QjJ6QyxFQUdSLFNBQVNnaUIsR0FBYWo4RCxFQUFPaXFELEVBQU01c0MsR0FLbEMsSUFKQSxJQUFJMHVDLEVBQ0h3SCxHQUFlMkksR0FBVUMsU0FBVWxTLElBQVUsSUFBS243QixPQUFRb3RDLEdBQVVDLFNBQVUsTUFDOUVuakMsRUFBUSxFQUNScjJCLEVBQVM0d0QsRUFBVzV3RCxPQUNicTJCLEVBQVFyMkIsRUFBUXEyQixJQUN2QixHQUFPK3lCLEVBQVF3SCxFQUFZdjZCLEdBQVE5NUIsS0FBTW1lLEVBQVc0c0MsRUFBTWpxRCxHQUd6RCxPQUFPK3JELEVBc05WLFNBQVNtUSxHQUFXbHBCLEVBQU1vcEIsRUFBWS9xRCxHQUNyQyxJQUFJbXNDLEVBQ0g2ZSxFQUNBcmpDLEVBQVEsRUFDUnIyQixFQUFTdTVELEdBQVVJLFdBQVczNUQsT0FDOUI4akQsRUFBV3RVLEVBQU9rVSxXQUFXRyxRQUFRLGtCQUc3QnFWLEVBQUs3b0IsUUFFYjZvQixFQUFPLFdBQ04sR0FBS1EsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjakIsSUFBU1EsS0FDMUI1VCxFQUFZbnBDLEtBQUs4NUMsSUFBSyxFQUFHeDdDLEVBQVVzeEIsVUFBWXR4QixFQUFVeTlDLFNBQVd5QixHQUtwRTNCLEVBQVUsR0FESDFTLEVBQVk3cUMsRUFBVXk5QyxVQUFZLEdBRXpDOWhDLEVBQVEsRUFDUnIyQixFQUFTMGEsRUFBVW0vQyxPQUFPNzVELE9BRW5CcTJCLEVBQVFyMkIsRUFBUXEyQixJQUN2QjNiLEVBQVVtL0MsT0FBUXhqQyxHQUFRMmhDLElBQUtDLEdBTWhDLE9BSEFuVSxFQUFTZ0IsV0FBWXpVLEVBQU0sQ0FBRTMxQixFQUFXdTlDLEVBQVMxUyxJQUc1QzBTLEVBQVUsR0FBS2o0RCxFQUNadWxELEdBSUZ2bEQsR0FDTDhqRCxFQUFTZ0IsV0FBWXpVLEVBQU0sQ0FBRTMxQixFQUFXLEVBQUcsSUFJNUNvcEMsRUFBU2lCLFlBQWExVSxFQUFNLENBQUUzMUIsS0FDdkIsSUFFUkEsRUFBWW9wQyxFQUFTdkIsUUFBUyxDQUM3QmxTLEtBQU1BLEVBQ054dUMsTUFBTzJ0QyxFQUFPN0ksT0FBUSxHQUFJOHlCLEdBQzFCSyxLQUFNdHFCLEVBQU83SSxRQUFRLEVBQU0sQ0FDMUJvekIsY0FBZSxHQUNmL0MsT0FBUXhuQixFQUFPd25CLE9BQU9sTSxVQUNwQnA4QyxHQUNIc3JELG1CQUFvQlAsRUFDcEJRLGdCQUFpQnZyRCxFQUNqQnM5QixVQUFXMnNCLElBQVNRLEtBQ3BCaEIsU0FBVXpwRCxFQUFReXBELFNBQ2xCMEIsT0FBUSxHQUNSUCxZQUFhLFNBQVVoUyxFQUFNLzdCLEdBQzVCLElBQUk2OUIsRUFBUTVaLEVBQU91bkIsTUFBTzFtQixFQUFNMzFCLEVBQVVvL0MsS0FBTXhTLEVBQU0vN0IsRUFDcEQ3USxFQUFVby9DLEtBQUtDLGNBQWV6UyxJQUFVNXNDLEVBQVVvL0MsS0FBSzlDLFFBRXpELE9BREF0OEMsRUFBVW0vQyxPQUFPdjFELEtBQU04a0QsR0FDaEJBLEdBRVJkLEtBQU0sU0FBVTRSLEdBQ2YsSUFBSTdqQyxFQUFRLEVBSVhyMkIsRUFBU2s2RCxFQUFVeC9DLEVBQVVtL0MsT0FBTzc1RCxPQUFTLEVBQzlDLEdBQUswNUQsRUFDSixPQUFPOTNELEtBR1IsSUFEQTgzRCxHQUFVLEVBQ0ZyakMsRUFBUXIyQixFQUFRcTJCLElBQ3ZCM2IsRUFBVW0vQyxPQUFReGpDLEdBQVEyaEMsSUFBSyxHQVVoQyxPQU5La0MsR0FDSnBXLEVBQVNnQixXQUFZelUsRUFBTSxDQUFFMzFCLEVBQVcsRUFBRyxJQUMzQ29wQyxFQUFTaUIsWUFBYTFVLEVBQU0sQ0FBRTMxQixFQUFXdy9DLEtBRXpDcFcsRUFBU29CLFdBQVk3VSxFQUFNLENBQUUzMUIsRUFBV3cvQyxJQUVsQ3Q0RCxRQUdUQyxFQUFRNlksRUFBVTdZLE1BSW5CLElBL0hELFNBQXFCQSxFQUFPazRELEdBQzNCLElBQUkxakMsRUFBTzE1QixFQUFNcTZELEVBQVEzNUQsRUFBTytxRCxFQUdoQyxJQUFNL3hCLEtBQVN4MEIsRUFlZCxHQWJBbTFELEVBQVMrQyxFQURUcDlELEVBQU9xcUQsRUFBVzN3QixJQUVsQmg1QixFQUFRd0UsRUFBT3cwQixHQUNWN3lCLE1BQU1ZLFFBQVMvRyxLQUNuQjI1RCxFQUFTMzVELEVBQU8sR0FDaEJBLEVBQVF3RSxFQUFPdzBCLEdBQVVoNUIsRUFBTyxJQUc1Qmc1QixJQUFVMTVCLElBQ2RrRixFQUFPbEYsR0FBU1UsU0FDVHdFLEVBQU93MEIsS0FHZit4QixFQUFRNVksRUFBT3luQixTQUFVdDZELEtBQ1gsV0FBWXlyRCxFQU16QixJQUFNL3hCLEtBTE5oNUIsRUFBUStxRCxFQUFNd1AsT0FBUXY2RCxVQUNmd0UsRUFBT2xGLEdBSUNVLEVBQ05nNUIsS0FBU3gwQixJQUNoQkEsRUFBT3cwQixHQUFVaDVCLEVBQU9nNUIsR0FDeEIwakMsRUFBZTFqQyxHQUFVMmdDLFFBSTNCK0MsRUFBZXA5RCxHQUFTcTZELEVBNkYxQm1ELENBQVl0NEQsRUFBTzZZLEVBQVVvL0MsS0FBS0MsZUFFMUIxakMsRUFBUXIyQixFQUFRcTJCLElBRXZCLEdBREF3a0IsRUFBUzBlLEdBQVVJLFdBQVl0akMsR0FBUTk1QixLQUFNbWUsRUFBVzIxQixFQUFNeHVDLEVBQU82WSxFQUFVby9DLE1BTTlFLE9BSktsckIsRUFBWWlNLEVBQU95TixRQUN2QjlZLEVBQU82WSxZQUFhM3RDLEVBQVUyMUIsS0FBTTMxQixFQUFVby9DLEtBQUtyZ0MsT0FBUTZ1QixLQUMxRHpOLEVBQU95TixLQUFLMXFELEtBQU1pOUMsSUFFYkEsRUF5QlQsT0FyQkFyTCxFQUFPdndDLElBQUs0QyxFQUFPeTNELEdBQWE1K0MsR0FFM0JrMEIsRUFBWWwwQixFQUFVby9DLEtBQUt6dUMsUUFDL0IzUSxFQUFVby9DLEtBQUt6dUMsTUFBTTl1QixLQUFNOHpDLEVBQU0zMUIsR0FJbENBLEVBQ0UwcEMsU0FBVTFwQyxFQUFVby9DLEtBQUsxVixVQUN6QjMvQyxLQUFNaVcsRUFBVW8vQyxLQUFLcjFELEtBQU1pVyxFQUFVby9DLEtBQUtNLFVBQzFDNVgsS0FBTTluQyxFQUFVby9DLEtBQUt0WCxNQUNyQnFCLE9BQVFucEMsRUFBVW8vQyxLQUFLalcsUUFFekJyVSxFQUFPOG9CLEdBQUcrQixNQUNUN3FCLEVBQU83SSxPQUFRdXlCLEVBQU0sQ0FDcEI3b0IsS0FBTUEsRUFDTmlxQixLQUFNNS9DLEVBQ04rZSxNQUFPL2UsRUFBVW8vQyxLQUFLcmdDLFNBSWpCL2UsRUFHUjgwQixFQUFPK3BCLFVBQVkvcEIsRUFBTzdJLE9BQVE0eUIsR0FBVyxDQUU1Q0MsU0FBVSxDQUNULElBQUssQ0FBRSxTQUFVbFMsRUFBTWpxRCxHQUN0QixJQUFJK3JELEVBQVF4bkQsS0FBSzAzRCxZQUFhaFMsRUFBTWpxRCxHQUVwQyxPQURBNnJELEdBQVdFLEVBQU0vWSxLQUFNaVgsRUFBTXFCLEdBQVFuUyxLQUFNbjVDLEdBQVMrckQsR0FDN0NBLEtBSVRtUixRQUFTLFNBQVUxNEQsRUFBT3F5QixHQUNwQjBhLEVBQVkvc0MsSUFDaEJxeUIsRUFBV3J5QixFQUNYQSxFQUFRLENBQUUsTUFFVkEsRUFBUUEsRUFBTWlLLE1BQU9nMkMsR0FPdEIsSUFKQSxJQUFJd0YsRUFDSGp4QixFQUFRLEVBQ1JyMkIsRUFBUzZCLEVBQU03QixPQUVScTJCLEVBQVFyMkIsRUFBUXEyQixJQUN2Qml4QixFQUFPemxELEVBQU93MEIsR0FDZGtqQyxHQUFVQyxTQUFVbFMsR0FBU2lTLEdBQVVDLFNBQVVsUyxJQUFVLEdBQzNEaVMsR0FBVUMsU0FBVWxTLEdBQU81NUIsUUFBU3dHLElBSXRDeWxDLFdBQVksQ0EzV2IsU0FBMkJ0cEIsRUFBTXh1QyxFQUFPaTRELEdBQ3ZDLElBQUl4UyxFQUFNanFELEVBQU80c0QsRUFBUTdCLEVBQU9vUyxFQUFTQyxFQUFXQyxFQUFnQmo1QixFQUNuRWs1QixFQUFRLFVBQVc5NEQsR0FBUyxXQUFZQSxFQUN4Q3k0RCxFQUFPMTRELEtBQ1BrdUQsRUFBTyxHQUNQMzhDLEVBQVFrOUIsRUFBS2w5QixNQUNiNmxELEVBQVMzb0IsRUFBS2xnQyxVQUFZNjRDLEdBQW9CM1ksR0FDOUN1cUIsRUFBV3BULEVBQVN2cUQsSUFBS296QyxFQUFNLFVBNkJoQyxJQUFNaVgsS0ExQkF3UyxFQUFLcmdDLFFBRWEsT0FEdkIydUIsRUFBUTVZLEVBQU82WSxZQUFhaFksRUFBTSxPQUN2QndxQixXQUNWelMsRUFBTXlTLFNBQVcsRUFDakJMLEVBQVVwUyxFQUFNOUUsTUFBTUosS0FDdEJrRixFQUFNOUUsTUFBTUosS0FBTyxXQUNaa0YsRUFBTXlTLFVBQ1hMLE1BSUhwUyxFQUFNeVMsV0FFTlAsRUFBS3pXLFFBQVEsV0FHWnlXLEVBQUt6VyxRQUFRLFdBQ1p1RSxFQUFNeVMsV0FDQXJyQixFQUFPL1YsTUFBTzRXLEVBQU0sTUFBT3J3QyxRQUNoQ29vRCxFQUFNOUUsTUFBTUosY0FPRnJoRCxFQUViLEdBREF4RSxFQUFRd0UsRUFBT3lsRCxHQUNWdVIsR0FBUzd1RCxLQUFNM00sR0FBVSxDQUc3QixVQUZPd0UsRUFBT3lsRCxHQUNkMkMsRUFBU0EsR0FBb0IsV0FBVjVzRCxFQUNkQSxLQUFZMjdELEVBQVMsT0FBUyxRQUFXLENBSTdDLEdBQWUsU0FBVjM3RCxJQUFvQnU5RCxRQUFpQ3ZwQixJQUFyQnVwQixFQUFVdFQsR0FLOUMsU0FKQTBSLEdBQVMsRUFPWGxKLEVBQU14SSxHQUFTc1QsR0FBWUEsRUFBVXRULElBQVU5WCxFQUFPcjhCLE1BQU9rOUIsRUFBTWlYLEdBTXJFLElBREFtVCxHQUFhanJCLEVBQU9vQyxjQUFlL3ZDLE1BQ2hCMnRDLEVBQU9vQyxjQUFla2UsR0E4RHpDLElBQU14SSxLQXpERHFULEdBQTJCLElBQWxCdHFCLEVBQUtsZ0MsV0FNbEIycEQsRUFBS2dCLFNBQVcsQ0FBRTNuRCxFQUFNMm5ELFNBQVUzbkQsRUFBTTRuRCxVQUFXNW5ELEVBQU02bkQsV0FJbEMsT0FEdkJOLEVBQWlCRSxHQUFZQSxFQUFTbjVCLFdBRXJDaTVCLEVBQWlCbFQsRUFBU3ZxRCxJQUFLb3pDLEVBQU0sWUFHckIsVUFEakI1TyxFQUFVK04sRUFBT3laLElBQUs1WSxFQUFNLGNBRXRCcXFCLEVBQ0pqNUIsRUFBVWk1QixHQUlWM1EsR0FBVSxDQUFFMVosSUFBUSxHQUNwQnFxQixFQUFpQnJxQixFQUFLbDlCLE1BQU1zdUIsU0FBV2k1QixFQUN2Q2o1QixFQUFVK04sRUFBT3laLElBQUs1WSxFQUFNLFdBQzVCMFosR0FBVSxDQUFFMVosT0FLRyxXQUFaNU8sR0FBb0MsaUJBQVpBLEdBQWdELE1BQWxCaTVCLElBQ3JCLFNBQWhDbHJCLEVBQU95WixJQUFLNVksRUFBTSxXQUdoQm9xQixJQUNMSCxFQUFLNzFELE1BQU0sV0FDVjBPLEVBQU1zdUIsUUFBVWk1QixLQUVNLE1BQWxCQSxJQUNKajVCLEVBQVV0dUIsRUFBTXN1QixRQUNoQmk1QixFQUE2QixTQUFaajVCLEVBQXFCLEdBQUtBLElBRzdDdHVCLEVBQU1zdUIsUUFBVSxpQkFLZHE0QixFQUFLZ0IsV0FDVDNuRCxFQUFNMm5ELFNBQVcsU0FDakJSLEVBQUt6VyxRQUFRLFdBQ1oxd0MsRUFBTTJuRCxTQUFXaEIsRUFBS2dCLFNBQVUsR0FDaEMzbkQsRUFBTTRuRCxVQUFZakIsRUFBS2dCLFNBQVUsR0FDakMzbkQsRUFBTTZuRCxVQUFZbEIsRUFBS2dCLFNBQVUsT0FLbkNMLEdBQVksRUFDRTNLLEVBR1AySyxJQUNBRyxFQUNDLFdBQVlBLElBQ2hCNUIsRUFBUzRCLEVBQVM1QixRQUduQjRCLEVBQVdwVCxFQUFTbEIsT0FBUWpXLEVBQU0sU0FBVSxDQUFFNU8sUUFBU2k1QixJQUluRHpRLElBQ0oyUSxFQUFTNUIsUUFBVUEsR0FJZkEsR0FDSmpQLEdBQVUsQ0FBRTFaLElBQVEsR0FLckJpcUIsRUFBSzcxRCxNQUFNLFdBU1YsSUFBTTZpRCxLQUpBMFIsR0FDTGpQLEdBQVUsQ0FBRTFaLElBRWJtWCxFQUFTbkUsT0FBUWhULEVBQU0sVUFDVHlmLEVBQ2J0Z0IsRUFBT3I4QixNQUFPazlCLEVBQU1pWCxFQUFNd0ksRUFBTXhJLFFBTW5DbVQsRUFBWW5CLEdBQWFOLEVBQVM0QixFQUFVdFQsR0FBUyxFQUFHQSxFQUFNZ1QsR0FDdERoVCxLQUFRc1QsSUFDZkEsRUFBVXRULEdBQVNtVCxFQUFVcHZDLE1BQ3hCMnRDLElBQ0p5QixFQUFVbHZDLElBQU1rdkMsRUFBVXB2QyxNQUMxQm92QyxFQUFVcHZDLE1BQVEsTUF1TXJCNHZDLFVBQVcsU0FBVS9tQyxFQUFVdzlCLEdBQ3pCQSxFQUNKNkgsR0FBVUksV0FBV2pzQyxRQUFTd0csR0FFOUJxbEMsR0FBVUksV0FBV3IxRCxLQUFNNHZCLE1BSzlCc2IsRUFBTzByQixNQUFRLFNBQVVBLEVBQU9sRSxFQUFRdG5CLEdBQ3ZDLElBQUl5ckIsRUFBTUQsR0FBMEIsaUJBQWpCLElBQU9BLEVBQVAsY0FBT0EsSUFBcUIxckIsRUFBTzdJLE9BQVEsR0FBSXUwQixHQUFVLENBQzNFZCxTQUFVMXFCLElBQU9BLEdBQU1zbkIsR0FDdEJwb0IsRUFBWXNzQixJQUFXQSxFQUN4Qi9DLFNBQVUrQyxFQUNWbEUsT0FBUXRuQixHQUFNc25CLEdBQVVBLElBQVdwb0IsRUFBWW9vQixJQUFZQSxHQW9DNUQsT0FoQ0t4bkIsRUFBTzhvQixHQUFHM0wsSUFDZHdPLEVBQUloRCxTQUFXLEVBR2MsaUJBQWpCZ0QsRUFBSWhELFdBQ1ZnRCxFQUFJaEQsWUFBWTNvQixFQUFPOG9CLEdBQUc4QyxPQUM5QkQsRUFBSWhELFNBQVczb0IsRUFBTzhvQixHQUFHOEMsT0FBUUQsRUFBSWhELFVBR3JDZ0QsRUFBSWhELFNBQVczb0IsRUFBTzhvQixHQUFHOEMsT0FBT3RRLFVBTWpCLE1BQWJxUSxFQUFJMWhDLFFBQStCLElBQWQwaEMsRUFBSTFoQyxRQUM3QjBoQyxFQUFJMWhDLE1BQVEsTUFJYjBoQyxFQUFJekksSUFBTXlJLEVBQUlmLFNBRWRlLEVBQUlmLFNBQVcsV0FDVHhyQixFQUFZdXNCLEVBQUl6SSxNQUNwQnlJLEVBQUl6SSxJQUFJbjJELEtBQU1xRixNQUdWdTVELEVBQUkxaEMsT0FDUitWLEVBQU8wWSxRQUFTdG1ELEtBQU11NUQsRUFBSTFoQyxRQUlyQjBoQyxHQUdSM3JCLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCMDBCLE9BQVEsU0FBVUgsRUFBT3A3RCxFQUFJazNELEVBQVE5aUMsR0FHcEMsT0FBT3R5QixLQUFLNjJDLE9BQVF1USxJQUFxQkMsSUFBSyxVQUFXLEdBQUloYyxPQUczRDFoQixNQUFNK3ZDLFFBQVMsQ0FBRXJwRCxRQUFTblMsR0FBTW83RCxFQUFPbEUsRUFBUTlpQyxJQUVsRG9uQyxRQUFTLFNBQVVoVSxFQUFNNFQsRUFBT2xFLEVBQVE5aUMsR0FDdkMsSUFBSW92QixFQUFROVQsRUFBT29DLGNBQWUwVixHQUNqQ2lVLEVBQVMvckIsRUFBTzByQixNQUFPQSxFQUFPbEUsRUFBUTlpQyxHQUN0Q3NuQyxFQUFjLFdBR2IsSUFBSWxCLEVBQU9mLEdBQVczM0QsS0FBTTR0QyxFQUFPN0ksT0FBUSxHQUFJMmdCLEdBQVFpVSxJQUdsRGpZLEdBQVNrRSxFQUFTdnFELElBQUsyRSxLQUFNLFlBQ2pDMDRELEVBQUtoUyxNQUFNLElBS2QsT0FGQ2tULEVBQVlDLE9BQVNELEVBRWZsWSxJQUEwQixJQUFqQmlZLEVBQU85aEMsTUFDdEI3M0IsS0FBS3d1QyxLQUFNb3JCLEdBQ1g1NUQsS0FBSzYzQixNQUFPOGhDLEVBQU85aEMsTUFBTytoQyxJQUU1QmxULEtBQU0sU0FBVTNrRCxFQUFNNmtELEVBQVkwUixHQUNqQyxJQUFJd0IsRUFBWSxTQUFVdFQsR0FDekIsSUFBSUUsRUFBT0YsRUFBTUUsWUFDVkYsRUFBTUUsS0FDYkEsRUFBTTRSLElBWVAsTUFUcUIsaUJBQVR2MkQsSUFDWHUyRCxFQUFVMVIsRUFDVkEsRUFBYTdrRCxFQUNiQSxPQUFPMHRDLEdBRUhtWCxHQUNKNW1ELEtBQUs2M0IsTUFBTzkxQixHQUFRLEtBQU0sSUFHcEIvQixLQUFLd3VDLE1BQU0sV0FDakIsSUFBSThYLEdBQVUsRUFDYjd4QixFQUFnQixNQUFSMXlCLEdBQWdCQSxFQUFPLGFBQy9CZzRELEVBQVNuc0IsRUFBT21zQixPQUNoQm42QyxFQUFPZ21DLEVBQVN2cUQsSUFBSzJFLE1BRXRCLEdBQUt5MEIsRUFDQzdVLEVBQU02VSxJQUFXN1UsRUFBTTZVLEdBQVFpeUIsTUFDbkNvVCxFQUFXbDZDLEVBQU02VSxTQUdsQixJQUFNQSxLQUFTN1UsRUFDVEEsRUFBTTZVLElBQVc3VSxFQUFNNlUsR0FBUWl5QixNQUFRd1EsR0FBSzl1RCxLQUFNcXNCLElBQ3REcWxDLEVBQVdsNkMsRUFBTTZVLElBS3BCLElBQU1BLEVBQVFzbEMsRUFBTzM3RCxPQUFRcTJCLEtBQ3ZCc2xDLEVBQVF0bEMsR0FBUWdhLE9BQVN6dUMsTUFDbkIsTUFBUitCLEdBQWdCZzRELEVBQVF0bEMsR0FBUW9ELFFBQVU5MUIsSUFFNUNnNEQsRUFBUXRsQyxHQUFRaWtDLEtBQUtoUyxLQUFNNFIsR0FDM0JoUyxHQUFVLEVBQ1Z5VCxFQUFPNXFCLE9BQVExYSxFQUFPLEtBT25CNnhCLEdBQVlnUyxHQUNoQjFxQixFQUFPMFksUUFBU3RtRCxLQUFNK0IsT0FJekI4M0QsT0FBUSxTQUFVOTNELEdBSWpCLE9BSGMsSUFBVEEsSUFDSkEsRUFBT0EsR0FBUSxNQUVUL0IsS0FBS3d1QyxNQUFNLFdBQ2pCLElBQUkvWixFQUNIN1UsRUFBT2dtQyxFQUFTdnFELElBQUsyRSxNQUNyQjYzQixFQUFRalksRUFBTTdkLEVBQU8sU0FDckJ5a0QsRUFBUTVtQyxFQUFNN2QsRUFBTyxjQUNyQmc0RCxFQUFTbnNCLEVBQU9tc0IsT0FDaEIzN0QsRUFBU3k1QixFQUFRQSxFQUFNejVCLE9BQVMsRUFhakMsSUFWQXdoQixFQUFLaTZDLFFBQVMsRUFHZGpzQixFQUFPL1YsTUFBTzczQixLQUFNK0IsRUFBTSxJQUVyQnlrRCxHQUFTQSxFQUFNRSxNQUNuQkYsRUFBTUUsS0FBSy9yRCxLQUFNcUYsTUFBTSxHQUlsQnkwQixFQUFRc2xDLEVBQU8zN0QsT0FBUXEyQixLQUN2QnNsQyxFQUFRdGxDLEdBQVFnYSxPQUFTenVDLE1BQVErNUQsRUFBUXRsQyxHQUFRb0QsUUFBVTkxQixJQUMvRGc0RCxFQUFRdGxDLEdBQVFpa0MsS0FBS2hTLE1BQU0sR0FDM0JxVCxFQUFPNXFCLE9BQVExYSxFQUFPLElBS3hCLElBQU1BLEVBQVEsRUFBR0EsRUFBUXIyQixFQUFRcTJCLElBQzNCb0QsRUFBT3BELElBQVdvRCxFQUFPcEQsR0FBUW9sQyxRQUNyQ2hpQyxFQUFPcEQsR0FBUW9sQyxPQUFPbC9ELEtBQU1xRixhQUt2QjRmLEVBQUtpNkMsYUFLZmpzQixFQUFPWSxLQUFNLENBQUUsU0FBVSxPQUFRLFNBQVUsU0FBVW1DLEVBQUk1MUMsR0FDeEQsSUFBSWkvRCxFQUFRcHNCLEVBQU9FLEdBQUkveUMsR0FDdkI2eUMsRUFBT0UsR0FBSS95QyxHQUFTLFNBQVV1K0QsRUFBT2xFLEVBQVE5aUMsR0FDNUMsT0FBZ0IsTUFBVGduQyxHQUFrQyxrQkFBVkEsRUFDOUJVLEVBQU1uMkQsTUFBTzdELEtBQU03QixXQUNuQjZCLEtBQUswNUQsUUFBU2xDLEdBQU96OEQsR0FBTSxHQUFRdStELEVBQU9sRSxFQUFROWlDLE9BS3JEc2IsRUFBT1ksS0FBTSxDQUNaeXJCLFVBQVd6QyxHQUFPLFFBQ2xCMEMsUUFBUzFDLEdBQU8sUUFDaEIyQyxZQUFhM0MsR0FBTyxVQUNwQjRDLE9BQVEsQ0FBRS9wRCxRQUFTLFFBQ25CZ3FELFFBQVMsQ0FBRWhxRCxRQUFTLFFBQ3BCaXFELFdBQVksQ0FBRWpxRCxRQUFTLFlBQ3JCLFNBQVV0VixFQUFNa0YsR0FDbEIydEMsRUFBT0UsR0FBSS95QyxHQUFTLFNBQVV1K0QsRUFBT2xFLEVBQVE5aUMsR0FDNUMsT0FBT3R5QixLQUFLMDVELFFBQVN6NUQsRUFBT3E1RCxFQUFPbEUsRUFBUTlpQyxPQUk3Q3NiLEVBQU9tc0IsT0FBUyxHQUNoQm5zQixFQUFPOG9CLEdBQUdZLEtBQU8sV0FDaEIsSUFBSW1CLEVBQ0hqK0QsRUFBSSxFQUNKdS9ELEVBQVNuc0IsRUFBT21zQixPQUlqQixJQUZBaEQsR0FBUTE1QyxLQUFLQyxNQUVMOWlCLEVBQUl1L0QsRUFBTzM3RCxPQUFRNUQsS0FDMUJpK0QsRUFBUXNCLEVBQVF2L0QsT0FHQ3UvRCxFQUFRdi9ELEtBQVFpK0QsR0FDaENzQixFQUFPNXFCLE9BQVEzMEMsSUFBSyxHQUloQnUvRCxFQUFPMzdELFFBQ1p3dkMsRUFBTzhvQixHQUFHaFEsT0FFWHFRLFFBQVF0bkIsR0FHVDdCLEVBQU84b0IsR0FBRytCLE1BQVEsU0FBVUEsR0FDM0I3cUIsRUFBT21zQixPQUFPcjNELEtBQU0rMUQsR0FDcEI3cUIsRUFBTzhvQixHQUFHanRDLFNBR1hta0IsRUFBTzhvQixHQUFHVyxTQUFXLEdBQ3JCenBCLEVBQU84b0IsR0FBR2p0QyxNQUFRLFdBQ1p1dEMsS0FJTEEsSUFBYSxFQUNiRyxPQUdEdnBCLEVBQU84b0IsR0FBR2hRLEtBQU8sV0FDaEJzUSxHQUFhLE1BR2RwcEIsRUFBTzhvQixHQUFHOEMsT0FBUyxDQUNsQmUsS0FBTSxJQUNOQyxLQUFNLElBR050UixTQUFVLEtBTVh0YixFQUFPRSxHQUFHbEQsTUFBUSxTQUFVbmtCLEVBQU0xa0IsR0FJakMsT0FIQTBrQixFQUFPbW5CLEVBQU84b0IsSUFBSzlvQixFQUFPOG9CLEdBQUc4QyxPQUFRL3lDLElBQWlCQSxFQUN0RDFrQixFQUFPQSxHQUFRLEtBRVIvQixLQUFLNjNCLE1BQU85MUIsR0FBTSxTQUFVYSxFQUFNNGpELEdBQ3hDLElBQUlpVSxFQUFVMXpELEVBQU93bEIsV0FBWTNwQixFQUFNNmpCLEdBQ3ZDKy9CLEVBQU1FLEtBQU8sV0FDWjMvQyxFQUFPMGxCLGFBQWNndUMsUUFNeEIsV0FDQyxJQUFJcG9ELEVBQVE3VCxFQUFTcUcsY0FBZSxTQUVuQzAwRCxFQURTLzZELEVBQVNxRyxjQUFlLFVBQ3BCdUosWUFBYTVQLEVBQVNxRyxjQUFlLFdBRW5Ed04sRUFBTXRRLEtBQU8sV0FJYmdyQyxFQUFRMnRCLFFBQTBCLEtBQWhCcm9ELEVBQU01VyxNQUl4QnN4QyxFQUFRNHRCLFlBQWNwQixFQUFJeHNELFVBSTFCc0YsRUFBUTdULEVBQVNxRyxjQUFlLFVBQzFCcEosTUFBUSxJQUNkNFcsRUFBTXRRLEtBQU8sUUFDYmdyQyxFQUFRNnRCLFdBQTZCLE1BQWhCdm9ELEVBQU01VyxNQXBCNUIsR0F3QkEsSUFBSW8vRCxHQUNIamxCLEdBQWFoSSxFQUFPa0ssS0FBS2xDLFdBRTFCaEksRUFBT0UsR0FBRy9JLE9BQVEsQ0FDakJpVCxLQUFNLFNBQVVqOUMsRUFBTVUsR0FDckIsT0FBT2lwRCxFQUFRMWtELEtBQU00dEMsRUFBT29LLEtBQU1qOUMsRUFBTVUsRUFBTzBDLFVBQVVDLE9BQVMsSUFHbkUwOEQsV0FBWSxTQUFVLy9ELEdBQ3JCLE9BQU9pRixLQUFLd3VDLE1BQU0sV0FDakJaLEVBQU9rdEIsV0FBWTk2RCxLQUFNakYsU0FLNUI2eUMsRUFBTzdJLE9BQVEsQ0FDZGlULEtBQU0sU0FBVXZKLEVBQU0xekMsRUFBTVUsR0FDM0IsSUFBSTR5QyxFQUFLbVksRUFDUnVVLEVBQVF0c0IsRUFBS2xnQyxTQUdkLEdBQWUsSUFBVndzRCxHQUF5QixJQUFWQSxHQUF5QixJQUFWQSxFQUtuQyxZQUFrQyxJQUF0QnRzQixFQUFLaEIsYUFDVEcsRUFBTzhYLEtBQU1qWCxFQUFNMXpDLEVBQU1VLElBS2xCLElBQVZzL0QsR0FBZ0JudEIsRUFBT3NRLFNBQVV6UCxLQUNyQytYLEVBQVE1WSxFQUFPb3RCLFVBQVdqZ0UsRUFBS3VNLGlCQUM1QnNtQyxFQUFPa0ssS0FBSzV0QyxNQUFNK3dELEtBQUs3eUQsS0FBTXJOLEdBQVM4L0QsUUFBV3ByQixTQUd0Q0EsSUFBVmgwQyxFQUNXLE9BQVZBLE9BQ0pteUMsRUFBT2t0QixXQUFZcnNCLEVBQU0xekMsR0FJckJ5ckQsR0FBUyxRQUFTQSxRQUN1Qi9XLEtBQTNDcEIsRUFBTW1ZLEVBQU1sOEMsSUFBS21rQyxFQUFNaHpDLEVBQU9WLElBQ3pCc3pDLEdBR1JJLEVBQUtsbUMsYUFBY3hOLEVBQU1VLEVBQVEsSUFDMUJBLEdBR0grcUQsR0FBUyxRQUFTQSxHQUErQyxRQUFwQ25ZLEVBQU1tWSxFQUFNbnJELElBQUtvekMsRUFBTTF6QyxJQUNqRHN6QyxFQU1NLE9BSGRBLEVBQU1ULEVBQU9tSixLQUFLaUIsS0FBTXZKLEVBQU0xekMsU0FHVDAwQyxFQUFZcEIsSUFHbEMyc0IsVUFBVyxDQUNWajVELEtBQU0sQ0FDTHVJLElBQUssU0FBVW1rQyxFQUFNaHpDLEdBQ3BCLElBQU1zeEMsRUFBUTZ0QixZQUF3QixVQUFWbi9ELEdBQzNCdVAsRUFBVXlqQyxFQUFNLFNBQVksQ0FDNUIsSUFBSTV4QyxFQUFNNHhDLEVBQUtoekMsTUFLZixPQUpBZ3pDLEVBQUtsbUMsYUFBYyxPQUFROU0sR0FDdEJvQixJQUNKNHhDLEVBQUtoekMsTUFBUW9CLEdBRVBwQixNQU1YcS9ELFdBQVksU0FBVXJzQixFQUFNaHpDLEdBQzNCLElBQUlWLEVBQ0hQLEVBQUksRUFJSjBnRSxFQUFZei9ELEdBQVNBLEVBQU15TyxNQUFPZzJDLEdBRW5DLEdBQUtnYixHQUErQixJQUFsQnpzQixFQUFLbGdDLFNBQ3RCLEtBQVV4VCxFQUFPbWdFLEVBQVcxZ0UsTUFDM0JpMEMsRUFBS25tQyxnQkFBaUJ2TixNQU8xQjgvRCxHQUFXLENBQ1Z2d0QsSUFBSyxTQUFVbWtDLEVBQU1oekMsRUFBT1YsR0FRM0IsT0FQZSxJQUFWVSxFQUdKbXlDLEVBQU9rdEIsV0FBWXJzQixFQUFNMXpDLEdBRXpCMHpDLEVBQUtsbUMsYUFBY3hOLEVBQU1BLEdBRW5CQSxJQUlUNnlDLEVBQU9ZLEtBQU1aLEVBQU9rSyxLQUFLNXRDLE1BQU0rd0QsS0FBS2w5RCxPQUFPbU0sTUFBTyxTQUFVLFNBQVV5bUMsRUFBSTUxQyxHQUN6RSxJQUFJQyxFQUFTNDZDLEdBQVk3NkMsSUFBVTZ5QyxFQUFPbUosS0FBS2lCLEtBRS9DcEMsR0FBWTc2QyxHQUFTLFNBQVUwekMsRUFBTTF6QyxFQUFNZzJDLEdBQzFDLElBQUkxQyxFQUFLMmQsRUFDUm1QLEVBQWdCcGdFLEVBQUt1TSxjQVl0QixPQVZNeXBDLElBR0xpYixFQUFTcFcsR0FBWXVsQixHQUNyQnZsQixHQUFZdWxCLEdBQWtCOXNCLEVBQzlCQSxFQUFxQyxNQUEvQnJ6QyxFQUFReXpDLEVBQU0xekMsRUFBTWcyQyxHQUN6Qm9xQixFQUNBLEtBQ0R2bEIsR0FBWXVsQixHQUFrQm5QLEdBRXhCM2QsTUFPVCxJQUFJK3NCLEdBQWEsc0NBQ2hCQyxHQUFhLGdCQXlJYixTQUFTQyxHQUFrQjcvRCxHQUUxQixPQURhQSxFQUFNeU8sTUFBT2cyQyxJQUFtQixJQUMvQjVpRCxLQUFNLEtBSXRCLFNBQVNpK0QsR0FBVTlzQixHQUNsQixPQUFPQSxFQUFLaEIsY0FBZ0JnQixFQUFLaEIsYUFBYyxVQUFhLEdBRzdELFNBQVMrdEIsR0FBZ0IvL0QsR0FDeEIsT0FBS21HLE1BQU1ZLFFBQVMvRyxHQUNaQSxFQUVjLGlCQUFWQSxHQUNKQSxFQUFNeU8sTUFBT2cyQyxJQUVkLEdBeEpSdFMsRUFBT0UsR0FBRy9JLE9BQVEsQ0FDakIyZ0IsS0FBTSxTQUFVM3FELEVBQU1VLEdBQ3JCLE9BQU9pcEQsRUFBUTFrRCxLQUFNNHRDLEVBQU84WCxLQUFNM3FELEVBQU1VLEVBQU8wQyxVQUFVQyxPQUFTLElBR25FcTlELFdBQVksU0FBVTFnRSxHQUNyQixPQUFPaUYsS0FBS3d1QyxNQUFNLGtCQUNWeHVDLEtBQU00dEMsRUFBTzh0QixRQUFTM2dFLElBQVVBLFNBSzFDNnlDLEVBQU83SSxPQUFRLENBQ2QyZ0IsS0FBTSxTQUFValgsRUFBTTF6QyxFQUFNVSxHQUMzQixJQUFJNHlDLEVBQUttWSxFQUNSdVUsRUFBUXRzQixFQUFLbGdDLFNBR2QsR0FBZSxJQUFWd3NELEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBV25DLE9BUGUsSUFBVkEsR0FBZ0JudEIsRUFBT3NRLFNBQVV6UCxLQUdyQzF6QyxFQUFPNnlDLEVBQU84dEIsUUFBUzNnRSxJQUFVQSxFQUNqQ3lyRCxFQUFRNVksRUFBT3VvQixVQUFXcDdELFNBR1owMEMsSUFBVmgwQyxFQUNDK3FELEdBQVMsUUFBU0EsUUFDdUIvVyxLQUEzQ3BCLEVBQU1tWSxFQUFNbDhDLElBQUtta0MsRUFBTWh6QyxFQUFPVixJQUN6QnN6QyxFQUdDSSxFQUFNMXpDLEdBQVNVLEVBR3BCK3FELEdBQVMsUUFBU0EsR0FBK0MsUUFBcENuWSxFQUFNbVksRUFBTW5yRCxJQUFLb3pDLEVBQU0xekMsSUFDakRzekMsRUFHREksRUFBTTF6QyxJQUdkbzdELFVBQVcsQ0FDVjNiLFNBQVUsQ0FDVG4vQyxJQUFLLFNBQVVvekMsR0FPZCxJQUFJa3RCLEVBQVcvdEIsRUFBT21KLEtBQUtpQixLQUFNdkosRUFBTSxZQUV2QyxPQUFLa3RCLEVBQ0d0SSxTQUFVc0ksRUFBVSxJQUkzQlAsR0FBV2h6RCxLQUFNcW1DLEVBQUt6akMsV0FDdEJxd0QsR0FBV2p6RCxLQUFNcW1DLEVBQUt6akMsV0FDdEJ5akMsRUFBS3psQixLQUVFLEdBR0EsS0FLWDB5QyxRQUFTLENBQ1IsSUFBTyxVQUNQLE1BQVMsZUFZTDN1QixFQUFRNHRCLGNBQ2Ivc0IsRUFBT3VvQixVQUFVcHBELFNBQVcsQ0FDM0IxUixJQUFLLFNBQVVvekMsR0FJZCxJQUFJckQsRUFBU3FELEVBQUt2N0IsV0FJbEIsT0FIS2s0QixHQUFVQSxFQUFPbDRCLFlBQ3JCazRCLEVBQU9sNEIsV0FBV3VuQyxjQUVaLE1BRVJud0MsSUFBSyxTQUFVbWtDLEdBSWQsSUFBSXJELEVBQVNxRCxFQUFLdjdCLFdBQ2JrNEIsSUFDSkEsRUFBT3FQLGNBRUZyUCxFQUFPbDRCLFlBQ1hrNEIsRUFBT2w0QixXQUFXdW5DLGtCQU92QjdNLEVBQU9ZLEtBQU0sQ0FDWixXQUNBLFdBQ0EsWUFDQSxjQUNBLGNBQ0EsVUFDQSxVQUNBLFNBQ0EsY0FDQSxvQkFDRSxXQUNGWixFQUFPOHRCLFFBQVMxN0QsS0FBS3NILGVBQWtCdEgsUUE0QnhDNHRDLEVBQU9FLEdBQUcvSSxPQUFRLENBQ2pCNjJCLFNBQVUsU0FBVW5nRSxHQUNuQixJQUFJb2dFLEVBQVNwdEIsRUFBTXFILEVBQUtnbUIsRUFBVUMsRUFBTzlzQixFQUFHK3NCLEVBQzNDeGhFLEVBQUksRUFFTCxHQUFLd3lDLEVBQVl2eEMsR0FDaEIsT0FBT3VFLEtBQUt3dUMsTUFBTSxTQUFVUyxHQUMzQnJCLEVBQVE1dEMsTUFBTzQ3RCxTQUFVbmdFLEVBQU1kLEtBQU1xRixLQUFNaXZDLEVBQUdzc0IsR0FBVXY3RCxXQU0xRCxJQUZBNjdELEVBQVVMLEdBQWdCLy9ELElBRWIyQyxPQUNaLEtBQVVxd0MsRUFBT3p1QyxLQUFNeEYsTUFJdEIsR0FIQXNoRSxFQUFXUCxHQUFVOXNCLEdBQ3JCcUgsRUFBd0IsSUFBbEJySCxFQUFLbGdDLFVBQW9CLElBQU0rc0QsR0FBa0JRLEdBQWEsSUFFekQsQ0FFVixJQURBN3NCLEVBQUksRUFDTThzQixFQUFRRixFQUFTNXNCLE1BQ3JCNkcsRUFBSXRrQyxRQUFTLElBQU11cUQsRUFBUSxLQUFRLElBQ3ZDam1CLEdBQU9pbUIsRUFBUSxLQU1aRCxLQURMRSxFQUFhVixHQUFrQnhsQixLQUU5QnJILEVBQUtsbUMsYUFBYyxRQUFTeXpELEdBTWhDLE9BQU9oOEQsTUFHUmk4RCxZQUFhLFNBQVV4Z0UsR0FDdEIsSUFBSW9nRSxFQUFTcHRCLEVBQU1xSCxFQUFLZ21CLEVBQVVDLEVBQU85c0IsRUFBRytzQixFQUMzQ3hoRSxFQUFJLEVBRUwsR0FBS3d5QyxFQUFZdnhDLEdBQ2hCLE9BQU91RSxLQUFLd3VDLE1BQU0sU0FBVVMsR0FDM0JyQixFQUFRNXRDLE1BQU9pOEQsWUFBYXhnRSxFQUFNZCxLQUFNcUYsS0FBTWl2QyxFQUFHc3NCLEdBQVV2N0QsV0FJN0QsSUFBTTdCLFVBQVVDLE9BQ2YsT0FBTzRCLEtBQUtnNEMsS0FBTSxRQUFTLElBSzVCLElBRkE2akIsRUFBVUwsR0FBZ0IvL0QsSUFFYjJDLE9BQ1osS0FBVXF3QyxFQUFPenVDLEtBQU14RixNQU10QixHQUxBc2hFLEVBQVdQLEdBQVU5c0IsR0FHckJxSCxFQUF3QixJQUFsQnJILEVBQUtsZ0MsVUFBb0IsSUFBTStzRCxHQUFrQlEsR0FBYSxJQUV6RCxDQUVWLElBREE3c0IsRUFBSSxFQUNNOHNCLEVBQVFGLEVBQVM1c0IsTUFHMUIsS0FBUTZHLEVBQUl0a0MsUUFBUyxJQUFNdXFELEVBQVEsTUFBUyxHQUMzQ2ptQixFQUFNQSxFQUFJMXpDLFFBQVMsSUFBTTI1RCxFQUFRLElBQUssS0FNbkNELEtBRExFLEVBQWFWLEdBQWtCeGxCLEtBRTlCckgsRUFBS2xtQyxhQUFjLFFBQVN5ekQsR0FNaEMsT0FBT2g4RCxNQUdSazhELFlBQWEsU0FBVXpnRSxFQUFPMGdFLEdBQzdCLElBQUlwNkQsT0FBQSxJQUFjdEcsRUFBZCxjQUFjQSxHQUNqQjJnRSxFQUF3QixXQUFUcjZELEdBQXFCSCxNQUFNWSxRQUFTL0csR0FFcEQsTUFBeUIsa0JBQWIwZ0UsR0FBMEJDLEVBQzlCRCxFQUFXbjhELEtBQUs0N0QsU0FBVW5nRSxHQUFVdUUsS0FBS2k4RCxZQUFheGdFLEdBR3pEdXhDLEVBQVl2eEMsR0FDVHVFLEtBQUt3dUMsTUFBTSxTQUFVaDBDLEdBQzNCb3pDLEVBQVE1dEMsTUFBT2s4RCxZQUNkemdFLEVBQU1kLEtBQU1xRixLQUFNeEYsRUFBRytnRSxHQUFVdjdELE1BQVFtOEQsR0FDdkNBLE1BS0luOEQsS0FBS3d1QyxNQUFNLFdBQ2pCLElBQUkxQyxFQUFXdHhDLEVBQUdxa0QsRUFBTXdkLEVBRXhCLEdBQUtELEVBT0osSUFKQTVoRSxFQUFJLEVBQ0pxa0QsRUFBT2pSLEVBQVE1dEMsTUFDZnE4RCxFQUFhYixHQUFnQi8vRCxHQUVuQnF3QyxFQUFZdXdCLEVBQVk3aEUsTUFHNUJxa0QsRUFBS3lkLFNBQVV4d0IsR0FDbkIrUyxFQUFLb2QsWUFBYW53QixHQUVsQitTLEVBQUsrYyxTQUFVOXZCLGFBS0kyRCxJQUFWaDBDLEdBQWdDLFlBQVRzRyxLQUNsQytwQyxFQUFZeXZCLEdBQVV2N0QsUUFJckI0bEQsRUFBU3Q3QyxJQUFLdEssS0FBTSxnQkFBaUI4ckMsR0FPakM5ckMsS0FBS3VJLGNBQ1R2SSxLQUFLdUksYUFBYyxRQUNsQnVqQyxJQUF1QixJQUFWcndDLEVBQ2IsR0FDQW1xRCxFQUFTdnFELElBQUsyRSxLQUFNLGtCQUFxQixTQU85Q3M4RCxTQUFVLFNBQVV6dUIsR0FDbkIsSUFBSS9CLEVBQVcyQyxFQUNkajBDLEVBQUksRUFHTCxJQURBc3hDLEVBQVksSUFBTStCLEVBQVcsSUFDbkJZLEVBQU96dUMsS0FBTXhGLE1BQ3RCLEdBQXVCLElBQWxCaTBDLEVBQUtsZ0MsV0FDUCxJQUFNK3NELEdBQWtCQyxHQUFVOXNCLElBQVcsS0FBTWo5QixRQUFTczZCLElBQWUsRUFDNUUsT0FBTyxFQUlWLE9BQU8sS0FPVCxJQUFJeXdCLEdBQVUsTUFFZDN1QixFQUFPRSxHQUFHL0ksT0FBUSxDQUNqQmxvQyxJQUFLLFNBQVVwQixHQUNkLElBQUkrcUQsRUFBT25ZLEVBQUs4Z0IsRUFDZjFnQixFQUFPenVDLEtBQU0sR0FFZCxPQUFNN0IsVUFBVUMsUUEwQmhCK3dELEVBQWtCbmlCLEVBQVl2eEMsR0FFdkJ1RSxLQUFLd3VDLE1BQU0sU0FBVWgwQyxHQUMzQixJQUFJcUMsRUFFbUIsSUFBbEJtRCxLQUFLdU8sV0FXRSxPQU5YMVIsRUFESXN5RCxFQUNFMXpELEVBQU1kLEtBQU1xRixLQUFNeEYsRUFBR296QyxFQUFRNXRDLE1BQU9uRCxPQUVwQ3BCLEdBS05vQixFQUFNLEdBRW9CLGlCQUFSQSxFQUNsQkEsR0FBTyxHQUVJK0UsTUFBTVksUUFBUzNGLEtBQzFCQSxFQUFNK3dDLEVBQU92d0MsSUFBS1IsR0FBSyxTQUFVcEIsR0FDaEMsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxRQUl0QytxRCxFQUFRNVksRUFBTzR1QixTQUFVeDhELEtBQUsrQixPQUFVNnJDLEVBQU80dUIsU0FBVXg4RCxLQUFLZ0wsU0FBUzFELGlCQUdyRCxRQUFTay9DLFFBQStDL1csSUFBcEMrVyxFQUFNbDhDLElBQUt0SyxLQUFNbkQsRUFBSyxXQUMzRG1ELEtBQUt2RSxNQUFRb0IsUUF6RFQ0eEMsR0FDSitYLEVBQVE1WSxFQUFPNHVCLFNBQVUvdEIsRUFBSzFzQyxPQUM3QjZyQyxFQUFPNHVCLFNBQVUvdEIsRUFBS3pqQyxTQUFTMUQsaUJBRy9CLFFBQVNrL0MsUUFDZ0MvVyxLQUF2Q3BCLEVBQU1tWSxFQUFNbnJELElBQUtvekMsRUFBTSxVQUVsQkosRUFNWSxpQkFIcEJBLEVBQU1JLEVBQUtoekMsT0FJSDR5QyxFQUFJanNDLFFBQVNtNkQsR0FBUyxJQUloQixNQUFQbHVCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0hULEVBQU83SSxPQUFRLENBQ2R5M0IsU0FBVSxDQUNUMVQsT0FBUSxDQUNQenRELElBQUssU0FBVW96QyxHQUVkLElBQUk1eEMsRUFBTSt3QyxFQUFPbUosS0FBS2lCLEtBQU12SixFQUFNLFNBQ2xDLE9BQWMsTUFBUDV4QyxFQUNOQSxFQU1BeStELEdBQWtCMXRCLEVBQU9wbkIsS0FBTWlvQixNQUdsQ3lDLE9BQVEsQ0FDUDcxQyxJQUFLLFNBQVVvekMsR0FDZCxJQUFJaHpDLEVBQU9xdEQsRUFBUXR1RCxFQUNsQnNTLEVBQVUyaEMsRUFBSzNoQyxRQUNmMm5CLEVBQVFnYSxFQUFLZ00sY0FDYm9RLEVBQW9CLGVBQWRwYyxFQUFLMXNDLEtBQ1hxbUQsRUFBU3lDLEVBQU0sS0FBTyxHQUN0QnlKLEVBQU16SixFQUFNcDJCLEVBQVEsRUFBSTNuQixFQUFRMU8sT0FVakMsSUFQQzVELEVBRElpNkIsRUFBUSxFQUNSNi9CLEVBR0F6SixFQUFNcDJCLEVBQVEsRUFJWGo2QixFQUFJODVELEVBQUs5NUQsSUFLaEIsS0FKQXN1RCxFQUFTaDhDLEVBQVN0UyxJQUlKdVMsVUFBWXZTLElBQU1pNkIsS0FHN0JxMEIsRUFBTzc3QyxZQUNMNjdDLEVBQU81MUMsV0FBV2pHLFdBQ25CakMsRUFBVTg5QyxFQUFPNTFDLFdBQVksYUFBaUIsQ0FNakQsR0FIQXpYLEVBQVFteUMsRUFBUWtiLEdBQVNqc0QsTUFHcEJndUQsRUFDSixPQUFPcHZELEVBSVIyc0QsRUFBTzFsRCxLQUFNakgsR0FJZixPQUFPMnNELEdBR1I5OUMsSUFBSyxTQUFVbWtDLEVBQU1oekMsR0FNcEIsSUFMQSxJQUFJZ2hFLEVBQVczVCxFQUNkaDhDLEVBQVUyaEMsRUFBSzNoQyxRQUNmczdDLEVBQVN4YSxFQUFPc0MsVUFBV3owQyxHQUMzQmpCLEVBQUlzUyxFQUFRMU8sT0FFTDVELE9BQ1BzdUQsRUFBU2g4QyxFQUFTdFMsSUFJTnVTLFNBQ1g2Z0MsRUFBT3dDLFFBQVN4QyxFQUFPNHVCLFNBQVMxVCxPQUFPenRELElBQUt5dEQsR0FBVVYsSUFBWSxLQUVsRXFVLEdBQVksR0FVZCxPQUhNQSxJQUNMaHVCLEVBQUtnTSxlQUFpQixHQUVoQjJOLE9BT1h4YSxFQUFPWSxLQUFNLENBQUUsUUFBUyxhQUFjLFdBQ3JDWixFQUFPNHVCLFNBQVV4OEQsTUFBUyxDQUN6QnNLLElBQUssU0FBVW1rQyxFQUFNaHpDLEdBQ3BCLEdBQUttRyxNQUFNWSxRQUFTL0csR0FDbkIsT0FBU2d6QyxFQUFLL2lDLFFBQVVraUMsRUFBT3dDLFFBQVN4QyxFQUFRYSxHQUFPNXhDLE1BQU9wQixJQUFXLElBSXRFc3hDLEVBQVEydEIsVUFDYjlzQixFQUFPNHVCLFNBQVV4OEQsTUFBTzNFLElBQU0sU0FBVW96QyxHQUN2QyxPQUF3QyxPQUFqQ0EsRUFBS2hCLGFBQWMsU0FBcUIsS0FBT2dCLEVBQUtoekMsV0FXOURzeEMsRUFBUTJ2QixRQUFVLGNBQWUzMUQsRUFHakMsSUFBSTQxRCxHQUFjLGtDQUNqQkMsR0FBMEIsU0FBVXQ3RCxHQUNuQ0EsRUFBRW1iLG1CQUdKbXhCLEVBQU83SSxPQUFRNkksRUFBTzdtQixNQUFPLENBRTVCdWtDLFFBQVMsU0FBVXZrQyxFQUFPbkgsRUFBTTZ1QixFQUFNb3VCLEdBRXJDLElBQUlyaUUsRUFBR3M3QyxFQUFLbUIsRUFBSzZsQixFQUFZQyxFQUFRL1EsRUFBUWpKLEVBQVNpYSxFQUNyREMsRUFBWSxDQUFFeHVCLEdBQVFqd0MsR0FDdEJ1RCxFQUFPNnFDLEVBQU9qeUMsS0FBTW9zQixFQUFPLFFBQVdBLEVBQU1obEIsS0FBT2dsQixFQUNuRDhrQyxFQUFhamYsRUFBT2p5QyxLQUFNb3NCLEVBQU8sYUFBZ0JBLEVBQU13dkIsVUFBVS80QyxNQUFPLEtBQVEsR0FLakYsR0FIQXM0QyxFQUFNa25CLEVBQWMvbEIsRUFBTXhJLEVBQU9BLEdBQVFqd0MsRUFHbEIsSUFBbEJpd0MsRUFBS2xnQyxVQUFvQyxJQUFsQmtnQyxFQUFLbGdDLFdBSzVCb3VELEdBQVl2MEQsS0FBTXJHLEVBQU82ckMsRUFBTzdtQixNQUFNa2xDLGFBSXRDbHFELEVBQUt5UCxRQUFTLE1BQVMsSUFHM0JxNkMsRUFBYTlwRCxFQUFLdkUsTUFBTyxLQUN6QnVFLEVBQU84cEQsRUFBVy96QyxRQUNsQit6QyxFQUFXM2MsUUFFWjZ0QixFQUFTaDdELEVBQUt5UCxRQUFTLEtBQVEsR0FBSyxLQUFPelAsR0FHM0NnbEIsRUFBUUEsRUFBTzZtQixFQUFPOEIsU0FDckIzb0IsRUFDQSxJQUFJNm1CLEVBQU8yZCxNQUFPeHBELEVBQXVCLGlCQUFqQixJQUFPZ2xCLEVBQVAsY0FBT0EsS0FBc0JBLElBR2hEb2tDLFVBQVkwUixFQUFlLEVBQUksRUFDckM5MUMsRUFBTXd2QixVQUFZc1YsRUFBV3Z1RCxLQUFNLEtBQ25DeXBCLEVBQU0rbEMsV0FBYS9sQyxFQUFNd3ZCLFVBQ3hCLElBQUk1RCxPQUFRLFVBQVlrWixFQUFXdnVELEtBQU0saUJBQW9CLFdBQzdELEtBR0R5cEIsRUFBTWt5QixZQUFTeEosRUFDVDFvQixFQUFNanBCLFNBQ1hpcEIsRUFBTWpwQixPQUFTMndDLEdBSWhCN3VCLEVBQWUsTUFBUkEsRUFDTixDQUFFbUgsR0FDRjZtQixFQUFPc0MsVUFBV3R3QixFQUFNLENBQUVtSCxJQUczQmc4QixFQUFVblYsRUFBTzdtQixNQUFNZzhCLFFBQVNoaEQsSUFBVSxHQUNwQzg2RCxJQUFnQjlaLEVBQVF1SSxVQUFtRCxJQUF4Q3ZJLEVBQVF1SSxRQUFRem5ELE1BQU80cUMsRUFBTTd1QixJQUF0RSxDQU1BLElBQU1pOUMsSUFBaUI5WixFQUFRd0ssV0FBYXJnQixFQUFVdUIsR0FBUyxDQU05RCxJQUpBcXVCLEVBQWEvWixFQUFRcUksY0FBZ0JycEQsRUFDL0I0NkQsR0FBWXYwRCxLQUFNMDBELEVBQWEvNkQsS0FDcEMrekMsRUFBTUEsRUFBSTVpQyxZQUVINGlDLEVBQUtBLEVBQU1BLEVBQUk1aUMsV0FDdEIrcEQsRUFBVXY2RCxLQUFNb3pDLEdBQ2hCbUIsRUFBTW5CLEVBSUZtQixLQUFVeEksRUFBSy9oQyxlQUFpQmxPLElBQ3BDeStELEVBQVV2NkQsS0FBTXUwQyxFQUFJbnRCLGFBQWVtdEIsRUFBSXpyQixjQUFnQnprQixHQU16RCxJQURBdk0sRUFBSSxHQUNNczdDLEVBQU1tbkIsRUFBV3ppRSxRQUFZdXNCLEVBQU14Syx3QkFDNUN5Z0QsRUFBY2xuQixFQUNkL3VCLEVBQU1obEIsS0FBT3ZILEVBQUksRUFDaEJzaUUsRUFDQS9aLEVBQVFtSixVQUFZbnFELEdBR3JCaXFELEdBQ0VwRyxFQUFTdnFELElBQUt5NkMsRUFBSyxXQUFjNTZDLE9BQU9ZLE9BQVEsT0FDOUNpckIsRUFBTWhsQixPQUNUNmpELEVBQVN2cUQsSUFBS3k2QyxFQUFLLFlBRW5Ca1csRUFBT25vRCxNQUFPaXlDLEVBQUtsMkIsSUFJcEJvc0MsRUFBUytRLEdBQVVqbkIsRUFBS2luQixLQUNUL1EsRUFBT25vRCxPQUFTeWhELEVBQVl4UCxLQUMxQy91QixFQUFNa3lCLE9BQVMrUyxFQUFPbm9ELE1BQU9peUMsRUFBS2wyQixJQUNaLElBQWpCbUgsRUFBTWt5QixRQUNWbHlCLEVBQU12SyxrQkE4Q1QsT0ExQ0F1SyxFQUFNaGxCLEtBQU9BLEVBR1A4NkQsR0FBaUI5MUMsRUFBTTNLLHNCQUVwQjJtQyxFQUFRbUcsV0FDcUMsSUFBcERuRyxFQUFRbUcsU0FBU3JsRCxNQUFPbzVELEVBQVUveUIsTUFBT3RxQixLQUN6QzBsQyxFQUFZN1csSUFJUHN1QixHQUFVL3ZCLEVBQVl5QixFQUFNMXNDLE1BQWFtckMsRUFBVXVCLE1BR3ZEd0ksRUFBTXhJLEVBQU1zdUIsTUFHWHR1QixFQUFNc3VCLEdBQVcsTUFJbEJudkIsRUFBTzdtQixNQUFNa2xDLFVBQVlscUQsRUFFcEJnbEIsRUFBTXhLLHdCQUNWeWdELEVBQVkxb0QsaUJBQWtCdlMsRUFBTTY2RCxJQUdyQ251QixFQUFNMXNDLEtBRURnbEIsRUFBTXhLLHdCQUNWeWdELEVBQVl6b0Qsb0JBQXFCeFMsRUFBTTY2RCxJQUd4Q2h2QixFQUFPN21CLE1BQU1rbEMsZUFBWXhjLEVBRXBCd0gsSUFDSnhJLEVBQU1zdUIsR0FBVzlsQixJQU1kbHdCLEVBQU1reUIsU0FLZGlrQixTQUFVLFNBQVVuN0QsRUFBTTBzQyxFQUFNMW5CLEdBQy9CLElBQUl6bEIsRUFBSXNzQyxFQUFPN0ksT0FDZCxJQUFJNkksRUFBTzJkLE1BQ1h4a0MsRUFDQSxDQUNDaGxCLEtBQU1BLEVBQ04yckQsYUFBYSxJQUlmOWYsRUFBTzdtQixNQUFNdWtDLFFBQVNocUQsRUFBRyxLQUFNbXRDLE1BS2pDYixFQUFPRSxHQUFHL0ksT0FBUSxDQUVqQnVtQixRQUFTLFNBQVV2cEQsRUFBTTZkLEdBQ3hCLE9BQU81ZixLQUFLd3VDLE1BQU0sV0FDakJaLEVBQU83bUIsTUFBTXVrQyxRQUFTdnBELEVBQU02ZCxFQUFNNWYsVUFHcENtOUQsZUFBZ0IsU0FBVXA3RCxFQUFNNmQsR0FDL0IsSUFBSTZ1QixFQUFPenVDLEtBQU0sR0FDakIsR0FBS3l1QyxFQUNKLE9BQU9iLEVBQU83bUIsTUFBTXVrQyxRQUFTdnBELEVBQU02ZCxFQUFNNnVCLEdBQU0sTUFjNUMxQixFQUFRMnZCLFNBQ2I5dUIsRUFBT1ksS0FBTSxDQUFFN08sTUFBTyxVQUFXa3VCLEtBQU0sYUFBYyxTQUFVSyxFQUFNeEIsR0FHcEUsSUFBSS9XLEVBQVUsU0FBVTV1QixHQUN2QjZtQixFQUFPN21CLE1BQU1tMkMsU0FBVXhRLEVBQUszbEMsRUFBTWpwQixPQUFROHZDLEVBQU83bUIsTUFBTTJsQyxJQUFLM2xDLEtBRzdENm1CLEVBQU83bUIsTUFBTWc4QixRQUFTMkosR0FBUSxDQUM3Qk4sTUFBTyxXQUlOLElBQUk3ZSxFQUFNdnRDLEtBQUswTSxlQUFpQjFNLEtBQUt4QixVQUFZd0IsS0FDaERvOUQsRUFBV3hYLEVBQVNsQixPQUFRblgsRUFBS21mLEdBRTVCMFEsR0FDTDd2QixFQUFJajVCLGlCQUFrQjQ1QyxFQUFNdlksR0FBUyxHQUV0Q2lRLEVBQVNsQixPQUFRblgsRUFBS21mLEdBQU8wUSxHQUFZLEdBQU0sSUFFaEQ3USxTQUFVLFdBQ1QsSUFBSWhmLEVBQU12dEMsS0FBSzBNLGVBQWlCMU0sS0FBS3hCLFVBQVl3QixLQUNoRG85RCxFQUFXeFgsRUFBU2xCLE9BQVFuWCxFQUFLbWYsR0FBUSxFQUVwQzBRLEVBS0x4WCxFQUFTbEIsT0FBUW5YLEVBQUttZixFQUFLMFEsSUFKM0I3dkIsRUFBSWg1QixvQkFBcUIyNUMsRUFBTXZZLEdBQVMsR0FDeENpUSxFQUFTbkUsT0FBUWxVLEVBQUttZixTQVMzQixJQUFJbnBDLEdBQVd4YyxFQUFPd2MsU0FFbEI2cEIsR0FBUSxDQUFFc0QsS0FBTXJ6QixLQUFLQyxPQUVyQisvQyxHQUFXLEtBS2Z6dkIsRUFBTzB2QixTQUFXLFNBQVUxOUMsR0FDM0IsSUFBSTI1QixFQUNKLElBQU0zNUIsR0FBd0IsaUJBQVRBLEVBQ3BCLE9BQU8sS0FLUixJQUNDMjVCLEdBQVEsSUFBSXh5QyxFQUFPdzJELFdBQWNDLGdCQUFpQjU5QyxFQUFNLFlBQ3ZELE1BQVF0ZSxHQUNUaTRDLE9BQU05SixFQU1QLE9BSE04SixJQUFPQSxFQUFJMUUscUJBQXNCLGVBQWdCejJDLFFBQ3REd3ZDLEVBQU90bkMsTUFBTyxnQkFBa0JzWixHQUUxQjI1QixHQUlSLElBQ0Nra0IsR0FBVyxRQUNYQyxHQUFRLFNBQ1JDLEdBQWtCLHdDQUNsQkMsR0FBZSxxQ0FFaEIsU0FBU0MsR0FBYS9ILEVBQVE3b0IsRUFBSzZ3QixFQUFhajNELEdBQy9DLElBQUk5TCxFQUVKLEdBQUs2RyxNQUFNWSxRQUFTeXFDLEdBR25CVyxFQUFPWSxLQUFNdkIsR0FBSyxTQUFVenlDLEVBQUd3RSxHQUN6QjgrRCxHQUFlTCxHQUFTcjFELEtBQU0wdEQsR0FHbENqdkQsRUFBS2l2RCxFQUFROTJELEdBS2I2K0QsR0FDQy9ILEVBQVMsS0FBcUIsaUJBQWIsSUFBTzkyRCxFQUFQLGNBQU9BLEtBQXVCLE1BQUxBLEVBQVl4RSxFQUFJLElBQU8sSUFDakV3RSxFQUNBOCtELEVBQ0FqM0QsV0FLRyxHQUFNaTNELEdBQWlDLFdBQWxCbndCLEVBQVFWLEdBVW5DcG1DLEVBQUtpdkQsRUFBUTdvQixRQVBiLElBQU1seUMsS0FBUWt5QyxFQUNiNHdCLEdBQWEvSCxFQUFTLElBQU0vNkQsRUFBTyxJQUFLa3lDLEVBQUtseUMsR0FBUStpRSxFQUFhajNELEdBWXJFK21DLEVBQU9uN0IsTUFBUSxTQUFVblQsRUFBR3crRCxHQUMzQixJQUFJaEksRUFDSHY1RCxFQUFJLEdBQ0pzSyxFQUFNLFNBQVU5SyxFQUFLZ2lFLEdBR3BCLElBQUl0aUUsRUFBUXV4QyxFQUFZK3dCLEdBQ3ZCQSxJQUNBQSxFQUVEeGhFLEVBQUdBLEVBQUU2QixRQUFXb0IsbUJBQW9CekQsR0FBUSxJQUMzQ3lELG1CQUE2QixNQUFUL0QsRUFBZ0IsR0FBS0EsSUFHNUMsR0FBVSxNQUFMNkQsRUFDSixNQUFPLEdBSVIsR0FBS3NDLE1BQU1ZLFFBQVNsRCxJQUFTQSxFQUFFMnVDLFNBQVdMLEVBQU80QixjQUFlbHdDLEdBRy9Ec3VDLEVBQU9ZLEtBQU1sdkMsR0FBRyxXQUNmdUgsRUFBSzdHLEtBQUtqRixLQUFNaUYsS0FBS3ZFLGVBT3RCLElBQU1xNkQsS0FBVXgyRCxFQUNmdStELEdBQWEvSCxFQUFReDJELEVBQUd3MkQsR0FBVWdJLEVBQWFqM0QsR0FLakQsT0FBT3RLLEVBQUVlLEtBQU0sTUFHaEJzd0MsRUFBT0UsR0FBRy9JLE9BQVEsQ0FDakJpNUIsVUFBVyxXQUNWLE9BQU9wd0IsRUFBT243QixNQUFPelMsS0FBS2krRCxtQkFFM0JBLGVBQWdCLFdBQ2YsT0FBT2orRCxLQUFLM0MsS0FBSyxXQUdoQixJQUFJMDZDLEVBQVduSyxFQUFPOFgsS0FBTTFsRCxLQUFNLFlBQ2xDLE9BQU8rM0MsRUFBV25LLEVBQU9zQyxVQUFXNkgsR0FBYS8zQyxRQUVqRDYyQyxRQUFRLFdBQ1IsSUFBSTkwQyxFQUFPL0IsS0FBSytCLEtBR2hCLE9BQU8vQixLQUFLakYsT0FBUzZ5QyxFQUFRNXRDLE1BQU84UyxHQUFJLGNBQ3ZDOHFELEdBQWF4MUQsS0FBTXBJLEtBQUtnTCxZQUFlMnlELEdBQWdCdjFELEtBQU1yRyxLQUMzRC9CLEtBQUswTCxVQUFZNjhDLEdBQWVuZ0QsS0FBTXJHLE9BRXpDMUUsS0FBSyxTQUFVc3pDLEVBQUlsQyxHQUNuQixJQUFJNXhDLEVBQU0rd0MsRUFBUTV0QyxNQUFPbkQsTUFFekIsT0FBWSxNQUFQQSxFQUNHLEtBR0grRSxNQUFNWSxRQUFTM0YsR0FDWit3QyxFQUFPdndDLElBQUtSLEdBQUssU0FBVUEsR0FDakMsTUFBTyxDQUFFOUIsS0FBTTB6QyxFQUFLMXpDLEtBQU1VLE1BQU9vQixFQUFJdUYsUUFBU3M3RCxHQUFPLFlBSWhELENBQUUzaUUsS0FBTTB6QyxFQUFLMXpDLEtBQU1VLE1BQU9vQixFQUFJdUYsUUFBU3M3RCxHQUFPLFlBQ2xEcmlFLFNBS04sSUFDQzZpRSxHQUFNLE9BQ05DLEdBQVEsT0FDUkMsR0FBYSxnQkFDYkMsR0FBVyw2QkFJWEMsR0FBYSxpQkFDYkMsR0FBWSxRQVdaeEcsR0FBYSxHQU9ieUcsR0FBYSxHQUdiQyxHQUFXLEtBQUtsMEMsT0FBUSxLQUd4Qm0wQyxHQUFlbGdFLEVBQVNxRyxjQUFlLEtBSXhDLFNBQVM4NUQsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0I5YyxHQUVELGlCQUF2QjhjLElBQ1g5YyxFQUFPOGMsRUFDUEEsRUFBcUIsS0FHdEIsSUFBSUMsRUFDSHRrRSxFQUFJLEVBQ0p1a0UsRUFBWUYsRUFBbUJ2M0QsY0FBYzRDLE1BQU9nMkMsSUFBbUIsR0FFeEUsR0FBS2xULEVBQVkrVSxHQUdoQixLQUFVK2MsRUFBV0MsRUFBV3ZrRSxNQUdSLE1BQWxCc2tFLEVBQVUsSUFDZEEsRUFBV0EsRUFBU3YzRCxNQUFPLElBQU8sS0FDaENxM0QsRUFBV0UsR0FBYUYsRUFBV0UsSUFBYyxJQUFLaHpDLFFBQVNpMkIsS0FJL0Q2YyxFQUFXRSxHQUFhRixFQUFXRSxJQUFjLElBQUtwOEQsS0FBTXEvQyxJQVFuRSxTQUFTaWQsR0FBK0JKLEVBQVc5eEQsRUFBU3VyRCxFQUFpQjRHLEdBRTVFLElBQUlDLEVBQVksR0FDZkMsRUFBcUJQLElBQWNKLEdBRXBDLFNBQVNZLEVBQVNOLEdBQ2pCLElBQUkveEQsRUFjSixPQWJBbXlELEVBQVdKLElBQWEsRUFDeEJseEIsRUFBT1ksS0FBTW93QixFQUFXRSxJQUFjLElBQUksU0FBVWhlLEVBQUd1ZSxHQUN0RCxJQUFJQyxFQUFzQkQsRUFBb0J2eUQsRUFBU3VyRCxFQUFpQjRHLEdBQ3hFLE1BQW9DLGlCQUF4QkssR0FDVkgsR0FBcUJELEVBQVdJLEdBS3RCSCxJQUNEcHlELEVBQVd1eUQsUUFEZixHQUhOeHlELEVBQVFpeUQsVUFBVWp6QyxRQUFTd3pDLEdBQzNCRixFQUFTRSxJQUNGLE1BS0Z2eUQsRUFHUixPQUFPcXlELEVBQVN0eUQsRUFBUWl5RCxVQUFXLE1BQVVHLEVBQVcsTUFBU0UsRUFBUyxLQU0zRSxTQUFTRyxHQUFZemhFLEVBQVEwdEMsR0FDNUIsSUFBSXp2QyxFQUFLd3pDLEVBQ1Jpd0IsRUFBYzV4QixFQUFPNnhCLGFBQWFELGFBQWUsR0FFbEQsSUFBTXpqRSxLQUFPeXZDLE9BQ1FpRSxJQUFmakUsRUFBS3p2QyxNQUNQeWpFLEVBQWF6akUsR0FBUStCLEVBQVd5eEMsSUFBVUEsRUFBTyxLQUFVeHpDLEdBQVF5dkMsRUFBS3p2QyxJQU81RSxPQUpLd3pDLEdBQ0ozQixFQUFPN0ksUUFBUSxFQUFNam5DLEVBQVF5eEMsR0FHdkJ6eEMsRUEvRVA0Z0UsR0FBYTExQyxLQUFPekYsR0FBU3lGLEtBZ1A5QjRrQixFQUFPN0ksT0FBUSxDQUdkMjZCLE9BQVEsRUFHUkMsYUFBYyxHQUNkQyxLQUFNLEdBRU5ILGFBQWMsQ0FDYi80QyxJQUFLbkQsR0FBU3lGLEtBQ2RqbkIsS0FBTSxNQUNOODlELFFBdlJnQiw0REF1UlF6M0QsS0FBTW1iLEdBQVN1OEMsVUFDdkMzekIsUUFBUSxFQUNSNHpCLGFBQWEsRUFDYkMsT0FBTyxFQUNQQyxZQUFhLG1EQWNiQyxRQUFTLENBQ1IsSUFBS3pCLEdBQ0xqNEMsS0FBTSxhQUNOOGtCLEtBQU0sWUFDTmlPLElBQUssNEJBQ0w0bUIsS0FBTSxxQ0FHUC9nQixTQUFVLENBQ1Q3RixJQUFLLFVBQ0xqTyxLQUFNLFNBQ042MEIsS0FBTSxZQUdQQyxlQUFnQixDQUNmN21CLElBQUssY0FDTC95QixLQUFNLGVBQ04yNUMsS0FBTSxnQkFLUEUsV0FBWSxDQUdYLFNBQVVwakUsT0FHVixhQUFhLEVBR2IsWUFBYWlxQyxLQUFLK2UsTUFHbEIsV0FBWXJZLEVBQU8wdkIsVUFPcEJrQyxZQUFhLENBQ1o5NEMsS0FBSyxFQUNMeG1CLFNBQVMsSUFPWG9nRSxVQUFXLFNBQVV4aUUsRUFBUXlpRSxHQUM1QixPQUFPQSxFQUdOaEIsR0FBWUEsR0FBWXpoRSxFQUFROHZDLEVBQU82eEIsY0FBZ0JjLEdBR3ZEaEIsR0FBWTN4QixFQUFPNnhCLGFBQWMzaEUsSUFHbkMwaUUsY0FBZTdCLEdBQTZCNUcsSUFDNUMwSSxjQUFlOUIsR0FBNkJILElBRzVDa0MsS0FBTSxTQUFVaDZDLEVBQUs1WixHQUdBLGlCQUFmLElBQU80WixFQUFQLGNBQU9BLE1BQ1g1WixFQUFVNFosRUFDVkEsT0FBTStvQixHQU1QLElBQUlreEIsRUFHSEMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQTVjLEVBR0E2YyxFQUdBem1FLEVBR0EwbUUsRUFHQTNrRSxFQUFJcXhDLEVBQU8weUIsVUFBVyxHQTlCdkJ4ekQsRUFBVUEsR0FBVyxJQWlDcEJxMEQsRUFBa0I1a0UsRUFBRTJELFNBQVczRCxFQUcvQjZrRSxFQUFxQjdrRSxFQUFFMkQsVUFDcEJpaEUsRUFBZ0I1eUQsVUFBWTR5RCxFQUFnQmx6QixRQUM3Q0wsRUFBUXV6QixHQUNSdnpCLEVBQU83bUIsTUFHVG03QixFQUFXdFUsRUFBT2tVLFdBQ2xCdWYsRUFBbUJ6ekIsRUFBT2lULFVBQVcsZUFHckN5Z0IsRUFBYS9rRSxFQUFFK2tFLFlBQWMsR0FHN0JDLEVBQWlCLEdBQ2pCQyxFQUFzQixHQUd0QkMsRUFBVyxXQUdYeEMsRUFBUSxDQUNQemEsV0FBWSxFQUdaa2Qsa0JBQW1CLFNBQVUzbEUsR0FDNUIsSUFBSW1PLEVBQ0osR0FBS2s2QyxFQUFZLENBQ2hCLElBQU0wYyxFQUVMLElBREFBLEVBQWtCLEdBQ1I1MkQsRUFBUW0wRCxHQUFTenBCLEtBQU1pc0IsSUFDaENDLEVBQWlCNTJELEVBQU8sR0FBSTVDLGNBQWdCLE1BQ3pDdzVELEVBQWlCNTJELEVBQU8sR0FBSTVDLGNBQWdCLE1BQVMsSUFDckRpakIsT0FBUXJnQixFQUFPLElBR3BCQSxFQUFRNDJELEVBQWlCL2tFLEVBQUl1TCxjQUFnQixLQUU5QyxPQUFnQixNQUFUNEMsRUFBZ0IsS0FBT0EsRUFBTTVNLEtBQU0sT0FJM0Nxa0Usc0JBQXVCLFdBQ3RCLE9BQU92ZCxFQUFZeWMsRUFBd0IsTUFJNUNlLGlCQUFrQixTQUFVN21FLEVBQU1VLEdBTWpDLE9BTGtCLE1BQWIyb0QsSUFDSnJwRCxFQUFPeW1FLEVBQXFCem1FLEVBQUt1TSxlQUNoQ2s2RCxFQUFxQnptRSxFQUFLdU0sZ0JBQW1Cdk0sRUFDOUN3bUUsRUFBZ0J4bUUsR0FBU1UsR0FFbkJ1RSxNQUlSNmhFLGlCQUFrQixTQUFVOS9ELEdBSTNCLE9BSGtCLE1BQWJxaUQsSUFDSjduRCxFQUFFdWxFLFNBQVcvL0QsR0FFUC9CLE1BSVJzaEUsV0FBWSxTQUFVamtFLEdBQ3JCLElBQUlpbUIsRUFDSixHQUFLam1CLEVBQ0osR0FBSyttRCxFQUdKNmEsRUFBTWhkLE9BQVE1a0QsRUFBSzRoRSxFQUFNOEMsY0FJekIsSUFBTXorQyxLQUFRam1CLEVBQ2Jpa0UsRUFBWWgrQyxHQUFTLENBQUVnK0MsRUFBWWgrQyxHQUFRam1CLEVBQUtpbUIsSUFJbkQsT0FBT3RqQixNQUlSZ2lFLE1BQU8sU0FBVUMsR0FDaEIsSUFBSUMsRUFBWUQsR0FBY1IsRUFLOUIsT0FKS2QsR0FDSkEsRUFBVXFCLE1BQU9FLEdBRWxCci9ELEVBQU0sRUFBR3EvRCxHQUNGbGlFLE9Bb0JWLEdBZkFraUQsRUFBU3ZCLFFBQVNzZSxHQUtsQjFpRSxFQUFFbXFCLE1BQVVBLEdBQU9ucUIsRUFBRW1xQixLQUFPbkQsR0FBU3lGLE1BQVMsSUFDNUM1bUIsUUFBU204RCxHQUFXaDdDLEdBQVN1OEMsU0FBVyxNQUcxQ3ZqRSxFQUFFd0YsS0FBTytLLEVBQVE0ekMsUUFBVTV6QyxFQUFRL0ssTUFBUXhGLEVBQUVta0QsUUFBVW5rRCxFQUFFd0YsS0FHekR4RixFQUFFd2lFLFdBQWN4aUUsRUFBRXVpRSxVQUFZLEtBQU14M0QsY0FBYzRDLE1BQU9nMkMsSUFBbUIsQ0FBRSxJQUd4RCxNQUFqQjNqRCxFQUFFNGxFLFlBQXNCLENBQzVCbkIsRUFBWXhpRSxFQUFTcUcsY0FBZSxLQUtwQyxJQUNDbThELEVBQVVoNEMsS0FBT3pzQixFQUFFbXFCLElBSW5CczZDLEVBQVVoNEMsS0FBT2c0QyxFQUFVaDRDLEtBQzNCenNCLEVBQUU0bEUsWUFBY3pELEdBQWFvQixTQUFXLEtBQU9wQixHQUFhMEQsTUFDM0RwQixFQUFVbEIsU0FBVyxLQUFPa0IsRUFBVW9CLEtBQ3RDLE1BQVE5Z0UsR0FJVC9FLEVBQUU0bEUsYUFBYyxHQWFsQixHQVJLNWxFLEVBQUVxakIsTUFBUXJqQixFQUFFd2pFLGFBQWlDLGlCQUFYeGpFLEVBQUVxakIsT0FDeENyakIsRUFBRXFqQixLQUFPZ3VCLEVBQU9uN0IsTUFBT2xXLEVBQUVxakIsS0FBTXJqQixFQUFFdWhFLGNBSWxDa0IsR0FBK0JqSCxHQUFZeDdELEVBQUd1USxFQUFTbXlELEdBR2xEN2EsRUFDSixPQUFPNmEsRUE4RVIsSUFBTXprRSxLQXpFTnltRSxFQUFjcnpCLEVBQU83bUIsT0FBU3hxQixFQUFFNHZDLFNBR1EsR0FBcEJ5QixFQUFPOHhCLFVBQzFCOXhCLEVBQU83bUIsTUFBTXVrQyxRQUFTLGFBSXZCL3VELEVBQUV3RixLQUFPeEYsRUFBRXdGLEtBQUttRyxjQUdoQjNMLEVBQUU4bEUsWUFBYy9ELEdBQVdsMkQsS0FBTTdMLEVBQUV3RixNQUtuQzYrRCxFQUFXcmtFLEVBQUVtcUIsSUFBSXRrQixRQUFTKzdELEdBQU8sSUFHM0I1aEUsRUFBRThsRSxXQXdCSTlsRSxFQUFFcWpCLE1BQVFyakIsRUFBRXdqRSxhQUNvRCxLQUF6RXhqRSxFQUFFMGpFLGFBQWUsSUFBS3p1RCxRQUFTLHVDQUNqQ2pWLEVBQUVxakIsS0FBT3JqQixFQUFFcWpCLEtBQUt4ZCxRQUFTODdELEdBQUssT0F2QjlCZ0QsRUFBVzNrRSxFQUFFbXFCLElBQUluZixNQUFPcTVELEVBQVN4aUUsUUFHNUI3QixFQUFFcWpCLE9BQVVyakIsRUFBRXdqRSxhQUFpQyxpQkFBWHhqRSxFQUFFcWpCLFFBQzFDZ2hELElBQWN2RCxHQUFPajFELEtBQU13NEQsR0FBYSxJQUFNLEtBQVFya0UsRUFBRXFqQixZQUdqRHJqQixFQUFFcWpCLE9BSU8sSUFBWnJqQixFQUFFNjRDLFFBQ053ckIsRUFBV0EsRUFBU3grRCxRQUFTZzhELEdBQVksTUFDekM4QyxHQUFhN0QsR0FBT2oxRCxLQUFNdzRELEdBQWEsSUFBTSxLQUFRLEtBQVN4ekIsR0FBTXNELE9BQ25Fd3dCLEdBSUYza0UsRUFBRW1xQixJQUFNazZDLEVBQVdNLEdBU2Yza0UsRUFBRStsRSxhQUNEMTBCLEVBQU8reEIsYUFBY2lCLElBQ3pCM0IsRUFBTTJDLGlCQUFrQixvQkFBcUJoMEIsRUFBTyt4QixhQUFjaUIsSUFFOURoekIsRUFBT2d5QixLQUFNZ0IsSUFDakIzQixFQUFNMkMsaUJBQWtCLGdCQUFpQmgwQixFQUFPZ3lCLEtBQU1nQixNQUtuRHJrRSxFQUFFcWpCLE1BQVFyakIsRUFBRThsRSxhQUFnQyxJQUFsQjlsRSxFQUFFMGpFLGFBQXlCbnpELEVBQVFtekQsY0FDakVoQixFQUFNMkMsaUJBQWtCLGVBQWdCcmxFLEVBQUUwakUsYUFJM0NoQixFQUFNMkMsaUJBQ0wsU0FDQXJsRSxFQUFFd2lFLFVBQVcsSUFBT3hpRSxFQUFFMmpFLFFBQVMzakUsRUFBRXdpRSxVQUFXLElBQzNDeGlFLEVBQUUyakUsUUFBUzNqRSxFQUFFd2lFLFVBQVcsS0FDQSxNQUFyQnhpRSxFQUFFd2lFLFVBQVcsR0FBYyxLQUFPTixHQUFXLFdBQWEsSUFDN0RsaUUsRUFBRTJqRSxRQUFTLE1BSUYzakUsRUFBRWdtRSxRQUNadEQsRUFBTTJDLGlCQUFrQnBuRSxFQUFHK0IsRUFBRWdtRSxRQUFTL25FLElBSXZDLEdBQUsrQixFQUFFaW1FLGNBQytDLElBQW5Eam1FLEVBQUVpbUUsV0FBVzduRSxLQUFNd21FLEVBQWlCbEMsRUFBTzFpRSxJQUFpQjZuRCxHQUc5RCxPQUFPNmEsRUFBTStDLFFBZWQsR0FYQVAsRUFBVyxRQUdYSixFQUFpQng2RCxJQUFLdEssRUFBRWk4RCxVQUN4QnlHLEVBQU1wOEQsS0FBTXRHLEVBQUVrbUUsU0FDZHhELEVBQU1yZSxLQUFNcmtELEVBQUUrSixPQUdkcTZELEVBQVkzQixHQUErQlIsR0FBWWppRSxFQUFHdVEsRUFBU215RCxHQUs1RCxDQVNOLEdBUkFBLEVBQU16YSxXQUFhLEVBR2R5YyxHQUNKRyxFQUFtQjlWLFFBQVMsV0FBWSxDQUFFMlQsRUFBTzFpRSxJQUk3QzZuRCxFQUNKLE9BQU82YSxFQUlIMWlFLEVBQUV5akUsT0FBU3pqRSxFQUFFaytELFFBQVUsSUFDM0JzRyxFQUFlaDZELEVBQU93bEIsWUFBWSxXQUNqQzB5QyxFQUFNK0MsTUFBTyxhQUNYemxFLEVBQUVrK0QsVUFHTixJQUNDclcsR0FBWSxFQUNadWMsRUFBVStCLEtBQU1uQixFQUFnQjErRCxHQUMvQixNQUFRdkIsR0FHVCxHQUFLOGlELEVBQ0osTUFBTTlpRCxFQUlQdUIsR0FBTyxFQUFHdkIsU0FoQ1h1QixHQUFPLEVBQUcsZ0JBcUNYLFNBQVNBLEVBQU1rL0QsRUFBUVksRUFBa0JDLEVBQVdMLEdBQ25ELElBQUlNLEVBQVdKLEVBQVNuOEQsRUFBT3c4RCxFQUFVQyxFQUN4Q2QsRUFBYVUsRUFHVHZlLElBSUxBLEdBQVksRUFHUDJjLEdBQ0poNkQsRUFBTzBsQixhQUFjczBDLEdBS3RCSixPQUFZbHhCLEVBR1pveEIsRUFBd0IwQixHQUFXLEdBR25DdEQsRUFBTXphLFdBQWF1ZCxFQUFTLEVBQUksRUFBSSxFQUdwQ2MsRUFBWWQsR0FBVSxLQUFPQSxFQUFTLEtBQWtCLE1BQVhBLEVBR3hDYSxJQUNKRSxFQTdsQkosU0FBOEJ2bUUsRUFBRzBpRSxFQUFPMkQsR0FPdkMsSUFMQSxJQUFJSSxFQUFJamhFLEVBQU1raEUsRUFBZUMsRUFDNUI5akIsRUFBVzdpRCxFQUFFNmlELFNBQ2IyZixFQUFZeGlFLEVBQUV3aUUsVUFHWSxNQUFuQkEsRUFBVyxJQUNsQkEsRUFBVWpuRCxhQUNFMjNCLElBQVB1ekIsSUFDSkEsRUFBS3ptRSxFQUFFdWxFLFVBQVk3QyxFQUFNeUMsa0JBQW1CLGlCQUs5QyxHQUFLc0IsRUFDSixJQUFNamhFLEtBQVFxOUMsRUFDYixHQUFLQSxFQUFVcjlDLElBQVVxOUMsRUFBVXI5QyxHQUFPcUcsS0FBTTQ2RCxHQUFPLENBQ3REakUsRUFBVWp6QyxRQUFTL3BCLEdBQ25CLE1BTUgsR0FBS2c5RCxFQUFXLEtBQU82RCxFQUN0QkssRUFBZ0JsRSxFQUFXLE9BQ3JCLENBR04sSUFBTWg5RCxLQUFRNmdFLEVBQVksQ0FDekIsSUFBTTdELEVBQVcsSUFBT3hpRSxFQUFFOGpFLFdBQVl0K0QsRUFBTyxJQUFNZzlELEVBQVcsSUFBUSxDQUNyRWtFLEVBQWdCbGhFLEVBQ2hCLE1BRUttaEUsSUFDTEEsRUFBZ0JuaEUsR0FLbEJraEUsRUFBZ0JBLEdBQWlCQyxFQU1sQyxHQUFLRCxFQUlKLE9BSEtBLElBQWtCbEUsRUFBVyxJQUNqQ0EsRUFBVWp6QyxRQUFTbTNDLEdBRWJMLEVBQVdLLEdBMGlCTEUsQ0FBcUI1bUUsRUFBRzBpRSxFQUFPMkQsS0FJckNDLEdBQWFqMUIsRUFBT3dDLFFBQVMsU0FBVTd6QyxFQUFFd2lFLFlBQWUsSUFDN0R4aUUsRUFBRThqRSxXQUFZLGVBQWtCLGNBSWpDeUMsRUE1aUJILFNBQXNCdm1FLEVBQUd1bUUsRUFBVTdELEVBQU80RCxHQUN6QyxJQUFJTyxFQUFPcmlFLEVBQVNzaUUsRUFBTXBzQixFQUFLb0ksRUFDOUJnaEIsRUFBYSxHQUdidEIsRUFBWXhpRSxFQUFFd2lFLFVBQVV4M0QsUUFHekIsR0FBS3czRCxFQUFXLEdBQ2YsSUFBTXNFLEtBQVE5bUUsRUFBRThqRSxXQUNmQSxFQUFZZ0QsRUFBSy83RCxlQUFrQi9LLEVBQUU4akUsV0FBWWdELEdBT25ELElBSEF0aUUsRUFBVWcrRCxFQUFVam5ELFFBR1ovVyxHQWNQLEdBWkt4RSxFQUFFNmpFLGVBQWdCci9ELEtBQ3RCaytELEVBQU8xaUUsRUFBRTZqRSxlQUFnQnIvRCxJQUFjK2hFLElBSWxDempCLEdBQVF3akIsR0FBYXRtRSxFQUFFK21FLGFBQzVCUixFQUFXdm1FLEVBQUUrbUUsV0FBWVIsRUFBVXZtRSxFQUFFdWlFLFdBR3RDemYsRUFBT3QrQyxFQUNQQSxFQUFVZytELEVBQVVqbkQsUUFLbkIsR0FBaUIsTUFBWi9XLEVBRUpBLEVBQVVzK0MsT0FHSixHQUFjLE1BQVRBLEdBQWdCQSxJQUFTdCtDLEVBQVUsQ0FNOUMsS0FIQXNpRSxFQUFPaEQsRUFBWWhoQixFQUFPLElBQU10K0MsSUFBYXMvRCxFQUFZLEtBQU90L0QsSUFJL0QsSUFBTXFpRSxLQUFTL0MsRUFJZCxJQURBcHBCLEVBQU1tc0IsRUFBTTVsRSxNQUFPLE1BQ1QsS0FBUXVELElBR2pCc2lFLEVBQU9oRCxFQUFZaGhCLEVBQU8sSUFBTXBJLEVBQUssS0FDcENvcEIsRUFBWSxLQUFPcHBCLEVBQUssS0FDYixFQUdHLElBQVRvc0IsRUFDSkEsRUFBT2hELEVBQVkrQyxJQUdnQixJQUF4Qi9DLEVBQVkrQyxLQUN2QnJpRSxFQUFVazJDLEVBQUssR0FDZjhuQixFQUFVanpDLFFBQVNtckIsRUFBSyxLQUV6QixNQU9KLElBQWMsSUFBVG9zQixFQUdKLEdBQUtBLEdBQVE5bUUsRUFBRWduRSxPQUNkVCxFQUFXTyxFQUFNUCxRQUVqQixJQUNDQSxFQUFXTyxFQUFNUCxHQUNoQixNQUFReGhFLEdBQ1QsTUFBTyxDQUNOaXlCLE1BQU8sY0FDUGp0QixNQUFPKzhELEVBQU8vaEUsRUFBSSxzQkFBd0IrOUMsRUFBTyxPQUFTdCtDLElBU2pFLE1BQU8sQ0FBRXd5QixNQUFPLFVBQVczVCxLQUFNa2pELEdBK2NwQlUsQ0FBYWpuRSxFQUFHdW1FLEVBQVU3RCxFQUFPNEQsR0FHdkNBLEdBR0N0bUUsRUFBRStsRSxjQUNOUyxFQUFXOUQsRUFBTXlDLGtCQUFtQixvQkFFbkM5ekIsRUFBTyt4QixhQUFjaUIsR0FBYW1DLElBRW5DQSxFQUFXOUQsRUFBTXlDLGtCQUFtQixXQUVuQzl6QixFQUFPZ3lCLEtBQU1nQixHQUFhbUMsSUFLWixNQUFYaEIsR0FBNkIsU0FBWHhsRSxFQUFFd0YsS0FDeEJrZ0UsRUFBYSxZQUdTLE1BQVhGLEVBQ1hFLEVBQWEsZUFJYkEsRUFBYWEsRUFBU3Z2QyxNQUN0Qmt2QyxFQUFVSyxFQUFTbGpELEtBRW5CaWpELElBREF2OEQsRUFBUXc4RCxFQUFTeDhELFVBTWxCQSxFQUFRMjdELEdBQ0hGLEdBQVdFLElBQ2ZBLEVBQWEsUUFDUkYsRUFBUyxJQUNiQSxFQUFTLEtBTVo5QyxFQUFNOEMsT0FBU0EsRUFDZjlDLEVBQU1nRCxZQUFlVSxHQUFvQlYsR0FBZSxHQUduRFksRUFDSjNnQixFQUFTaUIsWUFBYWdlLEVBQWlCLENBQUVzQixFQUFTUixFQUFZaEQsSUFFOUQvYyxFQUFTb0IsV0FBWTZkLEVBQWlCLENBQUVsQyxFQUFPZ0QsRUFBWTM3RCxJQUk1RDI0RCxFQUFNcUMsV0FBWUEsR0FDbEJBLE9BQWE3eEIsRUFFUnd4QixHQUNKRyxFQUFtQjlWLFFBQVN1WCxFQUFZLGNBQWdCLFlBQ3ZELENBQUU1RCxFQUFPMWlFLEVBQUdzbUUsRUFBWUosRUFBVW44RCxJQUlwQys2RCxFQUFpQnhmLFNBQVVzZixFQUFpQixDQUFFbEMsRUFBT2dELElBRWhEaEIsSUFDSkcsRUFBbUI5VixRQUFTLGVBQWdCLENBQUUyVCxFQUFPMWlFLE1BRzNDcXhDLEVBQU84eEIsUUFDaEI5eEIsRUFBTzdtQixNQUFNdWtDLFFBQVMsY0FLekIsT0FBTzJULEdBR1J3RSxRQUFTLFNBQVUvOEMsRUFBSzlHLEVBQU0wUyxHQUM3QixPQUFPc2IsRUFBT3Z5QyxJQUFLcXJCLEVBQUs5RyxFQUFNMFMsRUFBVSxTQUd6Q294QyxVQUFXLFNBQVVoOUMsRUFBSzRMLEdBQ3pCLE9BQU9zYixFQUFPdnlDLElBQUtxckIsT0FBSytvQixFQUFXbmQsRUFBVSxhQUkvQ3NiLEVBQU9ZLEtBQU0sQ0FBRSxNQUFPLFNBQVUsU0FBVW1DLEVBQUkrUCxHQUM3QzlTLEVBQVE4UyxHQUFXLFNBQVVoNkIsRUFBSzlHLEVBQU0wUyxFQUFVdndCLEdBVWpELE9BUEtpckMsRUFBWXB0QixLQUNoQjdkLEVBQU9BLEdBQVF1d0IsRUFDZkEsRUFBVzFTLEVBQ1hBLE9BQU82dkIsR0FJRDdCLEVBQU84eUIsS0FBTTl5QixFQUFPN0ksT0FBUSxDQUNsQ3JlLElBQUtBLEVBQ0wza0IsS0FBTTIrQyxFQUNOb2UsU0FBVS84RCxFQUNWNmQsS0FBTUEsRUFDTjZpRCxRQUFTbndDLEdBQ1BzYixFQUFPNEIsY0FBZTlvQixJQUFTQSxRQUlwQ2tuQixFQUFPNHlCLGVBQWUsU0FBVWprRSxHQUMvQixJQUFJL0IsRUFDSixJQUFNQSxLQUFLK0IsRUFBRWdtRSxRQUNhLGlCQUFwQi9uRSxFQUFFOE0sZ0JBQ04vSyxFQUFFMGpFLFlBQWMxakUsRUFBRWdtRSxRQUFTL25FLElBQU8sT0FNckNvekMsRUFBT3doQixTQUFXLFNBQVUxb0MsRUFBSzVaLEVBQVN5Z0MsR0FDekMsT0FBT0ssRUFBTzh5QixLQUFNLENBQ25CaDZDLElBQUtBLEVBR0wza0IsS0FBTSxNQUNOKzhELFNBQVUsU0FDVjFwQixPQUFPLEVBQ1A0cUIsT0FBTyxFQUNQN3pCLFFBQVEsRUFLUmswQixXQUFZLENBQ1gsY0FBZSxjQUVoQmlELFdBQVksU0FBVVIsR0FDckJsMUIsRUFBT3FDLFdBQVk2eUIsRUFBVWgyRCxFQUFTeWdDLE9BTXpDSyxFQUFPRSxHQUFHL0ksT0FBUSxDQUNqQjQrQixRQUFTLFNBQVVyNEIsR0FDbEIsSUFBSXllLEVBeUJKLE9BdkJLL3BELEtBQU0sS0FDTGd0QyxFQUFZMUIsS0FDaEJBLEVBQU9BLEVBQUszd0MsS0FBTXFGLEtBQU0sS0FJekIrcEQsRUFBT25jLEVBQVF0QyxFQUFNdHJDLEtBQU0sR0FBSTBNLGVBQWdCaWlDLEdBQUksR0FBSVcsT0FBTyxHQUV6RHR2QyxLQUFNLEdBQUlrVCxZQUNkNjJDLEVBQUt6cEIsYUFBY3RnQyxLQUFNLElBRzFCK3BELEVBQUsxc0QsS0FBSyxXQUdULElBRkEsSUFBSW94QyxFQUFPenVDLEtBRUh5dUMsRUFBS20xQixtQkFDWm4xQixFQUFPQSxFQUFLbTFCLGtCQUdiLE9BQU9uMUIsS0FDSm9oQixPQUFRN3ZELE9BR05BLE1BR1I2akUsVUFBVyxTQUFVdjRCLEdBQ3BCLE9BQUswQixFQUFZMUIsR0FDVHRyQyxLQUFLd3VDLE1BQU0sU0FBVWgwQyxHQUMzQm96QyxFQUFRNXRDLE1BQU82akUsVUFBV3Y0QixFQUFLM3dDLEtBQU1xRixLQUFNeEYsT0FJdEN3RixLQUFLd3VDLE1BQU0sV0FDakIsSUFBSXFRLEVBQU9qUixFQUFRNXRDLE1BQ2xCby9DLEVBQVdQLEVBQUtPLFdBRVpBLEVBQVNoaEQsT0FDYmdoRCxFQUFTdWtCLFFBQVNyNEIsR0FHbEJ1VCxFQUFLZ1IsT0FBUXZrQixPQUtoQnllLEtBQU0sU0FBVXplLEdBQ2YsSUFBSXc0QixFQUFpQjkyQixFQUFZMUIsR0FFakMsT0FBT3RyQyxLQUFLd3VDLE1BQU0sU0FBVWgwQyxHQUMzQm96QyxFQUFRNXRDLE1BQU8yakUsUUFBU0csRUFBaUJ4NEIsRUFBSzN3QyxLQUFNcUYsS0FBTXhGLEdBQU04d0MsT0FJbEV5NEIsT0FBUSxTQUFVbDJCLEdBSWpCLE9BSEE3dEMsS0FBS29yQyxPQUFReUMsR0FBVytRLElBQUssUUFBU3BRLE1BQU0sV0FDM0NaLEVBQVE1dEMsTUFBT2l3RCxZQUFhandELEtBQUtxMEMsZUFFM0JyMEMsUUFLVDR0QyxFQUFPa0ssS0FBS3JGLFFBQVEya0IsT0FBUyxTQUFVM29CLEdBQ3RDLE9BQVFiLEVBQU9rSyxLQUFLckYsUUFBUXV4QixRQUFTdjFCLElBRXRDYixFQUFPa0ssS0FBS3JGLFFBQVF1eEIsUUFBVSxTQUFVdjFCLEdBQ3ZDLFNBQVdBLEVBQUs2akIsYUFBZTdqQixFQUFLdzFCLGNBQWdCeDFCLEVBQUt5bUIsaUJBQWlCOTJELFNBTTNFd3ZDLEVBQU82eEIsYUFBYXlFLElBQU0sV0FDekIsSUFDQyxPQUFPLElBQUluOUQsRUFBT285RCxlQUNqQixNQUFRN2lFLE1BR1gsSUFBSThpRSxHQUFtQixDQUdyQkMsRUFBRyxJQUlIQyxLQUFNLEtBRVBDLEdBQWUzMkIsRUFBTzZ4QixhQUFheUUsTUFFcENuM0IsRUFBUXkzQixPQUFTRCxJQUFrQixvQkFBcUJBLEdBQ3hEeDNCLEVBQVEyekIsS0FBTzZELEtBQWlCQSxHQUVoQzMyQixFQUFPNnlCLGVBQWUsU0FBVTN6RCxHQUMvQixJQUFJd2xCLEVBQVVteUMsRUFHZCxHQUFLMTNCLEVBQVF5M0IsTUFBUUQsS0FBaUJ6M0QsRUFBUXExRCxZQUM3QyxNQUFPLENBQ05PLEtBQU0sU0FBVUgsRUFBUy9KLEdBQ3hCLElBQUloK0QsRUFDSDBwRSxFQUFNcDNELEVBQVFvM0QsTUFXZixHQVRBQSxFQUFJUSxLQUNINTNELEVBQVEvSyxLQUNSK0ssRUFBUTRaLElBQ1I1WixFQUFRa3pELE1BQ1JsekQsRUFBUTYzRCxTQUNSNzNELEVBQVFzWixVQUlKdFosRUFBUTgzRCxVQUNaLElBQU1wcUUsS0FBS3NTLEVBQVE4M0QsVUFDbEJWLEVBQUsxcEUsR0FBTXNTLEVBQVE4M0QsVUFBV3BxRSxHQW1CaEMsSUFBTUEsS0FkRHNTLEVBQVFnMUQsVUFBWW9DLEVBQUlyQyxrQkFDNUJxQyxFQUFJckMsaUJBQWtCLzBELEVBQVFnMUQsVUFRekJoMUQsRUFBUXExRCxhQUFnQkksRUFBUyxzQkFDdENBLEVBQVMsb0JBQXVCLGtCQUl0QkEsRUFDVjJCLEVBQUl0QyxpQkFBa0JwbkUsRUFBRytuRSxFQUFTL25FLElBSW5DODNCLEVBQVcsU0FBVXZ3QixHQUNwQixPQUFPLFdBQ0R1d0IsSUFDSkEsRUFBV215QyxFQUFnQlAsRUFBSVcsT0FDOUJYLEVBQUlZLFFBQVVaLEVBQUlhLFFBQVViLEVBQUljLFVBQy9CZCxFQUFJZSxtQkFBcUIsS0FFYixVQUFUbGpFLEVBQ0ptaUUsRUFBSWxDLFFBQ2dCLFVBQVRqZ0UsRUFLZ0IsaUJBQWZtaUUsRUFBSW5DLE9BQ2Z2SixFQUFVLEVBQUcsU0FFYkEsRUFHQzBMLEVBQUluQyxPQUNKbUMsRUFBSWpDLFlBSU56SixFQUNDNEwsR0FBa0JGLEVBQUluQyxTQUFZbUMsRUFBSW5DLE9BQ3RDbUMsRUFBSWpDLFdBSytCLFVBQWpDaUMsRUFBSWdCLGNBQWdCLFNBQ00saUJBQXJCaEIsRUFBSWlCLGFBQ1YsQ0FBRUMsT0FBUWxCLEVBQUlwQixVQUNkLENBQUV0OEMsS0FBTTA5QyxFQUFJaUIsY0FDYmpCLEVBQUl2Qyw0QkFRVHVDLEVBQUlXLE9BQVN2eUMsSUFDYm15QyxFQUFnQlAsRUFBSVksUUFBVVosRUFBSWMsVUFBWTF5QyxFQUFVLGNBS25DbWQsSUFBaEJ5MEIsRUFBSWEsUUFDUmIsRUFBSWEsUUFBVU4sRUFFZFAsRUFBSWUsbUJBQXFCLFdBR0EsSUFBbkJmLEVBQUkxZixZQU1SejlDLEVBQU93bEIsWUFBWSxXQUNiK0YsR0FDSm15QyxRQVFMbnlDLEVBQVdBLEVBQVUsU0FFckIsSUFHQzR4QyxFQUFJeEIsS0FBTTUxRCxFQUFRdTFELFlBQWN2MUQsRUFBUThTLE1BQVEsTUFDL0MsTUFBUXRlLEdBR1QsR0FBS2d4QixFQUNKLE1BQU1oeEIsSUFLVDBnRSxNQUFPLFdBQ0QxdkMsR0FDSkEsU0FXTHNiLEVBQU80eUIsZUFBZSxTQUFVamtFLEdBQzFCQSxFQUFFNGxFLGNBQ041bEUsRUFBRTZpRCxTQUFTNVIsUUFBUyxNQUt0QkksRUFBTzB5QixVQUFXLENBQ2pCSixRQUFTLENBQ1IxeUIsT0FBUSw2RkFHVDRSLFNBQVUsQ0FDVDVSLE9BQVEsMkJBRVQ2eUIsV0FBWSxDQUNYLGNBQWUsU0FBVTc1QyxHQUV4QixPQURBb25CLEVBQU9xQyxXQUFZenBCLEdBQ1pBLE1BTVZvbkIsRUFBTzR5QixjQUFlLFVBQVUsU0FBVWprRSxRQUN4Qmt6QyxJQUFabHpDLEVBQUU2NEMsUUFDTjc0QyxFQUFFNjRDLE9BQVEsR0FFTjc0QyxFQUFFNGxFLGNBQ041bEUsRUFBRXdGLEtBQU8sVUFLWDZyQyxFQUFPNnlCLGNBQWUsVUFBVSxTQUFVbGtFLEdBSXhDLElBQUlpeEMsRUFBUWxiLEVBRGIsR0FBSy8xQixFQUFFNGxFLGFBQWU1bEUsRUFBRThvRSxZQUV2QixNQUFPLENBQ04zQyxLQUFNLFNBQVU1aEIsRUFBRzBYLEdBQ2xCaHJCLEVBQVNJLEVBQVEsWUFDZm9LLEtBQU16N0MsRUFBRThvRSxhQUFlLElBQ3ZCM2YsS0FBTSxDQUFFNGYsUUFBUy9vRSxFQUFFZ3BFLGNBQWUvNUIsSUFBS2p2QyxFQUFFbXFCLE1BQ3pDaWtDLEdBQUksYUFBY3I0QixFQUFXLFNBQVVrekMsR0FDdkNoNEIsRUFBT2lVLFNBQ1BudkIsRUFBVyxLQUNOa3pDLEdBQ0poTixFQUF1QixVQUFiZ04sRUFBSXpqRSxLQUFtQixJQUFNLElBQUt5akUsRUFBSXpqRSxRQUtuRHZELEVBQVNrdkMsS0FBS3QvQixZQUFhby9CLEVBQVEsS0FFcEN3MEIsTUFBTyxXQUNEMXZDLEdBQ0pBLFNBVUwsSUFxR0t6bUIsR0FyR0Q0NUQsR0FBZSxHQUNsQkMsR0FBUyxvQkFHVjkzQixFQUFPMHlCLFVBQVcsQ0FDakJxRixNQUFPLFdBQ1BDLGNBQWUsV0FDZCxJQUFJdHpDLEVBQVdtekMsR0FBYXY3QixPQUFXMEQsRUFBTzhCLFFBQVUsSUFBUXRDLEdBQU1zRCxPQUV0RSxPQURBMXdDLEtBQU1zeUIsSUFBYSxFQUNaQSxLQUtUc2IsRUFBTzR5QixjQUFlLGNBQWMsU0FBVWprRSxFQUFHc3BFLEVBQWtCNUcsR0FFbEUsSUFBSTZHLEVBQWNDLEVBQWFDLEVBQzlCQyxHQUF1QixJQUFaMXBFLEVBQUVvcEUsUUFBcUJELEdBQU90OUQsS0FBTTdMLEVBQUVtcUIsS0FDaEQsTUFDa0IsaUJBQVhucUIsRUFBRXFqQixNQUU2QyxLQURuRHJqQixFQUFFMGpFLGFBQWUsSUFDakJ6dUQsUUFBUyxzQ0FDWGswRCxHQUFPdDlELEtBQU03TCxFQUFFcWpCLE9BQVUsUUFJNUIsR0FBS3FtRCxHQUFpQyxVQUFyQjFwRSxFQUFFd2lFLFVBQVcsR0E4RDdCLE9BM0RBK0csRUFBZXZwRSxFQUFFcXBFLGNBQWdCNTRCLEVBQVl6d0MsRUFBRXFwRSxlQUM5Q3JwRSxFQUFFcXBFLGdCQUNGcnBFLEVBQUVxcEUsY0FHRUssRUFDSjFwRSxFQUFHMHBFLEdBQWExcEUsRUFBRzBwRSxHQUFXN2pFLFFBQVNzakUsR0FBUSxLQUFPSSxJQUMvQixJQUFadnBFLEVBQUVvcEUsUUFDYnBwRSxFQUFFbXFCLE1BQVMyMkMsR0FBT2oxRCxLQUFNN0wsRUFBRW1xQixLQUFRLElBQU0sS0FBUW5xQixFQUFFb3BFLE1BQVEsSUFBTUcsR0FJakV2cEUsRUFBRThqRSxXQUFZLGVBQWtCLFdBSS9CLE9BSE0yRixHQUNMcDRCLEVBQU90bkMsTUFBT3cvRCxFQUFlLG1CQUV2QkUsRUFBbUIsSUFJM0J6cEUsRUFBRXdpRSxVQUFXLEdBQU0sT0FHbkJnSCxFQUFjaC9ELEVBQVErK0QsR0FDdEIvK0QsRUFBUSsrRCxHQUFpQixXQUN4QkUsRUFBb0I3bkUsV0FJckI4Z0UsRUFBTWhkLFFBQVEsZ0JBR1F4UyxJQUFoQnMyQixFQUNKbjRCLEVBQVE3bUMsR0FBUzAwRCxXQUFZcUssR0FJN0IvK0QsRUFBUSsrRCxHQUFpQkMsRUFJckJ4cEUsRUFBR3VwRSxLQUdQdnBFLEVBQUVxcEUsY0FBZ0JDLEVBQWlCRCxjQUduQ0gsR0FBYS9pRSxLQUFNb2pFLElBSWZFLEdBQXFCaDVCLEVBQVkrNEIsSUFDckNBLEVBQWFDLEVBQW1CLElBR2pDQSxFQUFvQkQsT0FBY3QyQixLQUk1QixZQVlUMUMsRUFBUW01QixxQkFDSHI2RCxHQUFPck4sRUFBU3MyQixlQUFlb3hDLG1CQUFvQixJQUFLcjZELE1BQ3ZEbUMsVUFBWSw2QkFDaUIsSUFBM0JuQyxHQUFLd29DLFdBQVdqMkMsUUFReEJ3dkMsRUFBT29SLFVBQVksU0FBVXAvQixFQUFNMWYsRUFBU2ltRSxHQUMzQyxNQUFxQixpQkFBVHZtRCxFQUNKLElBRWdCLGtCQUFaMWYsSUFDWGltRSxFQUFjam1FLEVBQ2RBLEdBQVUsR0FLTEEsSUFJQTZzQyxFQUFRbTVCLHFCQU1abjBELEdBTEE3UixFQUFVMUIsRUFBU3MyQixlQUFlb3hDLG1CQUFvQixLQUt2Q3JoRSxjQUFlLFNBQ3pCbWtCLEtBQU94cUIsRUFBUytrQixTQUFTeUYsS0FDOUI5b0IsRUFBUXd0QyxLQUFLdC9CLFlBQWEyRCxJQUUxQjdSLEVBQVUxQixHQUtab3JELEdBQVd1YyxHQUFlLElBRDFCQyxFQUFTM25CLEVBQVc3SixLQUFNaDFCLElBS2xCLENBQUUxZixFQUFRMkUsY0FBZXVoRSxFQUFRLE1BR3pDQSxFQUFTemMsR0FBZSxDQUFFL3BDLEdBQVExZixFQUFTMHBELEdBRXRDQSxHQUFXQSxFQUFReHJELFFBQ3ZCd3ZDLEVBQVFnYyxHQUFVbkksU0FHWjdULEVBQU9VLE1BQU8sR0FBSTgzQixFQUFPL3hCLGNBbENoQyxJQUFJdGlDLEVBQU1xMEQsRUFBUXhjLEdBeUNuQmhjLEVBQU9FLEdBQUd3ZixLQUFPLFNBQVU1bUMsRUFBSzIvQyxFQUFRL3pDLEdBQ3ZDLElBQUl1YixFQUFVOXJDLEVBQU0rZ0UsRUFDbkJqa0IsRUFBTzcrQyxLQUNQK3FELEVBQU1ya0MsRUFBSWxWLFFBQVMsS0FzRHBCLE9BcERLdTVDLEdBQU8sSUFDWGxkLEVBQVd5dEIsR0FBa0I1MEMsRUFBSW5mLE1BQU93akQsSUFDeENya0MsRUFBTUEsRUFBSW5mLE1BQU8sRUFBR3dqRCxJQUloQi9kLEVBQVlxNUIsSUFHaEIvekMsRUFBVyt6QyxFQUNYQSxPQUFTNTJCLEdBR0U0MkIsR0FBNEIsaUJBQWxCLElBQU9BLEVBQVAsY0FBT0EsTUFDNUJ0a0UsRUFBTyxRQUlIODhDLEVBQUt6Z0QsT0FBUyxHQUNsQnd2QyxFQUFPOHlCLEtBQU0sQ0FDWmg2QyxJQUFLQSxFQUtMM2tCLEtBQU1BLEdBQVEsTUFDZCs4RCxTQUFVLE9BQ1ZsL0MsS0FBTXltRCxJQUNIeGpFLE1BQU0sU0FBVXNpRSxHQUduQnJDLEVBQVcza0UsVUFFWDBnRCxFQUFLdlQsS0FBTXVDLEVBSVZELEVBQVEsU0FBVWlpQixPQUFRamlCLEVBQU9vUixVQUFXbW1CLElBQWlCcHVCLEtBQU1sSixHQUduRXMzQixNQUtFbGpCLE9BQVEzdkIsR0FBWSxTQUFVMnNDLEVBQU84QyxHQUN4Q2xqQixFQUFLclEsTUFBTSxXQUNWbGMsRUFBU3p1QixNQUFPN0QsS0FBTThpRSxHQUFZLENBQUU3RCxFQUFNa0csYUFBY3BELEVBQVE5QyxTQUs1RGovRCxNQU1SNHRDLEVBQU9rSyxLQUFLckYsUUFBUTZ6QixTQUFXLFNBQVU3M0IsR0FDeEMsT0FBT2IsRUFBT2lCLEtBQU1qQixFQUFPbXNCLFFBQVEsU0FBVWpzQixHQUM1QyxPQUFPVyxJQUFTWCxFQUFHVyxRQUNoQnJ3QyxRQU1Md3ZDLEVBQU9qbEIsT0FBUyxDQUNmNDlDLFVBQVcsU0FBVTkzQixFQUFNM2hDLEVBQVN0UyxHQUNuQyxJQUFJZ3NFLEVBQWFDLEVBQVNDLEVBQVdDLEVBQVFDLEVBQVdDLEVBQ3ZEelUsRUFBV3hrQixFQUFPeVosSUFBSzVZLEVBQU0sWUFDN0JxNEIsRUFBVWw1QixFQUFRYSxHQUNsQnh1QyxFQUFRLEdBR1MsV0FBYm15RCxJQUNKM2pCLEVBQUtsOUIsTUFBTTZnRCxTQUFXLFlBR3ZCd1UsRUFBWUUsRUFBUW4rQyxTQUNwQis5QyxFQUFZOTRCLEVBQU95WixJQUFLNVksRUFBTSxPQUM5Qm80QixFQUFhajVCLEVBQU95WixJQUFLNVksRUFBTSxTQUNJLGFBQWIyakIsR0FBd0MsVUFBYkEsS0FDOUNzVSxFQUFZRyxHQUFhcjFELFFBQVMsU0FBWSxHQU1oRG0xRCxHQURBSCxFQUFjTSxFQUFRMVUsWUFDRDdzQixJQUNyQmtoQyxFQUFVRCxFQUFZbmhDLE9BR3RCc2hDLEVBQVNsVSxXQUFZaVUsSUFBZSxFQUNwQ0QsRUFBVWhVLFdBQVlvVSxJQUFnQixHQUdsQzc1QixFQUFZbGdDLEtBR2hCQSxFQUFVQSxFQUFRblMsS0FBTTh6QyxFQUFNajBDLEVBQUdvekMsRUFBTzdJLE9BQVEsR0FBSTZoQyxLQUdqQyxNQUFmOTVELEVBQVF5NEIsTUFDWnRsQyxFQUFNc2xDLElBQVF6NEIsRUFBUXk0QixJQUFNcWhDLEVBQVVyaEMsSUFBUW9oQyxHQUUxQixNQUFoQjc1RCxFQUFRdTRCLE9BQ1pwbEMsRUFBTW9sQyxLQUFTdjRCLEVBQVF1NEIsS0FBT3VoQyxFQUFVdmhDLEtBQVNvaEMsR0FHN0MsVUFBVzM1RCxFQUNmQSxFQUFRaTZELE1BQU1wc0UsS0FBTTh6QyxFQUFNeHVDLElBR0EsaUJBQWRBLEVBQU1zbEMsTUFDakJ0bEMsRUFBTXNsQyxLQUFPLE1BRWEsaUJBQWZ0bEMsRUFBTW9sQyxPQUNqQnBsQyxFQUFNb2xDLE1BQVEsTUFFZnloQyxFQUFRemYsSUFBS3BuRCxNQUtoQjJ0QyxFQUFPRSxHQUFHL0ksT0FBUSxDQUdqQnBjLE9BQVEsU0FBVTdiLEdBR2pCLEdBQUszTyxVQUFVQyxPQUNkLFlBQW1CcXhDLElBQVozaUMsRUFDTjlNLEtBQ0FBLEtBQUt3dUMsTUFBTSxTQUFVaDBDLEdBQ3BCb3pDLEVBQU9qbEIsT0FBTzQ5QyxVQUFXdm1FLEtBQU04TSxFQUFTdFMsTUFJM0MsSUFBSXdzRSxFQUFNQyxFQUNUeDRCLEVBQU96dUMsS0FBTSxHQUVkLE9BQU15dUMsRUFRQUEsRUFBS3ltQixpQkFBaUI5MkQsUUFLNUI0b0UsRUFBT3Y0QixFQUFLZ25CLHdCQUNad1IsRUFBTXg0QixFQUFLL2hDLGNBQWNvZCxZQUNsQixDQUNOeWIsSUFBS3loQyxFQUFLemhDLElBQU0waEMsRUFBSUMsWUFDcEI3aEMsS0FBTTJoQyxFQUFLM2hDLEtBQU80aEMsRUFBSUUsY0FSZixDQUFFNWhDLElBQUssRUFBR0YsS0FBTSxRQVR4QixHQXVCRCtzQixTQUFVLFdBQ1QsR0FBTXB5RCxLQUFNLEdBQVosQ0FJQSxJQUFJb25FLEVBQWN6K0MsRUFBUTRrQixFQUN6QmtCLEVBQU96dUMsS0FBTSxHQUNicW5FLEVBQWUsQ0FBRTloQyxJQUFLLEVBQUdGLEtBQU0sR0FHaEMsR0FBd0MsVUFBbkN1SSxFQUFPeVosSUFBSzVZLEVBQU0sWUFHdEI5bEIsRUFBUzhsQixFQUFLZ25CLDRCQUVSLENBT04sSUFOQTlzQyxFQUFTM29CLEtBQUsyb0IsU0FJZDRrQixFQUFNa0IsRUFBSy9oQyxjQUNYMDZELEVBQWUzNEIsRUFBSzI0QixjQUFnQjc1QixFQUFJOVgsZ0JBQ2hDMnhDLElBQ0xBLElBQWlCNzVCLEVBQUkxaEMsTUFBUXU3RCxJQUFpQjc1QixFQUFJOVgsa0JBQ1QsV0FBM0NtWSxFQUFPeVosSUFBSytmLEVBQWMsYUFFMUJBLEVBQWVBLEVBQWFsMEQsV0FFeEJrMEQsR0FBZ0JBLElBQWlCMzRCLEdBQWtDLElBQTFCMjRCLEVBQWE3NEQsWUFHMUQ4NEQsRUFBZXo1QixFQUFRdzVCLEdBQWV6K0MsVUFDekI0YyxLQUFPcUksRUFBT3laLElBQUsrZixFQUFjLGtCQUFrQixHQUNoRUMsRUFBYWhpQyxNQUFRdUksRUFBT3laLElBQUsrZixFQUFjLG1CQUFtQixJQUtwRSxNQUFPLENBQ043aEMsSUFBSzVjLEVBQU80YyxJQUFNOGhDLEVBQWE5aEMsSUFBTXFJLEVBQU95WixJQUFLNVksRUFBTSxhQUFhLEdBQ3BFcEosS0FBTTFjLEVBQU8wYyxLQUFPZ2lDLEVBQWFoaUMsS0FBT3VJLEVBQU95WixJQUFLNVksRUFBTSxjQUFjLE1BYzFFMjRCLGFBQWMsV0FDYixPQUFPcG5FLEtBQUszQyxLQUFLLFdBR2hCLElBRkEsSUFBSStwRSxFQUFlcG5FLEtBQUtvbkUsYUFFaEJBLEdBQTJELFdBQTNDeDVCLEVBQU95WixJQUFLK2YsRUFBYyxhQUNqREEsRUFBZUEsRUFBYUEsYUFHN0IsT0FBT0EsR0FBZ0IzeEMsU0FNMUJtWSxFQUFPWSxLQUFNLENBQUVsSixXQUFZLGNBQWVFLFVBQVcsZ0JBQWlCLFNBQVVrYixFQUFRZ0YsR0FDdkYsSUFBSW5nQixFQUFNLGdCQUFrQm1nQixFQUU1QjlYLEVBQU9FLEdBQUk0UyxHQUFXLFNBQVU3akQsR0FDL0IsT0FBTzZuRCxFQUFRMWtELE1BQU0sU0FBVXl1QyxFQUFNaVMsRUFBUTdqRCxHQUc1QyxJQUFJb3FFLEVBT0osR0FOSy81QixFQUFVdUIsR0FDZHc0QixFQUFNeDRCLEVBQ3VCLElBQWxCQSxFQUFLbGdDLFdBQ2hCMDRELEVBQU14NEIsRUFBSzNrQixrQkFHQzJsQixJQUFSNXlDLEVBQ0osT0FBT29xRSxFQUFNQSxFQUFLdmhCLEdBQVNqWCxFQUFNaVMsR0FHN0J1bUIsRUFDSkEsRUFBSUssU0FDRi9oQyxFQUFZMGhDLEVBQUlFLFlBQVZ0cUUsRUFDUDBvQyxFQUFNMW9DLEVBQU1vcUUsRUFBSUMsYUFJakJ6NEIsRUFBTWlTLEdBQVc3akQsSUFFaEI2akQsRUFBUTdqRCxFQUFLc0IsVUFBVUMsWUFVNUJ3dkMsRUFBT1ksS0FBTSxDQUFFLE1BQU8sU0FBVSxTQUFVbUMsRUFBSStVLEdBQzdDOVgsRUFBT3luQixTQUFVM1AsR0FBUzRMLEdBQWN2a0IsRUFBUStsQixlQUMvQyxTQUFVcmtCLEVBQU13aUIsR0FDZixHQUFLQSxFQUlKLE9BSEFBLEVBQVdELEdBQVF2aUIsRUFBTWlYLEdBR2xCK0ssR0FBVXJvRCxLQUFNNm9ELEdBQ3RCcmpCLEVBQVFhLEdBQU8yakIsV0FBWTFNLEdBQVMsS0FDcEN1TCxRQVFMcmpCLEVBQU9ZLEtBQU0sQ0FBRSs0QixPQUFRLFNBQVVDLE1BQU8sVUFBVyxTQUFVenNFLEVBQU1nSCxHQUNsRTZyQyxFQUFPWSxLQUFNLENBQUVvbkIsUUFBUyxRQUFVNzZELEVBQU1pbEQsUUFBU2orQyxFQUFNLEdBQUksUUFBVWhILElBQ3BFLFNBQVUwc0UsRUFBY0MsR0FHeEI5NUIsRUFBT0UsR0FBSTQ1QixHQUFhLFNBQVUvUixFQUFRbDZELEdBQ3pDLElBQUlrcEQsRUFBWXhtRCxVQUFVQyxTQUFZcXBFLEdBQWtDLGtCQUFYOVIsR0FDNURkLEVBQVE0UyxLQUE2QixJQUFYOVIsSUFBNkIsSUFBVmw2RCxFQUFpQixTQUFXLFVBRTFFLE9BQU9pcEQsRUFBUTFrRCxNQUFNLFNBQVV5dUMsRUFBTTFzQyxFQUFNdEcsR0FDMUMsSUFBSTh4QyxFQUVKLE9BQUtMLEVBQVV1QixHQUd5QixJQUFoQ2k1QixFQUFTbDJELFFBQVMsU0FDeEJpOUIsRUFBTSxRQUFVMXpDLEdBQ2hCMHpDLEVBQUtqd0MsU0FBU2kzQixnQkFBaUIsU0FBVzE2QixHQUlyQixJQUFsQjB6QyxFQUFLbGdDLFVBQ1RnL0IsRUFBTWtCLEVBQUtoWixnQkFJSmpiLEtBQUs4NUMsSUFDWDdsQixFQUFLNWlDLEtBQU0sU0FBVzlRLEdBQVF3eUMsRUFBSyxTQUFXeHlDLEdBQzlDMHpDLEVBQUs1aUMsS0FBTSxTQUFXOVEsR0FBUXd5QyxFQUFLLFNBQVd4eUMsR0FDOUN3eUMsRUFBSyxTQUFXeHlDLFVBSUQwMEMsSUFBVmgwQyxFQUdObXlDLEVBQU95WixJQUFLNVksRUFBTTFzQyxFQUFNOHlELEdBR3hCam5CLEVBQU9yOEIsTUFBT2s5QixFQUFNMXNDLEVBQU10RyxFQUFPbzVELEtBQ2hDOXlELEVBQU00aUQsRUFBWWdSLE9BQVNsbUIsRUFBV2tWLFVBTTVDL1csRUFBT1ksS0FBTSxDQUNaLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxhQUNFLFNBQVVtQyxFQUFJNXVDLEdBQ2hCNnJDLEVBQU9FLEdBQUkvckMsR0FBUyxTQUFVK3JDLEdBQzdCLE9BQU85dEMsS0FBSzJxRCxHQUFJNW9ELEVBQU0rckMsT0FPeEJGLEVBQU9FLEdBQUcvSSxPQUFRLENBRWpCL29DLEtBQU0sU0FBVTR1RCxFQUFPaHJDLEVBQU1rdUIsR0FDNUIsT0FBTzl0QyxLQUFLMnFELEdBQUlDLEVBQU8sS0FBTWhyQyxFQUFNa3VCLElBRXBDNjVCLE9BQVEsU0FBVS9jLEVBQU85YyxHQUN4QixPQUFPOXRDLEtBQUsrcUQsSUFBS0gsRUFBTyxLQUFNOWMsSUFHL0I4NUIsU0FBVSxTQUFVLzVCLEVBQVUrYyxFQUFPaHJDLEVBQU1rdUIsR0FDMUMsT0FBTzl0QyxLQUFLMnFELEdBQUlDLEVBQU8vYyxFQUFVanVCLEVBQU1rdUIsSUFFeEMrNUIsV0FBWSxTQUFVaDZCLEVBQVUrYyxFQUFPOWMsR0FHdEMsT0FBNEIsSUFBckIzdkMsVUFBVUMsT0FDaEI0QixLQUFLK3FELElBQUtsZCxFQUFVLE1BQ3BCN3RDLEtBQUsrcUQsSUFBS0gsRUFBTy9jLEdBQVksS0FBTUMsSUFHckNnNkIsTUFBTyxTQUFVQyxFQUFRQyxHQUN4QixPQUFPaG9FLEtBQUs4dEQsV0FBWWlhLEdBQVNoYSxXQUFZaWEsR0FBU0QsTUFJeERuNkIsRUFBT1ksS0FBTSx3TEFFZ0RoeEMsTUFBTyxNQUNuRSxTQUFVbXpDLEVBQUk1MUMsR0FHYjZ5QyxFQUFPRSxHQUFJL3lDLEdBQVMsU0FBVTZrQixFQUFNa3VCLEdBQ25DLE9BQU8zdkMsVUFBVUMsT0FBUyxFQUN6QjRCLEtBQUsycUQsR0FBSTV2RCxFQUFNLEtBQU02a0IsRUFBTWt1QixHQUMzQjl0QyxLQUFLc3JELFFBQVN2d0QsT0FTbEIsSUFBSTYzQyxHQUFRLHFDQU1aaEYsRUFBT3E2QixNQUFRLFNBQVVuNkIsRUFBSTV0QyxHQUM1QixJQUFJKzJDLEVBQUs2QyxFQUFNbXVCLEVBVWYsR0FSd0IsaUJBQVovbkUsSUFDWCsyQyxFQUFNbkosRUFBSTV0QyxHQUNWQSxFQUFVNHRDLEVBQ1ZBLEVBQUttSixHQUtBakssRUFBWWMsR0FhbEIsT0FSQWdNLEVBQU92eUMsRUFBTTVNLEtBQU13RCxVQUFXLElBQzlCOHBFLEVBQVEsV0FDUCxPQUFPbjZCLEVBQUdqcUMsTUFBTzNELEdBQVdGLEtBQU04NUMsRUFBS3Z2QixPQUFRaGpCLEVBQU01TSxLQUFNd0QsZUFJdER1eUMsS0FBTzVDLEVBQUc0QyxLQUFPNUMsRUFBRzRDLE1BQVE5QyxFQUFPOEMsT0FFbEN1M0IsR0FHUnI2QixFQUFPczZCLFVBQVksU0FBVUMsR0FDdkJBLEVBQ0p2NkIsRUFBTzBXLFlBRVAxVyxFQUFPcVIsT0FBTyxJQUdoQnJSLEVBQU9wckMsUUFBVVosTUFBTVksUUFDdkJvckMsRUFBT3c2QixVQUFZbGhDLEtBQUsrZSxNQUN4QnJZLEVBQU81aUMsU0FBV0EsRUFDbEI0aUMsRUFBT1osV0FBYUEsRUFDcEJZLEVBQU9WLFNBQVdBLEVBQ2xCVSxFQUFPd1gsVUFBWUEsRUFDbkJ4WCxFQUFPN3JDLEtBQU80ckMsRUFFZEMsRUFBT3R3QixJQUFNRCxLQUFLQyxJQUVsQnN3QixFQUFPeTZCLFVBQVksU0FBVXA3QixHQUs1QixJQUFJbHJDLEVBQU82ckMsRUFBTzdyQyxLQUFNa3JDLEdBQ3hCLE9BQWtCLFdBQVRsckMsR0FBOEIsV0FBVEEsS0FLNUIwRixNQUFPd2xDLEVBQU13bEIsV0FBWXhsQixLQUc1QlcsRUFBTzNqQyxLQUFPLFNBQVV1YyxHQUN2QixPQUFlLE1BQVJBLEVBQ04sSUFDRUEsRUFBTyxJQUFLcGtCLFFBQVN3d0MsR0FBTyxVQW1CL0Isa0JBQ0MsT0FBT2hGLEdBRFIsUUFBa0IsT0FBbEIsYUFRRCxJQUdDMDZCLEdBQVV2aEUsRUFBTzZtQyxPQUdqQjI2QixHQUFLeGhFLEVBQU95aEUsRUF3QmIsT0F0QkE1NkIsRUFBTzY2QixXQUFhLFNBQVVsNUIsR0FTN0IsT0FSS3hvQyxFQUFPeWhFLElBQU01NkIsSUFDakI3bUMsRUFBT3loRSxFQUFJRCxJQUdQaDVCLEdBQVF4b0MsRUFBTzZtQyxTQUFXQSxJQUM5QjdtQyxFQUFPNm1DLE9BQVMwNkIsSUFHVjE2QixRQU1pQixJQUFidkIsSUFDWHRsQyxFQUFPNm1DLE9BQVM3bUMsRUFBT3loRSxFQUFJNTZCLEdBTXJCQSxHQXJtVmlCLFdBQWxCLEVBQU9yekMsSUFBaUQsV0FBMUIsRUFBT0EsRUFBT0QsU0FTaERDLEVBQU9ELFFBQVU2eEMsRUFBTzN0QyxTQUN2QjR0QyxFQUFTRCxHQUFRLEdBQ2pCLFNBQVVqdEMsR0FDVCxJQUFNQSxFQUFFVixTQUNQLE1BQU0sSUFBSWlDLE1BQU8sNENBRWxCLE9BQU8yckMsRUFBU2x0QyxJQUdsQmt0QyxFQUFTRCxLLGtEQ25DWDV4QyxFQUFPRCxRQUFVLFNBQVNDLEdBb0J6QixPQW5CS0EsRUFBT211RSxrQkFDWG51RSxFQUFPb3VFLFVBQVksYUFDbkJwdUUsRUFBT3F1RSxNQUFRLEdBRVZydUUsRUFBT21ILFdBQVVuSCxFQUFPbUgsU0FBVyxJQUN4Q3hHLE9BQU9DLGVBQWVaLEVBQVEsU0FBVSxDQUN2Q2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0UsS0FHaEJTLE9BQU9DLGVBQWVaLEVBQVEsS0FBTSxDQUNuQ2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0MsS0FHaEJELEVBQU9tdUUsZ0JBQWtCLEdBRW5CbnVFIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbi8vaW1wb3J0IHJlcG9ydFdlYlZpdGFscyBmcm9tICcuL3JlcG9ydFdlYlZpdGFscyc7XG5jb25zdCBtdXNpYz1be1wic2luZ2VyXCI6XCJpS09OXCIsXCJtb3ZpZVwiOlwidmVjU1ZYMVFZYlFcIixcInJhbmtcIjpcIjFcIixcInRpdGxlXCI6XCLsgqzrnpHsnYQg7ZaI64ukIChMT1ZFIFNDRU5BUklPKVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAxOVxcLzcwOVxcLzgxMDE5NzA5XzE1MTY4NjIyNDEwOThfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIlJlZCBWZWx2ZXQgKOugiOuTnOuyqOuysylcIixcIm1vdmllXCI6XCJKX0NGQmpBeVBXRVwiLFwicmFua1wiOlwiMlwiLFwidGl0bGVcIjpcIkJhZCBCb3lcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMjdcXC8yMTBcXC84MTAyNzIxMF8xNTE3MjkwMzIyMjUzXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLsnqXrjZXssqBcIixcIm1vdmllXCI6XCJ2Nl9Hd1hVMWxrZ1wiLFwicmFua1wiOlwiM1wiLFwidGl0bGVcIjpcIuq3uOuCoOyymOufvFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAwN1xcLzM5OVxcLzgxMDA3Mzk5XzE1MTE4NTQ0NDE4NTlfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIk1PTU9MQU5EICjrqqjrqqjrnpzrk5wpXCIsXCJtb3ZpZVwiOlwiSlFHUmc4WEJuQjRcIixcInJhbmtcIjpcIjRcIixcInRpdGxlXCI6XCLrv5zrv5xcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMTdcXC83MzNcXC84MTAxNzczM18xNTE0OTYzMjIxNDU5XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLsoJXsirntmZhcIixcIm1vdmllXCI6XCI4RHRKZTZaRnlFMFwiLFwicmFua1wiOlwiNVwiLFwidGl0bGVcIjpcIuuIiOyCrOuejFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAyOVxcLzEyMVxcLzgxMDI5MTIxXzE1MTc5MDA3NTU1MjVfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyyre2VmFwiLFwibW92aWVcIjpcIjkwMFg5ZkRGTGM0XCIsXCJyYW5rXCI6XCI2XCIsXCJ0aXRsZVwiOlwiUm9sbGVyIENvYXN0ZXJcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMjJcXC8zMTNcXC84MTAyMjMxM18xNTE2MTU5MTQ4NzAxXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLshKDrr7hcIixcIm1vdmllXCI6XCJGNHFmTjVVZUZ2UVwiLFwicmFua1wiOlwiN1wiLFwidGl0bGVcIjpcIuyjvOyduOqztVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAyNFxcLzQwNlxcLzgxMDI0NDA2XzE1MTYyNjExMjgyMjVfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIkNhbWlsYSBDYWJlbGxvXCIsXCJtb3ZpZVwiOlwiQlEwbXhRWG1Mc2tcIixcInJhbmtcIjpcIjhcIixcInRpdGxlXCI6XCJIYXZhbmEgKEZlYXQuIFlvdW5nIFRodWcpXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgwXFwvOTc1XFwvMzk2XFwvODA5NzUzOTZfMTUxNTczNjIyNzkyOF8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi66mc66Gc66ed7IqkIChNZWxvTWFuY2UpXCIsXCJtb3ZpZVwiOlwicVlZSnFXc0JiMVVcIixcInJhbmtcIjpcIjlcIixcInRpdGxlXCI6XCLshKDrrLxcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85NjRcXC85MTJcXC84MDk2NDkxMl8xNDk5NjcxNzkzNjM3XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLrs7zruajqsITsgqzstpjquLBcIixcIm1vdmllXCI6XCJmYWc4bmlyTVhnRVwiLFwicmFua1wiOlwiMTBcIixcInRpdGxlXCI6XCIj7LKr7IKs656RXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgxXFwvMDIwXFwvNTI3XFwvODEwMjA1MjdfMTUxNTU2Nzg0NDEzNl8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi66y466y4IChNb29uTW9vbilcIixcIm1vdmllXCI6XCJGdk9Cd1JXYUdaZ1wiLFwicmFua1wiOlwiMTFcIixcInRpdGxlXCI6XCLruYTtlonsmrRcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC84OTFcXC85MzNcXC84MDg5MTkzM18xNDc4Njg0MDM5MjIyXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLtjoDsuZggKFB1bmNoKVwiLFwibW92aWVcIjpcIldOVTBKQ09zbGl3XCIsXCJyYW5rXCI6XCIxMlwiLFwidGl0bGVcIjpcIuyYpOuKmOuwpOuPhFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAzMFxcLzk0NlxcLzgxMDMwOTQ2XzE1MTc4OTU4MzYzNTdfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIkRFQU5cIixcIm1vdmllXCI6XCJ3S3lNSXJCQ2xZd1wiLFwicmFua1wiOlwiMTNcIixcInRpdGxlXCI6XCJpbnN0YWdyYW1cIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMTVcXC8wMjhcXC84MTAxNTAyOF8xNTE0MjcyNTU0NjY4XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLri6TruYTsuZhcIixcIm1vdmllXCI6XCJfanpNRHNZSGt0SVwiLFwicmFua1wiOlwiMTRcIixcInRpdGxlXCI6XCLrhIgg7JeG64qUIOyLnOqwhOuTpFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAyNlxcLzE5N1xcLzgxMDI2MTk3XzE1MTY4NTgwMTIwMDZfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyXkOydvOumrCAoQWlsZWUpXCIsXCJtb3ZpZVwiOlwiWWJiUDNhVVhpZjBcIixcInJhbmtcIjpcIjE1XCIsXCJ0aXRsZVwiOlwi64uk7IucIOyTsOqzoCDsi7bslrRcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMzJcXC82NjdcXC84MTAzMjY2N18xNTE4MTU3ODA1NTI5XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJUV0lDRSAo7Yq47JmA7J207IqkKVwiLFwibW92aWVcIjpcInJSenhFaUJMUUNBXCIsXCJyYW5rXCI6XCIxNlwiLFwidGl0bGVcIjpcIkhlYXJ0IFNoYWtlclwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAwOVxcLzAyNFxcLzgxMDA5MDI0XzE1MTI5NzM0ODUwMTVfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIu2OgOy5mCAoUHVuY2gpXCIsXCJtb3ZpZVwiOlwieVF0M2tMY3pKcDRcIixcInJhbmtcIjpcIjE3XCIsXCJ0aXRsZVwiOlwi67Ck7J20IOuQmOuLiOq5jFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk5MVxcLzc2N1xcLzgwOTkxNzY3XzE1MDY2NjY1NjU2NDVfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIkZpdHogJiBUaGUgVGFudHJ1bXNcIixcIm1vdmllXCI6XCJZMlY2eWpqUGJYMFwiLFwicmFua1wiOlwiMThcIixcInRpdGxlXCI6XCJIYW5kQ2xhcFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzgwM1xcLzQ0OVxcLzgwODAzNDQ5XzE0NTg3ODgyNTEwMzBfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyImOyngCAoU1VaWSlcIixcIm1vdmllXCI6XCJlUTNnWHRYM1U3SVwiLFwicmFua1wiOlwiMTlcIixcInRpdGxlXCI6XCLri6TrpbjsgqzrnozsnYQg7IKs656R7ZWY6rOgIOyeiOyWtFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAyNFxcLzk1OFxcLzgxMDI0OTU4XzE1MTcyMTQ4MjYzMThfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuycpOyiheyLoFwiLFwibW92aWVcIjpcImp5X1VpSVFuX2QwXCIsXCJyYW5rXCI6XCIyMFwiLFwidGl0bGVcIjpcIuyii+uLiFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk1OVxcLzU3MlxcLzgwOTU5NTcyXzE0OTgwOTYzNDAzNTBfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyImOyngCAoU1VaWSlcIixcIm1vdmllXCI6XCJscHpKTnd1cjZaa1wiLFwicmFua1wiOlwiMjFcIixcInRpdGxlXCI6XCJIT0xJREFZIChGZWF0LiBEUFIgTElWRSlcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMjRcXC85NThcXC84MTAyNDk1OF8xNTE3MjE0ODI2MzE4XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLquYDrj5nrpaBcIixcIm1vdmllXCI6XCJrTVJMelNRb3JLMFwiLFwicmFua1wiOlwiMjJcIixcInRpdGxlXCI6XCLri7XsnqVcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMjFcXC8xOTFcXC84MTAyMTE5MV8xNTE1NjUzOTI0MDgxXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJSZWQgVmVsdmV0ICjroIjrk5zrsqjrsrMpXCIsXCJtb3ZpZVwiOlwiNnVKZjJJVDJaaDhcIixcInJhbmtcIjpcIjIzXCIsXCJ0aXRsZVwiOlwi7ZS87Lm067aAIChQZWVrLUEtQm9vKVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAwM1xcLzg1NFxcLzgxMDAzODU0XzE1MTA5MDM0NTQ4OTlfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIlRXSUNFICjtirjsmYDsnbTsiqQpXCIsXCJtb3ZpZVwiOlwiVjJobFFrVkpaaEVcIixcInJhbmtcIjpcIjI0XCIsXCJ0aXRsZVwiOlwiTElLRVlcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85OTVcXC8zMzNcXC84MDk5NTMzM18xNTA5MzQ1NjQ1MDUwXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLrsJXsm5BcIixcIm1vdmllXCI6XCJDYk5tUkpDa3dRc1wiLFwicmFua1wiOlwiMjVcIixcInRpdGxlXCI6XCJBbGwgT2YgTXkgTGlmZVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk3MFxcLzkyOVxcLzgwOTcwOTI5XzE1MDExNDEzNDkxNTFfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuuwqe2DhOyGjOuFhOuLqFwiLFwibW92aWVcIjpcIk1CZFZYa1NkaHdVXCIsXCJyYW5rXCI6XCIyNlwiLFwidGl0bGVcIjpcIkROQVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk4OFxcLzIyOFxcLzgwOTg4MjI4XzE1MDU3MjIwMzk5MjBfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuq4uOq1rOu0ieq1rFwiLFwibW92aWVcIjpcImtnc3BNTExab3NFXCIsXCJyYW5rXCI6XCIyN1wiLFwidGl0bGVcIjpcIuydtCDrs4RcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85ODdcXC84MTJcXC84MDk4NzgxMl8xNTA1NzIwNjkxNzM5XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJFWE9cIixcIm1vdmllXCI6XCJsZXUtY1R2TVdUQVwiLFwicmFua1wiOlwiMjhcIixcInRpdGxlXCI6XCJVbml2ZXJzZVwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAxNFxcLzk0MlxcLzgxMDE0OTQyXzE1MTQyNjk4MDk2NzdfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuuvvOyEnCAmIOycpOyiheyLoFwiLFwibW92aWVcIjpcIlgyOWgwVHJKZlNNXCIsXCJyYW5rXCI6XCIyOVwiLFwidGl0bGVcIjpcIuyii+yVhFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MVxcLzAwMlxcLzc3NFxcLzgxMDAyNzc0XzE1MTA3MjIzMzM4MDBfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyYpOuniOydtOqxuCAoT0ggTVkgR0lSTClcIixcIm1vdmllXCI6XCJRSU41X3RKUml5WVwiLFwicmFua1wiOlwiMzBcIixcInRpdGxlXCI6XCLruYTrsIDsoJXsm5BcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMjBcXC8xMzBcXC84MTAyMDEzMF8xNTE1NDgzNDk4NDA4XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLri6TsnbTrgpjrr7kg65OA7JikIChEeW5hbWljIER1bylcIixcIm1vdmllXCI6XCJMUWZNcUhTa2xZSVwiLFwicmFua1wiOlwiMzFcIixcInRpdGxlXCI6XCLrtInsoJzshKAgKEZlYXQuIOyImOuegClcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMzFcXC8yOTZcXC84MTAzMTI5Nl8xNTE3OTg0MjQ3ODU2XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLrgpjslrxcIixcIm1vdmllXCI6XCIwd2xYYUhtbU9WY1wiLFwicmFua1wiOlwiMzJcIixcInRpdGxlXCI6XCLquLDslrXsnZgg67mI7J6Q66asXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgxXFwvMDA3XFwvNTM2XFwvODEwMDc1MzZfMTUxMTkzMjgxMzI1MV8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi67mE7Yis67mEIChCVE9CKVwiLFwibW92aWVcIjpcIjRieWtGdm5Sem5vXCIsXCJyYW5rXCI6XCIzM1wiLFwidGl0bGVcIjpcIuq3uOumrOybjO2VmOuLpFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk5M1xcLzc2NFxcLzgwOTkzNzY0XzE1MDgxMzk4MzA5MzdfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIkVkIFNoZWVyYW5cIixcIm1vdmllXCI6XCJKR3dXTkdKZHZ4OFwiLFwicmFua1wiOlwiMzRcIixcInRpdGxlXCI6XCJTaGFwZSBPZiBZb3VcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85MTFcXC80OTRcXC84MDkxMTQ5NF8xNDg0NjQ0NTY5NTM0XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLshLjruJDti7QgKFNldmVudGVlbilcIixcIm1vdmllXCI6XCJTaEVVNEFiMHp4VVwiLFwicmFua1wiOlwiMzVcIixcInRpdGxlXCI6XCLqs6Drp5nri6RcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODFcXC8wMzBcXC84MzZcXC84MTAzMDgzNl8xNTE3ODE2NDIyMDkyXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLslYTsnbTsnKAgKElVKVwiLFwibW92aWVcIjpcIkJ6WW5OZEpoWlF3XCIsXCJyYW5rXCI6XCIzNlwiLFwidGl0bGVcIjpcIuuwpO2OuOyngFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzkzM1xcLzE1NFxcLzgwOTMzMTU0XzE0OTAzNDE0MDEwNjlfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyasOybkOyerFwiLFwibW92aWVcIjpcIlJzSHE2US03TnNVXCIsXCJyYW5rXCI6XCIzN1wiLFwidGl0bGVcIjpcIuyLnOywqCAoV2UgQXJlKSAoRmVhdC4g66Gc6rysICYgR1JBWSlcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85ODNcXC80MTlcXC84MDk4MzQxOV8xNTA0NTA5Mzk3NjI1XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLrqZzroZzrp53siqQgKE1lbG9NYW5jZSlcIixcIm1vdmllXCI6XCJUQ1ZRVUJheXNrZ1wiLFwicmFua1wiOlwiMzhcIixcInRpdGxlXCI6XCLsp5nslrTsoLhcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85OTNcXC8xODJcXC84MDk5MzE4Ml8xNTA3ODgwNjQ5NTAwXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJTaGF3biBNZW5kZXNcIixcIm1vdmllXCI6XCJkVDJvd3R4a1U4a1wiLFwicmFua1wiOlwiMzlcIixcInRpdGxlXCI6XCJUaGVyZSdzIE5vdGhpbmcgSG9sZGluJyBNZSBCYWNrXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgwXFwvOTQxXFwvNTQyXFwvODA5NDE1NDJfMTQ5MjczOTc3NTQ4OV8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi67O867mo6rCE7IKs7LaY6riwXCIsXCJtb3ZpZVwiOlwiaFptb015RlhEb0lcIixcInJhbmtcIjpcIjQwXCIsXCJ0aXRsZVwiOlwi7I24IO2DiOq6vOyVvFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzk5MVxcLzMxNVxcLzgwOTkxMzE1XzE1MDY1ODQwMjE0MjVfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyWtOuwmCDsnpDsubTtjIwgKFVyYmFuIFpha2FwYSlcIixcIm1vdmllXCI6XCJPOTJ5SEIwTURaOFwiLFwicmFua1wiOlwiNDFcIixcInRpdGxlXCI6XCLqt7jrlYzsnZgg64KYLCDqt7jrlYzsnZgg7Jqw66asXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgxXFwvMDAxXFwvMDQ2XFwvODEwMDEwNDZfMTUxMDEyNDI5MDcyNl8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi7KKF7ZiEIChKT05HSFlVTilcIixcIm1vdmllXCI6XCJOcFRwRXNFOUc4Y1wiLFwicmFua1wiOlwiNDJcIixcInRpdGxlXCI6XCJMb25lbHkgKEZlYXQuIO2DnOyXsClcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85NDFcXC84ODJcXC84MDk0MTg4Ml8xNDkzMDE3MTkxNzU1XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLrsJXsm5BcIixcIm1vdmllXCI6XCJcXC93YXRjaD92PW5ra0Uwek5pRmUwIFwiLFwicmFua1wiOlwiNDNcIixcInRpdGxlXCI6XCLrhbjroKVcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC84OTNcXC82MzBcXC84MDg5MzYzMF8xNDc5MjkwNDIzNzQxXzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLshKDrr7hcIixcIm1vdmllXCI6XCJ1cjBoQ2RuZTItc1wiLFwicmFua1wiOlwiNDRcIixcInRpdGxlXCI6XCLqsIDsi5zrgphcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85NzlcXC8zMzlcXC84MDk3OTMzOV8xNTAzMzY1MDE1NDM1XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJUaGUgQ2hhaW5zbW9rZXJzICYgQ29sZHBsYXlcIixcIm1vdmllXCI6XCJGTTdNRllveWxWc1wiLFwicmFua1wiOlwiNDVcIixcInRpdGxlXCI6XCJTb21ldGhpbmcgSnVzdCBMaWtlIFRoaXNcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85MTNcXC81NjFcXC84MDkxMzU2MV8xNDkxNTMzMTYyNzk1XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCLtl6TsnbTspoggKEhlaXplKVwiLFwibW92aWVcIjpcImFmeExhUWlMdS1vXCIsXCJyYW5rXCI6XCI0NlwiLFwidGl0bGVcIjpcIuu5hOuPhCDsmKTqs6Ag6re4656Y7IScIChGZWF0LiDsi6DsmqnsnqwpXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgwXFwvOTYwXFwvMzU3XFwvODA5NjAzNTdfMTQ5ODQ1ODE3MjEzOF8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi7JeQ7ZS97ZWY7J20IChFUElLIEhJR0gpXCIsXCJtb3ZpZVwiOlwiWjNJTk5qQUVxSGtcIixcInJhbmtcIjpcIjQ3XCIsXCJ0aXRsZVwiOlwi7Jew7JWg7IaM7ISkIChGZWF0LiDslYTsnbTsnKApXCIsXCJwb3N0ZXJcIjpcIlxcL1xcL2ltYWdlLmdlbmllLmNvLmtyXFwvWVxcL0lNQUdFXFwvSU1HX0FMQlVNXFwvMDgwXFwvOTkxXFwvMzM0XFwvODA5OTEzMzRfMTUwODc0MTcxNTA4Nl8xXzE0MHgxNDAuSlBHXCJ9LHtcInNpbmdlclwiOlwi7JeQ7J2866asIChBaWxlZSlcIixcIm1vdmllXCI6XCI2clM3T1VHWFVpa1wiLFwicmFua1wiOlwiNDhcIixcInRpdGxlXCI6XCLssqvriIjsspjrn7wg64SI7JeQ6rKMIOqwgOqyoOuLpFwiLFwicG9zdGVyXCI6XCJcXC9cXC9pbWFnZS5nZW5pZS5jby5rclxcL1lcXC9JTUFHRVxcL0lNR19BTEJVTVxcLzA4MFxcLzkxMVxcLzQ4OFxcLzgwOTExNDg4XzE0ODM2OTY0NDQ1MTBfMV8xNDB4MTQwLkpQR1wifSx7XCJzaW5nZXJcIjpcIuyVhOydtOycoCAoSVUpXCIsXCJtb3ZpZVwiOlwiZDlJeGR3RUZrMWNcIixcInJhbmtcIjpcIjQ5XCIsXCJ0aXRsZVwiOlwi7YyU66CI7Yq4IChGZWF0LiBHLURSQUdPTilcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85NDFcXC81OTRcXC84MDk0MTU5NF8xNDkyNzYwMzc1NzA4XzFfMTQweDE0MC5KUEdcIn0se1wic2luZ2VyXCI6XCJSZWQgVmVsdmV0ICjroIjrk5zrsqjrsrMpXCIsXCJtb3ZpZVwiOlwiV3lpSUdFSFFQOG9cIixcInJhbmtcIjpcIjUwXCIsXCJ0aXRsZVwiOlwi67mo6rCEIOunmyAoUmVkIEZsYXZvcilcIixcInBvc3RlclwiOlwiXFwvXFwvaW1hZ2UuZ2VuaWUuY28ua3JcXC9ZXFwvSU1BR0VcXC9JTUdfQUxCVU1cXC8wODBcXC85NjRcXC82NThcXC84MDk2NDY1OF8xNDk5NDIxODU1MDc3XzFfMTQweDE0MC5KUEdcIn1dXG4vLyBwcm9wcyA9PiDsho3shLHqsJLsnLzroZwg642w7J207YSwIOyghOyGoSA6IOqzoOyglSDrjbDsnbTthLBcbi8vIOyDneyEseyekCDrp6TqsJzrs4DsiJhcbi8vIGNvbnN0cnVjdG9yKHByb3BzKVxuUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8QXBwIG11c2ljPXttdXNpY30vPixcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pO1xuXG4vLyBJZiB5b3Ugd2FudCB0byBzdGFydCBtZWFzdXJpbmcgcGVyZm9ybWFuY2UgaW4geW91ciBhcHAsIHBhc3MgYSBmdW5jdGlvblxuLy8gdG8gbG9nIHJlc3VsdHMgKGZvciBleGFtcGxlOiByZXBvcnRXZWJWaXRhbHMoY29uc29sZS5sb2cpKVxuLy8gb3Igc2VuZCB0byBhbiBhbmFseXRpY3MgZW5kcG9pbnQuIExlYXJuIG1vcmU6IGh0dHBzOi8vYml0Lmx5L0NSQS12aXRhbHNcbi8vcmVwb3J0V2ViVml0YWxzKCk7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCJpbXBvcnQgUmVhY3Qse0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG4vKlxuICAgICByZWFjdCA9PiDtgbTrnpjsiqTrqoUgLCDrqZTshozrk5zsnYAg67CY65Oc7IucIOuMgOusuOyekOuhnCDsi5zsnpHtlZzri6QgKOusuOuylSlcbiAgICAgICAgICAgPT4gaHRtbCDsvZTrlKkgPT4g7YOc6re464qUIOuwmOuTnOyLnCDshozrrLjsnpBcbiAgICAgICAgICAgICAg7IaN7ISx7J20IOyeiOuKlCDqsr3smrDripQgXCJcIlxuICAgICAgICAgICAgICDsl6zripTtg5zqt7jsmYAg64ur64qUIO2DnOq3uOqwgCDsnbzsuZhcbiAgICAgICAgICAgICAgPT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgICAgMS4g7Jes64qUIO2DnOq3uCA8YT5cbiAgICAgICAgICAgICAgMi4g64ur64qUIO2DnOq3uCA8L2E+XG4gICAgICAgICAgICAgIDMuIOuLqOuPhSDtg5zqt7ggPGltZyAvPlxuICAgICAgICAgICA9PiDstZzsg4HsnIQg7YOc6re466W8IOuwmOuTnOyLnCDsgqzsmqlcblxuICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PjwvZGl2PiAgKFgpXG5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICovXG4vLyA8QXBwIG11c2ljPXttdXNpY30vPlxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50e1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZT17XG4gICAgICAgICAgICB2bzp7fSxcbiAgICAgICAgICAgIGlzU2hvdzowXG4gICAgICAgIH1cblxuICAgIH1cbiAgICBtdXNpY0RldGFpbCh2bylcbiAgICB7XG4gICAgICAgIC8vdGhpcy5zdGF0ZS5pc2hvdz0xO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtpc1Nob3c6MSx2bzp2b30pXG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KClcbiAgICB7XG4gICAgICAgICQoJyNrZXl3b3JkJykua2V5dXAoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCBrPSQoJyNrZXl3b3JkJykudmFsKCk7XG4gICAgICAgICAgICAkKCcjdXNlci10YWJsZSA+IHRib2R5ID4gdHInKS5oaWRlKCk7XG4gICAgICAgICAgICBsZXQgdGVtcD0kKCcjdXNlci10YWJsZT50Ym9keT50cj50ZDpudGgtY2hpbGQoNW4rMyk6Y29udGFpbnMoXCInK2srJ1wiKScpO1xuICAgICAgICAgICAgJCh0ZW1wKS5wYXJlbnQoKS5zaG93KCk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIC8vIO2ZlOuptCDstpzroKVcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGh0bWw9dGhpcy5wcm9wcy5tdXNpYy5tYXAoKG0pPT5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGQ+e20ucmFua308L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD48aW1nIHNyYz17bS5wb3N0ZXJ9IHdpZHRoPXtcIjM1XCJ9IGhlaWdodD17XCIzNVwifS8+PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgb25DbGljaz17dGhpcy5tdXNpY0RldGFpbC5iaW5kKHRoaXMsbSl9PnttLnRpdGxlfTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkPnttLnNpbmdlcn08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57bS5hbGJ1bX08L3RkPlxuXG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICApXG4gICAgICAgIHJldHVybihcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInJvd1wifT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjb2wtc20tOFwifT5cbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT17XCJ0ZXh0LWNlbnRlclwifT7rrqTsp4EgVG9wNTA8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT17XCJ0ZXh0XCJ9IHNpemU9e1wiMjBcIn0gaWQ9e1wia2V5d29yZFwifS8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcImhlaWdodFwiOlwiMTBweFwifX0+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9e1widGFibGVcIn0gaWQ9e1widXNlci10YWJsZVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9e1wiZGFuZ2VyXCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD7rsojtmLg8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD7rhbjrnpjrqoU8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD7qsIDsiJjrqoU8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD7slajrspQ8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICB7aHRtbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY29sLXNtLTRcIn0+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzU2hvdz09MT88TXVzaWNEZXRhaWwgbT17dGhpcy5zdGF0ZS52b30vPjpudWxsfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5jbGFzcyBNdXNpY0RldGFpbCBleHRlbmRzIENvbXBvbmVudHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuICAgIHJlbmRlcigpe1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzPXtcInRhYmxlXCJ9PlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49e1wiMlwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgc3JjPXtcImh0dHA6Ly95b3V0dWJlLmNvbS9lbWJlZC9cIit0aGlzLnByb3BzLm0ubW92aWV9IHdpZHRoPXtcIjQwMFwifSBoZWlnaHQ9e1wiNTAwXCJ9PjwvaWZyYW1lPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtcInRleHQtcmlnaHRcIn0+7KCc66qpPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnByb3BzLm0udGl0bGV9PC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17XCJ0ZXh0LXJpZ2h0XCJ9PuqwgOyImOuqhTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5wcm9wcy5tLnNpbmdlcn08L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICApXG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQXBwOyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My41LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIwLTA1LTA0VDIyOjQ5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjUuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNVxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMC0wMy0xNFxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==